# -*- coding: utf-8 -*-

# --------------------------------------------------------------------------------------


from simmate.configuration.django import setup_full  # ensures setup
from simmate.database.diffusion import MaterialsProjectStructure as MPStructure

queryset = MPStructure.objects.only("structure_json").all()

structures = [o.to_pymatgen() for o in queryset]


# --------------------------------------------------------------------------------------

# I decided to do pRDF to get F-F lengths. Alternatively, I could follow this 
# notebook: 
# https://nbviewer.jupyter.org/github/hackingmaterials/matminer_examples/blob/main/matminer_examples/data_retrieval-nb/mpds.ipynb

from dask.distributed import Client
import numpy
from scipy.ndimage import gaussian_filter1d
from matminer.featurizers.structure import PartialRadialDistributionFunction
from pymatgen.core.periodic_table import Element

client = Client()

rdf_engine = PartialRadialDistributionFunction(cutoff=20, bin_size=0.05, include_elems=("F"))

# note, this line is a hack -- I'm setting this manually instead of running ".fit()"
rdf_engine.elements_ = [Element("F")]

# Now for each structure, get the rdf with only F-F

rdf_all = numpy.zeros(400) ## CHANGE WITH BIN SIZE + CUTOFF

def get_rdf(structure):
    # idk why I need to do this instead of rdf_engine.featurize()...
    rdf = rdf_engine.compute_prdf(structure)[1][('F', 'F')]
    # make sure there aren't any NaN values
    numpy.nan_to_num(rdf, copy=False, nan=0.0)
    
    # Normalize the rdf
    rdf_norm = rdf / rdf.max()
    numpy.nan_to_num(rdf_norm, copy=False, nan=0.0)
    
    # smooth the rdf
    rdf_smooth = gaussian_filter1d(rdf_norm, sigma=3)
    # %varexp --plot rdf_smooth
    
    return rdf_smooth


futures = []
for structure in structures:  # add [:1000] for testing
    future = client.submit(get_rdf, structure)
    futures.append(future)

for future in futures:    
    rdf_all += future.result()

# normalize the summed rdf
rdf_all_norm = rdf_all / rdf_all.max()
%varexp --plot rdf_all_norm

# --------------------------------------------------------------------------------------


import matplotlib.pyplot as plt

# start with a square Figure
fig = plt.figure(figsize=(8, 5))

# HEXBIN SUBPLOT
# create the axes object
ax = fig.add_subplot(
    xlabel=r"r ($\AA$)",
    ylabel=r"average RDF(r)",
    xlim=(0,12),
    ylim=(0,1.1),
)

x = [n*0.05 for n in range(1, int(20/0.05)+1)]

# create the hexbin subplot
hb = ax.plot(
    x,  # X
    rdf_all_norm,  # Y
    color="black",
)

ax.fill_between(x, rdf_all_norm, where=[a<=5.05 for a in x], facecolor="green")
ax.fill_between(x, rdf_all_norm, where=[a>=5.00 for a in x], facecolor="lightgrey") 
# , y2, where=y2 >= y1, facecolor='green', interpolate=True)

ax.axvline(5, color="black", linestyle="--")
ax.axes.yaxis.set_ticks([])

plt.show()


# --------------------------------------------------------------------------------------

# # Because the rdf takes a while to calculate, here is the final result for quick testing
# rdf_all_norm= [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.553442873377808e-09, 1.4080400425664247e-07, 5.021314547710417e-07, 1.6127164972771425e-06, 4.610462695299599e-06, 1.1812712711137379e-05, 2.7210790441145716e-05, 5.639256901830962e-05, 0.00010531570864158603, 0.00017769087201805237, 0.00027177618559224605, 0.00037882094545054737, 0.00048506358939655043, 0.0005769808218377711, 0.0006476890744984372, 0.0007001556023829801, 0.0007494172748155113, 0.0008159859363002126, 0.0009322702525286853, 0.0011588374902345567, 0.0016028582193812846, 0.002455129992061217, 0.004009240075928087, 0.006657254487386272, 0.01082514571902904, 0.016887756380788224, 0.02513569662539385, 0.03589771005789102, 0.049886068051473116, 0.06866367190243784, 0.0949774384350149, 0.13261832822655303, 0.18566289020320867, 0.2571927320798256, 0.3479168613446499, 0.45520887292180173, 0.5729612916857609, 0.692318670326644, 0.8030828416907854, 0.8954173833618584, 0.9614712187404175, 0.9966075491645234, 1.0, 0.9744686734634744, 0.925617443094444, 0.8605199248028571, 0.7863341313149634, 0.7092439240238112, 0.6339192024784915, 0.563480195810995, 0.49975524919388575, 0.44364128795512425, 0.39544171224390945, 0.35513096301883545, 0.3225399024916677, 0.29743836099980386, 0.27953974568191264, 0.26843844048766474, 0.26357339743441693, 0.2642287504201331, 0.2695555269561482, 0.2785606963806558, 0.29008176895510257, 0.30277977124841576, 0.3152292332083758, 0.32611644120980043, 0.3344870267172178, 0.33994875001482944, 0.34273612916286506, 0.34361100878043843, 0.34364601990510846, 0.34396321372490607, 0.3455084331089388, 0.3488973730424193, 0.3543509285251116, 0.36171501799071193, 0.37056953106092244, 0.3804223668022459, 0.39096074098538264, 0.402292671485175, 0.4150568143117962, 0.4302896149853753, 0.44904874605490924, 0.4718878311556251, 0.4983885733229747, 0.52696419079762, 0.5550492794478974, 0.5796630595592654, 0.5981752778039784, 0.6089941340979167, 0.6119153591376615, 0.6079968865268783, 0.5990376054693258, 0.5869060122411542, 0.573005109705621, 0.5580473660425778, 0.5421695714035109, 0.5252587774665215, 0.5073124371020489, 0.488660337593114, 0.4699629577131569, 0.4520096921355672, 0.43545003776576563, 0.4206154994901791, 0.407530230026793, 0.39609741409088967, 0.38633249114189333, 0.37848257946154257, 0.37296446020137747, 0.3701523263403764, 0.3701568870765619, 0.3727330023929803, 0.37735071434743145, 0.38336197061307076, 0.3901455777814739, 0.3971489851545577, 0.4038587928246208, 0.4097861808587288, 0.41453086840318853, 0.4179031068123415, 0.42001724333351176, 0.4212827369251138, 0.4222971428849774, 0.4236972892439904, 0.4260472904708557, 0.4297828141228757, 0.4351801615145941, 0.44231553834228987, 0.45101029473808596, 0.46080656211879306, 0.47101974068270963, 0.48088293530215964, 0.4897338538648118, 0.4971612422320233, 0.5030418153584073, 0.507451322853796, 0.510511424100233, 0.5122587669279332, 0.512595503605309, 0.511332973696519, 0.5082927029301011, 0.5034044690319993, 0.4967675314570652, 0.4886565288516349, 0.4794823108351847, 0.469727430478855, 0.4598775788213456, 0.45036420866265064, 0.4415264302383079, 0.43358889984330806, 0.42666126342545724, 0.4207571276217302, 0.41582978964886175, 0.4118160698964814, 0.40866895441044426, 0.40637340644925996, 0.40494537736346253, 0.40442739315199794, 0.40488182276528734, 0.4063850133304784, 0.40900953289861464, 0.4127875192318023, 0.41766378498046725, 0.42345678676854376, 0.42984626215261523, 0.43640109665410276, 0.44264357138699967, 0.4481306035528185, 0.4525284339429473, 0.4556592701720639, 0.45751023759322945, 0.4582055516611806, 0.4579567230886654, 0.45700661647673146, 0.4555867863345027, 0.4538956931293191, 0.4521043163774994, 0.4503755524882681, 0.44888194095108724, 0.44780522536010914, 0.4473055240422528, 0.4474769107566292, 0.44831551649572465, 0.44972539750443374, 0.4515631617458029, 0.4536961782940044, 0.45603999785702337, 0.458549923831145, 0.4611770828143721, 0.46381481938032865, 0.466271464023168, 0.4682850166592216, 0.46957835381534396, 0.4699308736601522, 0.46923472689265733, 0.46751463734358045, 0.464910609443513, 0.4616402966768515, 0.45796406881180673, 0.45415891210676335, 0.4504962282319666, 0.4472178360919526, 0.44451356502638134, 0.44251243789566497, 0.4412863533974164, 0.44085898843599586, 0.44120083208502364, 0.4422101469386324, 0.4436968331214325, 0.44538939281708906, 0.4469762576826857, 0.44816778542823843, 0.448761209925998, 0.44868497656118533, 0.4480141383978095, 0.4469542057481461, 0.44579485257387075, 0.44483673744781516, 0.4443135714251995, 0.4443330196203095, 0.44486160567655286, 0.445755917215589, 0.44682390904641606, 0.4478831524522942, 0.44879677704233895, 0.4494840981009949, 0.4499146289234876, 0.4500950819054108, 0.4500526132994606, 0.44982000182452214, 0.44942948467870936, 0.4489152905456637, 0.44832191394046145, 0.4477083289528327, 0.4471461352435931, 0.446715424909996, 0.44649913593917695, 0.4465718210780302, 0.44697538445363877, 0.44768367263683245, 0.44857591830191534, 0.4494439574633363, 0.45004577259299117, 0.4501807702255754, 0.4497563144796683, 0.44881086950360277, 0.44748699418216914, 0.4459737328974399, 0.4444498226357776, 0.4430533723769752, 0.4418846032821067, 0.44102458489505114, 0.44054699583832907, 0.4405115204985301, 0.440947079692748, 0.44184080780701257, 0.4431426169224589, 0.44477821840272486, 0.4466580308865449, 0.4486788433035183, 0.4507234877078817, 0.4526679355953726, 0.4543951209936417, 0.4558090901438643, 0.4568415355580533, 0.45744924677881954, 0.45760847439960944, 0.45731267014803556, 0.45657635016975523, 0.45544463213785275, 0.45400525128363334, 0.45239290503056323, 0.45077953430830964, 0.44935159833286253, 0.4482768803687343, 0.44766976890527127, 0.4475644936561948, 0.4479038825956555, 0.4485472097127232, 0.44930005114965715, 0.449958320874523, 0.4503569574355327, 0.45040827884553464, 0.4501156546125964, 0.44955699360428875, 0.4488469439047298, 0.4480952889015593, 0.44738299330725745, 0.44676276189251013, 0.4462771110199667, 0.4459726153110521, 0.44589767627835203, 0.4460818979221172, 0.44651237136302496, 0.4471225366785862, 0.44780158339807674, 0.44842281631440506, 0.44887870530370005, 0.4491097118954643, 0.44911726433968585, 0.4489559750787323, 0.44870869301462823, 0.44845827095330876, 0.44826676685377137, 0.44816788378749983, 0.44817475108479304, 0.44829120908023484, 0.44851867691067665, 0.4488558951847281, 0.4492938968088868, 0.44981504274883244, 0.4504012328394781, 0.45104152554896976, 0.45172915748051246, 0.452442347416674, 0.45312367071689846, 0.45367550882835844, 0.45398509113054036, 0.4539661002991798, 0.453592458337218, 0.4529070093749671, 0.45200042472077134, 0.45097890774478705, 0.4499379622633305, 0.44895428072988913, 0.44808944075542817, 0.44739259771996404, 0.44689325021889964, 0.4465883095813174, 0.44643619999868017, 0.4463659014244267, 0.4463010775053345, 0.4461864124662114, 0.4460003309289008, 0.4457496320822917, 0.4454534731577778, 0.4451314458164825, 0.44480514862786436, 0.44450977299860767, 0.44429928716354156, 0.4442337941508981, 0.44435273188658764, 0.4446520060983972, 0.44508435376842503, 0.4455819892558998, 0.4460867333339695, 0.4465687082852756, 0.4470243905379205, 0.4474615070844546, 0.4478817628170979, 0.4482737262310509, 0.44861715822154374, 0.44889707474333024, 0.4491179404688953, 0.4493103412337703, 0.4495253627581291, 0.4498173834288778, 0.4502208771201215, 0.4507330218649222, 0.4513088470114897, 0.4518725001131209, 0.4523396155203862, 0.4526415904880604, 0.4527434136857676, 0.4526491751077983, 0.452397228530719, 0.45204664322963056, 0.45165937925662447, 0.45128421592390466, 0.45094631632220583, 0.45064573092652077, 0.4503660577086814, 0.4500869532627301, 0.4497971051389124, 0.4495003662796725, 0.4492131825355049, 0.44895678792135013, 0.4487479741701926, 0.4485986912196136, 0.44851936144545607, 0.4485193620307012, 0.44859863516032655, 0.44873477638759574, 0.4488788454446679, 0.44897153596551376]
