window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "simmate", "modulename": "simmate", "qualname": "", "type": "module", "doc": "<h2 id=\"welcome\">Welcome!</h2>\n\n<p><code>simmate</code> is the base module and contains all of the code that Simmate runs on.\nTo get started, make sure you have either completed our <a href=\"https://github.com/jacksund/simmate/tree/main/tutorials\">introduction tutorials</a>\nor are comfortable with python.</p>\n\n<p>Within each subfolder (aka each python \u201cmodule\u201d), you\u2019ll find more details on what it contains.</p>\n\n<p><strong>But as a brief summary\u2026</strong></p>\n\n<ul>\n<li><code>calculators</code> = third-party programs that run analyses for us (e.g. VASP which runs DFT calculations)</li>\n<li><code>command_line</code> = makes some common functions available as commands in the terminal (for advanced users) </li>\n<li><code>configuration</code> = the defualt Simmate settings and how to update them </li>\n<li><code>database</code> = defines how all Simmate data is organized into tables (aka \u201cmodels\u201d) and let\u2019s you access it </li>\n<li><code>file_converters</code> = reformat to/from file types (e.g. POSCAR \u2013&gt; CIF) </li>\n<li><code>toolkit</code> = \u201ccore\u201d functions for Simmate, ranging from pulling out symmetry to transforming a crystal lattice</li>\n<li><code>visualization</code> = visualizing structures, 3D data, and simple plots</li>\n<li><code>website</code> = runs the simmate.org website </li>\n<li><code>workflow_engine</code> = tools and utilities that help submit calculations as well as handle errors</li>\n<li><code>workflows</code> = common analyses used in materials chemistry</li>\n</ul>\n\n<p><strong>There are also two extra files\u2026</strong> </p>\n\n<ul>\n<li><code>shortcuts</code> = let\u2019s you import common functions with ease </li>\n<li><code>utilities</code> = contains simple functions that are used throughout the other modules</li>\n</ul>\n"}, {"fullname": "simmate.calculators", "modulename": "simmate.calculators", "qualname": "", "type": "module", "doc": "<h2 id=\"simmate-calculators\">Simmate Calculators</h2>\n\n<p>Calculators are external codes/programs that perform some analysis for us. </p>\n\n<p>For example, VASP is a program that can run a variety of density functional theory (DFT) calculations. But because it isn't written in Python, we need some \"helper\" code here to call VASP commands, make input files, and pull data from the outputs. </p>\n\n<p>All calculators have the same folder structure:</p>\n\n<p>.. code-block::</p>\n\n<pre><code>\u251c\u2500\u2500 example_calculator\n\u2502   \u251c\u2500\u2500 database\n\u2502   \u251c\u2500\u2500 error_handlers\n\u2502   \u251c\u2500\u2500 inputs\n\u2502   \u251c\u2500\u2500 outputs\n\u2502   \u251c\u2500\u2500 configuration\n\u2502   \u251c\u2500\u2500 tasks\n\u2502   \u251c\u2500\u2500 website\n\u2502   \u2514\u2500\u2500 workflows\n</code></pre>\n\n<p><strong>NOTE:</strong> <em>Beginners should start by looking at the <code>workflows</code> module as this ties all other modules together. Advanced users can start with each calculator's <code>tasks</code> to build your own custom workflow.</em></p>\n\n<p>In a more logical order (rather than alphabetical like above), here is what each module contains:</p>\n\n<ul>\n<li><code>configuration</code> = helps to install the program and setup common settings for it</li>\n<li><code>inputs</code> &amp; <code>outputs</code> = automatically generate files as well as load their data into python</li>\n<li><code>error_handlers</code> = help correct common errors in calculations that cause the program to fail</li>\n<li><code>tasks</code> = how the program is actually setup, executed, and worked-up. It ties together all the <code>inputs</code>, <code>outputs</code>, and <code>error-handler</code> functions into one. A single task can be viewed as a single call to the program (i.e. a single calculation).</li>\n<li><code>database</code> = holds all of the datatables for storing our results</li>\n<li><code>workflows</code>  = brings together <code>tasks</code> and <code>database</code>, so these setup individual tasks and handle saving the results to our database</li>\n<li><code>website</code> = lets us submit workflows and view results with our website interface</li>\n</ul>\n"}, {"fullname": "simmate.calculators.ase_emt", "modulename": "simmate.calculators.ase_emt", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader", "modulename": "simmate.calculators.bader", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader.inputs", "modulename": "simmate.calculators.bader.inputs", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader.outputs", "modulename": "simmate.calculators.bader.outputs", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader.outputs.acf", "modulename": "simmate.calculators.bader.outputs.acf", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader.outputs.acf.parse_ACF", "modulename": "simmate.calculators.bader.outputs.acf", "qualname": "parse_ACF", "type": "function", "doc": "<p></p>\n", "parameters": ["filename"], "funcdef": "def"}, {"fullname": "simmate.calculators.deepmd", "modulename": "simmate.calculators.deepmd", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs", "modulename": "simmate.calculators.deepmd.inputs", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs.parameters", "modulename": "simmate.calculators.deepmd.inputs.parameters", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs.type_and_set", "modulename": "simmate.calculators.deepmd.inputs.type_and_set", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs.type_and_set.DeepmdDataset", "modulename": "simmate.calculators.deepmd.inputs.type_and_set", "qualname": "DeepmdDataset", "type": "class", "doc": "<p>This class works simply as a converter. You provide it a list of\nIonicStepStructures that have forces and energies, and it will create a\ndeepmd input for you.</p>\n\n<p>The input consists of 2 \"type\" files and then a subfolder made of 4 files for\nthe actaul data. An example folder looks like this:\n    type.raw\n    type_map.raw\n    set.000\n        box.npy\n        coord.npy\n        energy.npy\n        force.npy</p>\n\n<p>The \"type\" files are very simple. \"type_map.raw\" is just a list of elements\nand the \"type.raw\" is our composition listing what each site is. For example,\nH20 (water) would just be...\n    type_map.raw --> H O\n    type.raw --> 0 0 1</p>\n\n<p>These .npy are \"numpy\" files, where the data included in each is...\n  box = lattice matrixes\n  coord = site's cartesian coordinates\n  energy = calculated energies\n  force = calculated forces for sites</p>\n\n<p>All data is collapsed to 1D arrays. For example, this means the 3x3 lattice matrix\nbecomes a 1x9 list of numbers and the entire file is a list of matricies in this\nformat. The same is done to forces, coords, and energies.</p>\n\n<p>Note this is the folder/file format for EACH composition. So this class creates\nmany of these folders if you provide input structures that have varying\ncompositions (such as CoO2, Co2O4, Co3O6, etc.).</p>\n\n<p>Further, we split the input structures into training and test datasets. So\nthe final folder setup will look like...\ndeepmd_data\n    CoO2_train\n    CoO2_test\n    Co2O4_train\n    Co2O4_test\n    &lt;&lt; etc. &gt;&gt;</p>\n\n<p>All data required is available from an IonicStepStructure in our database, so\nthis is our current input format.</p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs.type_and_set.DeepmdDataset.__init__", "modulename": "simmate.calculators.deepmd.inputs.type_and_set", "qualname": "DeepmdDataset.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.deepmd.inputs.type_and_set.DeepmdDataset.to_file", "modulename": "simmate.calculators.deepmd.inputs.type_and_set", "qualname": "DeepmdDataset.to_file", "type": "function", "doc": "<p></p>\n", "parameters": ["ionic_step_structures", "directory", "test_size"], "funcdef": "def"}, {"fullname": "simmate.calculators.deepmd.outputs", "modulename": "simmate.calculators.deepmd.outputs", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp", "modulename": "simmate.calculators.vasp", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.configuration", "modulename": "simmate.calculators.vasp.configuration", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database", "modulename": "simmate.calculators.vasp.database", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy", "type": "class", "doc": "<p>MITStaticEnergy(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.spacegroup", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.DoesNotExist", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy", "type": "class", "doc": "<p>Quality04StaticEnergy(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.spacegroup", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.DoesNotExist", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "", "type": "module", "doc": "<p>We got rid of the boilerplate code! The create_all_subclasses() function below\nnow does all the work for us. It may be tricky to understand what's happening\nbehind the scenes, so here's an example:</p>\n\n<p>These two lines...</p>\n\n<pre><code>from simmate.database.local_calculations.relaxation.base import Relaxation\n\nExampleRelaxation, ExampleIonicStep = Relaxation.create_all_subclasses(\"Example\", module=__name__)\n</code></pre>\n\n<p>Do exactly the same thing as all of these lines...</p>\n\n<pre><code>from simmate.database.base_data_types import table_column\nfrom simmate.database.local_calculations.relaxation.base import (\n    IonicStep,\n    Relaxation,\n)\n\nclass ExampleIonicStep(IonicStep):\n    relaxation = table_column.ForeignKey(\n        \"ExampleRelaxation\",  # in quotes becuase this is defined below\n        on_delete=table_column.CASCADE,\n        related_name=\"structures\",\n    )\n\nclass ExampleRelaxation(Relaxation):\n    structure_start = table_column.OneToOneField(\n        ExampleIonicStep,\n        on_delete=table_column.CASCADE,\n        related_name=\"relaxations_as_start\",\n        blank=True,\n        null=True,\n    )\n    structure_final = table_column.OneToOneField(\n        ExampleIonicStep,\n        on_delete=table_column.CASCADE,\n        related_name=\"relaxations_as_final\",\n        blank=True,\n        null=True,\n    )\n</code></pre>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation", "type": "class", "doc": "<p>StagedRelaxation(id, directory, prefect_flow_run_id, created_at, updated_at, quality00relaxation, quality01relaxation, quality02relaxation, quality03relaxation, quality04relaxation)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.child_calculation_tables", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.child_calculation_tables", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality00relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality00relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality00relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality00relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality01relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality01relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality01relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality01relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality02relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality02relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality02relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality02relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality03relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality03relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality03relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality03relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality04relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality04relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality04relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality04relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation", "type": "class", "doc": "<p>MITRelaxation(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep", "type": "class", "doc": "<p>MITIonicStep(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, ionic_step_number, relaxation)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation", "type": "class", "doc": "<p>Quality00Relaxation(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep", "type": "class", "doc": "<p>Quality00IonicStep(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, ionic_step_number, relaxation)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation", "type": "class", "doc": "<p>Quality01Relaxation(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep", "type": "class", "doc": "<p>Quality01IonicStep(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, ionic_step_number, relaxation)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation", "type": "class", "doc": "<p>Quality02Relaxation(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep", "type": "class", "doc": "<p>Quality02IonicStep(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, ionic_step_number, relaxation)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation", "type": "class", "doc": "<p>Quality03Relaxation(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep", "type": "class", "doc": "<p>Quality03IonicStep(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, ionic_step_number, relaxation)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation", "type": "class", "doc": "<p>Quality04Relaxation(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep", "type": "class", "doc": "<p>Quality04IonicStep(id, structure_string, source, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, ionic_step_number, relaxation)</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers", "modulename": "simmate.calculators.vasp.error_handlers", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.aliasing", "modulename": "simmate.calculators.vasp.error_handlers.aliasing", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.aliasing.Aliasing", "modulename": "simmate.calculators.vasp.error_handlers.aliasing", "qualname": "Aliasing", "type": "class", "doc": "<p>Aliasing errors occur when there are issues with the NGX, NGY, and NGZ grid\nin VASP. Typically the fix is to just remove user defined settings for these\nvalues, delete the CHGCAR and WAVECAR, and then restart the calculation. In\nsome cases, VASP even provides recommended values for this grid and we just\nuse those.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.aliasing.Aliasing.__init__", "modulename": "simmate.calculators.vasp.error_handlers.aliasing", "qualname": "Aliasing.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.aliasing.Aliasing.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.aliasing", "qualname": "Aliasing.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.aliasing.Aliasing.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.aliasing", "qualname": "Aliasing.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.aliasing.Aliasing.check", "modulename": "simmate.calculators.vasp.error_handlers.aliasing", "qualname": "Aliasing.check", "type": "function", "doc": "<p>Check for errors in the specified directory. Note, we assume that we are\nchecking the vasp.out file. If that file is not present, we say that there\nis no error because another handler will address this.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.aliasing.Aliasing.correct", "modulename": "simmate.calculators.vasp.error_handlers.aliasing", "qualname": "Aliasing.correct", "type": "function", "doc": "<p>Perform corrections based on the INCAR.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.all", "modulename": "simmate.calculators.vasp.error_handlers.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions", "type": "class", "doc": "<p>This fixes an internal VASP error by increasing POTIM.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.__init__", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.correct", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.change_in_charge_density", "modulename": "simmate.calculators.vasp.error_handlers.change_in_charge_density", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.change_in_charge_density.ChangeInChargeDensity", "modulename": "simmate.calculators.vasp.error_handlers.change_in_charge_density", "qualname": "ChangeInChargeDensity", "type": "class", "doc": "<p>This handler addresses changes in charge density during a SCF loop. There are\na series of fixes that depend on the type and state of the calculation being\nran, so be sure to read the stages below.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.change_in_charge_density.ChangeInChargeDensity.__init__", "modulename": "simmate.calculators.vasp.error_handlers.change_in_charge_density", "qualname": "ChangeInChargeDensity.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.change_in_charge_density.ChangeInChargeDensity.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.change_in_charge_density", "qualname": "ChangeInChargeDensity.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.change_in_charge_density.ChangeInChargeDensity.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.change_in_charge_density", "qualname": "ChangeInChargeDensity.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.change_in_charge_density.ChangeInChargeDensity.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.change_in_charge_density", "qualname": "ChangeInChargeDensity.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.change_in_charge_density.ChangeInChargeDensity.correct", "modulename": "simmate.calculators.vasp.error_handlers.change_in_charge_density", "qualname": "ChangeInChargeDensity.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm", "type": "class", "doc": "<p>???</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.__init__", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.correct", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav", "type": "class", "doc": "<p>When the gradient is not orthogonal, we make a fix depending on what IMSEAR\nis set to.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.__init__", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.correct", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar", "type": "class", "doc": "<p>???</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.__init__", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.correct", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.FrozenErrorHandler", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "FrozenErrorHandler", "type": "class", "doc": "<p>Checks when the output file has last been editted. If the job has been sitting\nfor a long time (i.e. 1 hour), we consider it frozen and want to change the\nALGO from Normal to Fast or alternatively reduce SYMPREC.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.FrozenErrorHandler.__init__", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "FrozenErrorHandler.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "timeout_limit"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.FrozenErrorHandler.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "FrozenErrorHandler.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.FrozenErrorHandler.check", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "FrozenErrorHandler.check", "type": "function", "doc": "<p>Check for error in the specified directory. Note, we assume that we are\nchecking the vasp.out file. If that file is not present, we say that there\nis no error because another handler will address this.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.FrozenErrorHandler.correct", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "FrozenErrorHandler.correct", "type": "function", "doc": "<p>Perform corrections based on the INCAR.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift", "type": "class", "doc": "<p>This handler addresses issues in the K-point mesh that can be fixed by switching\nto a gamma-centered mesh.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.__init__", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.correct", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearingHandler", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearingHandler", "type": "class", "doc": "<p>This checks if a calculation is a metal (zero bandgap), has been run with\nISMEAR=-5, and is not a static calculation. This type of smearing is only\nappropriate for the relaxation of semiconductors and insulators -- not\nmetals. If this occurs, this handler will rerun the calculation\nusing the smearing settings appropriate for metals (ISMEAR=2, SIGMA=0.2).</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearingHandler.__init__", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearingHandler.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearingHandler.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearingHandler.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearingHandler.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearingHandler.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearingHandler.check", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearingHandler.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have .check() functions that do one\nof the following:\n    (1) returns True when the error is there and False otherwise\n    (2) the ErrorHandler includes variations of a particular error, where\n        it returns a label such as \"Scenario 2\" that .correct() can use.\n        And in cases where there's no error, either False or None is returned.</p>\n\n<p>This method can be overwritten, but we have a \"default\" function below that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearingHandler.correct", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearingHandler.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands", "type": "class", "doc": "<p>If the calculation has too few bands, we increase the number of bands by\n10% and try again.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.__init__", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.correct", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "error", "dir"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigmaErrorHandler", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigmaErrorHandler", "type": "class", "doc": "<p>When ISMEAR &gt; 0 (Gaussian or Methfessel-Paxton), we need to monitor the\nmagnitude of the entropy term T*S. If the entropy term is larger than\n1 meV/atom, then we reduce value of SIGMA. See VASP documentation for ISMEAR.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigmaErrorHandler.__init__", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigmaErrorHandler.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "entropy_per_atom_threshold"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigmaErrorHandler.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigmaErrorHandler.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigmaErrorHandler.check", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigmaErrorHandler.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have .check() functions that do one\nof the following:\n    (1) returns True when the error is there and False otherwise\n    (2) the ErrorHandler includes variations of a particular error, where\n        it returns a label such as \"Scenario 2\" that .correct() can use.\n        And in cases where there's no error, either False or None is returned.</p>\n\n<p>This method can be overwritten, but we have a \"default\" function below that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigmaErrorHandler.correct", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigmaErrorHandler.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector", "type": "class", "doc": "<p>This a simple error handler that is active when VASP finds an issue with the\nrotation matrix.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.__init__", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.correct", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.main_errors", "modulename": "simmate.calculators.vasp.error_handlers.main_errors", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.main_errors.MainVaspErrors", "modulename": "simmate.calculators.vasp.error_handlers.main_errors", "qualname": "MainVaspErrors", "type": "class", "doc": "<p>A centralized class that handles a number of common errors that occur\nduring VASP runs.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.main_errors.MainVaspErrors.__init__", "modulename": "simmate.calculators.vasp.error_handlers.main_errors", "qualname": "MainVaspErrors.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "natoms_large_cell", "errors_to_catch", "errors_to_ignore"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.main_errors.MainVaspErrors.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.main_errors", "qualname": "MainVaspErrors.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.main_errors.MainVaspErrors.all_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.main_errors", "qualname": "MainVaspErrors.all_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.main_errors.MainVaspErrors.check", "modulename": "simmate.calculators.vasp.error_handlers.main_errors", "qualname": "MainVaspErrors.check", "type": "function", "doc": "<p>Check for errors in the specified directory. Note, we assume that we are\nchecking the vasp.out file. If that file is not present, we say that there\nis no error because another handler will address this.</p>\n", "parameters": ["self", "dir"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.main_errors.MainVaspErrors.correct", "modulename": "simmate.calculators.vasp.error_handlers.main_errors", "qualname": "MainVaspErrors.correct", "type": "function", "doc": "<p>Perform corrections based on the INCAR and the list of errors returned by\nthe check() method.</p>\n\n<p>Some errors have a series of fixes, where we want to keep a tally of\nhow many times we tried fixing it. To keep track of these, a file named\nsimmate_error_counts.json is written and updated.</p>\n", "parameters": ["self", "error", "dir"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetryErrorHandler", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetryErrorHandler", "type": "class", "doc": "<p>Corrects the mesh symmetry error in VASP. This error is sometimes\nnon-fatal and the job can complete successfully. So this error handler\nonly checks at the end of the run, and if the run has converged, no error\nis recorded. We can also ignore this error if symmetry is turned off or if\nautomatic k-mesh has been used.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetryErrorHandler.__init__", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetryErrorHandler.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetryErrorHandler.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetryErrorHandler.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetryErrorHandler.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetryErrorHandler.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetryErrorHandler.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetryErrorHandler.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetryErrorHandler.check", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetryErrorHandler.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have .check() functions that do one\nof the following:\n    (1) returns True when the error is there and False otherwise\n    (2) the ErrorHandler includes variations of a particular error, where\n        it returns a label such as \"Scenario 2\" that .correct() can use.\n        And in cases where there's no error, either False or None is returned.</p>\n\n<p>This method can be overwritten, but we have a \"default\" function below that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetryErrorHandler.correct", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetryErrorHandler.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConvergingErrorHandler", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConvergingErrorHandler", "type": "class", "doc": "<p>If a run is hitting the maximum number of electronic steps for a significant\nnumber of ionic steps (i.e. 10), then we consider the job to be nonconverging\nand in error. To try fixing this, we switch the ALGO to Normal.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConvergingErrorHandler.__init__", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConvergingErrorHandler.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "min_ionic_steps"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConvergingErrorHandler.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConvergingErrorHandler.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConvergingErrorHandler.check", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConvergingErrorHandler.check", "type": "function", "doc": "<p>Check for error in the specified directory. Note, we assume that we are\nchecking the OSZICAR file. If that file is not present, we say that there\nis no error because another handler will address this.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConvergingErrorHandler.correct", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConvergingErrorHandler.correct", "type": "function", "doc": "<p>Perform corrections based on the INCAR.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup", "type": "class", "doc": "<p>???</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.__init__", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.correct", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergyErrorHandler", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergyErrorHandler", "type": "class", "doc": "<p>Check if a run has positive absolute energy.\nIf so, we trying changeing ALGO to Normal or alternatively halve the POTIM.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergyErrorHandler.__init__", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergyErrorHandler.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergyErrorHandler.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergyErrorHandler.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergyErrorHandler.check", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergyErrorHandler.check", "type": "function", "doc": "<p>Check for error in the specified directory. Note, we assume that we are\nchecking the OSZICAR file. If that file is not present, we say that there\nis no error because another handler will address this.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergyErrorHandler.correct", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergyErrorHandler.correct", "type": "function", "doc": "<p>Perform corrections based on the INCAR.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap", "type": "class", "doc": "<p>???</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.__init__", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.correct", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.PotimErrorHandler", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "PotimErrorHandler", "type": "class", "doc": "<p>This hanlder checks if a run has excessively large positive energy changes,\nwhere it's typically caused by too large of a POTIM. Runs will end up crashing\nwith some other error (e.g. BRMIX) as the geometry gets progressively worse.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.PotimErrorHandler.__init__", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "PotimErrorHandler.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "dE_per_atom_threshold"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.PotimErrorHandler.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "PotimErrorHandler.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.PotimErrorHandler.check", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "PotimErrorHandler.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have .check() functions that do one\nof the following:\n    (1) returns True when the error is there and False otherwise\n    (2) the ErrorHandler includes variations of a particular error, where\n        it returns a label such as \"Scenario 2\" that .correct() can use.\n        And in cases where there's no error, either False or None is returned.</p>\n\n<p>This method can be overwritten, but we have a \"default\" function below that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.PotimErrorHandler.correct", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "PotimErrorHandler.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel", "type": "class", "doc": "<p>This fixes an internal VASP error by turning off symmetry.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.__init__", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.correct", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx", "type": "class", "doc": "<p>This fixes subspace rotation error by switching ALGO to Normal</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.__init__", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.correct", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay", "type": "class", "doc": "<p>This handler addresses a series of warning messages that each have the same\nattempted fixes. Note that this affect how we handle correcting the error!</p>\n\n<p>NOTE: I call this RealOptlay but don't have a good understanding of what\nthe error exactly is. This is simply a conversion from Custodian of the\nfollowing errors: [\"rspher\", \"real_optlay\", \"nicht_konv\"]</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.__init__", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.natoms_large_cell", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.natoms_large_cell", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.correct", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg", "type": "class", "doc": "<p>???</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.__init__", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.correct", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix", "type": "class", "doc": "<p>This a simple error handler that is active when VASP struggles to find the\nrotation matrix. VASP gives us the suggested fix directly, which is to\nsimply increase the symmetry precision.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.__init__", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.correct", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationMatrix", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationMatrix", "type": "class", "doc": "<p>This a simple error handler that is active when VASP finds an issue with the\nrotation matrix.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationMatrix.__init__", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationMatrix.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationMatrix.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationMatrix.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationMatrix.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationMatrix.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationMatrix.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationMatrix.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationMatrix.correct", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationMatrix.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix", "type": "class", "doc": "<p>This handler fixes when the sub-space-matrix is not hermitian. On the first\nattempt, we switch evaluation of projection operators to reciprocal space.\nIf that doesn't work, the calculation precision is switched to \"Accurate\".</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.__init__", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.correct", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise", "type": "class", "doc": "<p>???</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.__init__", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.correct", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh", "type": "class", "doc": "<p>This handler addresses a series of error messages that are all caused by\nhaving incompatible tetrahedral mesh. In some cases, increasing the k-point\nmesh will fix the issue, and in other cases, we'll simply turn off the\ntetrahedron method.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.__init__", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.correct", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct", "type": "class", "doc": "<p>This error handler swaps the b and c lattice vectors when VASP fails to handle\nits basis vectors properly.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.__init__", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.correct", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.UnconvergedErrorHandler", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "UnconvergedErrorHandler", "type": "class", "doc": "<p>Check if a calculation converged successfully. If not, the fix depends on\nwhether its the ionic steps or electronic steps are struggling to converge.</p>\n\n<p>NOTE: This can be confusing when used along with the UnconvergedErrorHandler\nbecause both attempt to fix failures in electronic convergence. These handlers\nare converted directly from Custodian, so it's not clear to me why they\nseparated them. In the future, I need to clean this up.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.UnconvergedErrorHandler.__init__", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "UnconvergedErrorHandler.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.UnconvergedErrorHandler.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "UnconvergedErrorHandler.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.UnconvergedErrorHandler.check", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "UnconvergedErrorHandler.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have .check() functions that do one\nof the following:\n    (1) returns True when the error is there and False otherwise\n    (2) the ErrorHandler includes variations of a particular error, where\n        it returns a label such as \"Scenario 2\" that .correct() can use.\n        And in cases where there's no error, either False or None is returned.</p>\n\n<p>This method can be overwritten, but we have a \"default\" function below that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.UnconvergedErrorHandler.correct", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "UnconvergedErrorHandler.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent", "type": "class", "doc": "<p>Calculation is simply restarted using the most recent structure (CONTCAR)</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.__init__", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.correct", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev", "type": "class", "doc": "<p>???</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.__init__", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.correct", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf", "type": "class", "doc": "<p>This handler attempts to fix a routine failure associated with LAPACK. The\nfix depends on the state of the calculation, so we check the OSZICAR to\ndecide what to do.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.__init__", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.correct", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs", "modulename": "simmate.calculators.vasp.inputs", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.all", "modulename": "simmate.calculators.vasp.inputs.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.incar", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar", "type": "class", "doc": "<p>INCAR object for reading and writing INCAR files. This behaves exactly like\na python dictionary, but has a few extra checks and methods attached to it.\nYou can pass it a dictionary or initialize it just like you would dict(kwargs).\nYou can consider the dict(kwargs) as equivalent to Incar(parameters).</p>\n\n<p>If you want a given setting to be dependent on the structure or dynamically\ndetermined, then we implement these modifiers. This would enable us to\ndo things like ENCUT__per_atom or NGZF__density. We can even have more complex\nmodifiers like multiple_keywords__smart_ldau which signals that our\n\"smart_ldau\" modifier introduces more than one new setting to the INCAR, such\nas LDAUJ, LDAUU, LDAUL, LDAUTYPE, and LDAUPRINT.</p>\n\n<p>TODO: In the future, I want to allow modifiers like __relative_to_previous\nand __use_previous to string settings accross tasks.</p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.__init__", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.to_evaluated_str", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.to_evaluated_str", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.to_file", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.to_file", "type": "function", "doc": "<p>Write Incar to a file.\nArgs:\n    filename (str): filename to write to.</p>\n", "parameters": ["self", "filename", "structure"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.from_file", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.from_file", "type": "function", "doc": "<p>Reads an Incar object from a file.\nArgs:\n    filename (str): Filename for file\nReturns:\n    Incar object</p>\n", "parameters": ["filename"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.compare_incars", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.compare_incars", "type": "function", "doc": "<p>Compares two Incars and indicates which parameters are the same and\nwhich are not. Useful for checking whether two runs were done using\nthe same parameters.\nArgs:\n    other (Incar): The other Incar object to compare to.\nReturns:\n    Dict of the following format:\n    {\"Same\" : parameters_that_are_the_same,\n    \"Different\": parameters_that_are_different}\n    The value of the other_incar is returned for the paramters that\n    are different are returned as {Parameter: (incar_value, other_incar_value)}\n    where None is used as a placeholder. For the same parameters, the\n    dictionary is returned as {Parameter: shared_value}</p>\n", "parameters": ["self", "other_incar"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_density", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_density", "type": "function", "doc": "<p>The __density modifier means the user wants a specific density. They\nprovide this density in per-angstrom^3 units and we return the\nstructure-specific count that gives this density.\nFor example, density=10 and a structure lattice that volume of 5,\nthen this returns value=10*5=50.</p>\n", "parameters": ["structure", "density"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_density_a", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_density_a", "type": "function", "doc": "<p>The __density_a modifier means the user wants a specific density along\nthe A lattice vector. They provide this density in per-angstrom units\nand we return the structure-specific count that gives this density.\nFor example, density=10 and a structure lattice that A vector of 5,\nthen this returns value=10*5=50.</p>\n", "parameters": ["structure", "density"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_density_b", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_density_b", "type": "function", "doc": "<p></p>\n", "parameters": ["structure", "density"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_density_c", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_density_c", "type": "function", "doc": "<p></p>\n", "parameters": ["structure", "density"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_per_atom", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_per_atom", "type": "function", "doc": "<p>The __density modifier means the user wants a specific density. They\nprovide this density in per-angstrom^3 units and we return the\nstructure-specific count that gives this density.\nFor example, density=10 and a structure lattice that volume of 5,\nthen this returns value=10*5=50.</p>\n", "parameters": ["structure", "per_atom_value"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_smart_magmom", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_smart_magmom", "type": "function", "doc": "<p>The __smart_magmom modifier goes through a series of checks to decide\nwhat to set the MAGMOM as for VASP. In order of priority they are...\n    (1) the magmom property attached to each site in the structure object\n    (2) the spin property attached to the site's specie\n    (3) a value provided explicitly (e.g. {\"Co\": 0.5})\n    (4) a value of 0.6</p>\n", "parameters": ["structure", "override_values"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_smart_ldau", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_smart_ldau", "type": "function", "doc": "<p>This modifier handles a series of keyword arguments that are associated\nwith LDAU, including LDAUJ, LDAUL, LDAUTYPE, LDAUU, LDAUPRINT, and LMAXMIX.\nTherefore, a complex dictionary is passed to this. The format looks like this...\n    LDAU__multiple_keywords__smart_ldau = dict(\n        LDAU__auto=True,\n        LDAUTYPE=2,\n        LDAUPRINT=1,\n        LDAUJ={...},\n        LDAUL={...},\n        LDAUU={...},\n        LMAXMIX__auto=True,\n        )\nThe LDAUJ, LDAUL, and LDAUU values can be a dictionary of elements to\nvalue, or (most commonly) a nested dictionary. For example...\n    LDAUJ = {\"F\":{\"Co\":0}}\nThis would mean if the structure is a fluoride, set the LDAUJ for Co to 0.\nIf there are multiple options here (e.g. for fluorides and oxides), then\npriority is placed on the most electronegative element. This would mean\nsome thing like yttrium oxide fluoride would be treated as a fluoride over\nan oxide.</p>\n", "parameters": ["structure", "ldau_config"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_smart_ismear", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_smart_ismear", "type": "function", "doc": "<p>The smearing value used here depends on if we have a semiconductor,\ninsulator, or metal. This modifier makes a \"best-guess\" on what the\nmaterial is and uses the proper smearing type. Note that if this\nguess is wrong, it is useful to have the IncorrectSmearing error\nhandler to fix this as VASP runs.</p>\n\n<p>Read more about the VASP recommended ISMEAR settings here:\n    https://www.vasp.at/wiki/index.php/ISMEAR</p>\n", "parameters": ["structure", "ismear_config"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.kpoints", "modulename": "simmate.calculators.vasp.inputs.kpoints", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.kpoints.Kpoints", "modulename": "simmate.calculators.vasp.inputs.kpoints", "qualname": "Kpoints", "type": "class", "doc": "<p>This class takes a structure along with a KptGrid or KptPath object and\nthen generates a VASP formatted KPOINTS file for you. Alternatively,\nyou can provide a structre and a KPOINTS file to get back a KptGrid or\nKptPath object. This behaves as a converter class, just like the POSCAR class.</p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.kpoints.Kpoints.__init__", "modulename": "simmate.calculators.vasp.inputs.kpoints", "qualname": "Kpoints.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.kpoints.Kpoints.write_file", "modulename": "simmate.calculators.vasp.inputs.kpoints", "qualname": "Kpoints.write_file", "type": "function", "doc": "<p></p>\n", "parameters": ["structure", "kpoint_method", "filename", "comment"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.poscar", "modulename": "simmate.calculators.vasp.inputs.poscar", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.poscar.Poscar", "modulename": "simmate.calculators.vasp.inputs.poscar", "qualname": "Poscar", "type": "class", "doc": "<p>This is format converter class for loading and writing POSCAR or CONTCAR\nfiles, which are VASP's version of structure files (as oppossed to a cif\nfile for example). When you initialize this class, you're only setting generic\nsettings. You will either load a POSCAR file by doing...\n    my_structure = Poscar.from_file(my_poscar_filename)\nOr you will write a POSCAR file using your Simmate Structure by doing...\n    Poscar.write_file(my_structure, my_poscar_filename)\nIf you have a ton of files to write, you can do use this method in parallel too...\n    Poscar.write_many_files([struct1, struct2, ...], [filename1, filename2, ...])</p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.poscar.Poscar.__init__", "modulename": "simmate.calculators.vasp.inputs.poscar", "qualname": "Poscar.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.poscar.Poscar.from_file", "modulename": "simmate.calculators.vasp.inputs.poscar", "qualname": "Poscar.from_file", "type": "function", "doc": "<p>Reads a Poscar from a file.\nThe code will attempt to determine the elements in the POSCAR\nin the following order of priority:\n    1. If element symbols are at the end of each coordinate, then this\n    is the prefferred method and the most explicit in VASP.\n    2. Look for element symbols on the 6th line and match them with the\n    nsites on the 7th line. This is 2nd in priority because we do not\n    enforce that the structure's sites are sorted in the poscar.\nArgs:\n    filename (str): File name containing Poscar data.\n    read_velocities (bool): Whether to read or not velocities if they\n        are present in the POSCAR. Default is True.\nReturns:\n    Structure object.</p>\n", "parameters": ["filename", "read_velocities"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.poscar.Poscar.to_file", "modulename": "simmate.calculators.vasp.inputs.poscar", "qualname": "Poscar.to_file", "type": "function", "doc": "<p>Returns a string to be written as a POSCAR file. By default, site\nsymbols are written, which means compatibility is for vasp &gt;= 5.\nArgs:\n    direct (bool): Whether coordinates are output in direct or\n        cartesian. Defaults to True.\n    vasp4_compatible (bool): Set to True to omit site symbols on 6th\n        line to maintain backward vasp 4.x compatibility. Defaults\n        to False.\n    significant_figures (int): No. of significant figures to\n        output all quantities. Defaults to 6. Note that positions are\n        output in fixed point, while velocities are output in\n        scientific format.\nReturns:\n    String representation of POSCAR.</p>\n", "parameters": ["structure", "filename", "comment", "add_selective_dynamics", "add_velocities", "significant_figures"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.potcar", "modulename": "simmate.calculators.vasp.inputs.potcar", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.potcar.Potcar", "modulename": "simmate.calculators.vasp.inputs.potcar", "qualname": "Potcar", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.potcar.Potcar.__init__", "modulename": "simmate.calculators.vasp.inputs.potcar", "qualname": "Potcar.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.potcar.Potcar.to_file_from_type", "modulename": "simmate.calculators.vasp.inputs.potcar", "qualname": "Potcar.to_file_from_type", "type": "function", "doc": "<p></p>\n", "parameters": ["elements", "functional", "filename", "element_mappings"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.potcar_mappings", "modulename": "simmate.calculators.vasp.inputs.potcar_mappings", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.outputs", "modulename": "simmate.calculators.vasp.outputs", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar", "type": "class", "doc": "<p>Reads all data from an OSZICAR file. This includes data on each electronic\nand ionic step of the calculation.</p>\n\n<p>Note that this class is only used when the speed of file-reading is important.\nIf you are trying to analyze your VASP run, you should instead use the VaspXML\noutput, which gives all of the information already in the OSZICAR and more!</p>\n\n<p>To help with understanding the OSZICAR file, you can also look here:\n    https://www.vasp.at/wiki/index.php/OSZICAR</p>\n"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar.__init__", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "filename"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar.all_electronic_step_energies", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar.all_electronic_step_energies", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "ionic_step_number"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar.all_ionic_step_energies", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar.all_ionic_step_energies", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar.energy_final", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar.energy_final", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks", "modulename": "simmate.calculators.vasp.tasks", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.get_default_parallel_settings", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "get_default_parallel_settings", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.__init__", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.__init__", "type": "function", "doc": "<p>Creates a task instance of this class. The parameters passed will be the\nsame every time you call the task.run() method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>structure : pymatgen.core.structure.Structure (optional)\n    The structure to use for the task, if one is required. Typically, this\n    class is ran for multiple structures, where you can pass this\n    option to the task.run() method instead.\ncommand : str (optional)\n    The command that will be called during execution.\ndirectory : str (optional)\n    The directory to run everything in. This is passed to the ulitities\n    function simmate.ulitities.get_directory\nerror_handlers : List[ErrorHandler] (optional)\n    The list of error handler objects to use. These should be listing in\n    order of priority, where to highest priority is first. If one handler\n    is triggered, the correction will be applied and none of the\n    following handlers will be checked.\nmax_corrections : int (optional)\n    The maximum number of times that corrections will be made before\n    giving up on the calculation. Note, once this limit is exceeded, the\n    error is stored without correcting or restarting the run.\nmonitor : bool (optional)\n    Whether to run monitor handlers while the command runs. False means\n    wait until the job has completed.\npolling_timestep : float (optional)\n    If we are monitoring the job for errors while it runs, this is how often\n    (in seconds) we should check the status of our job. Note this check is\n    just whether the job is done or not. This is NOT how often we check for\n    errors. See monitor_freq for that.\nmonitor_freq : int (optional)\n    The frequency we should run check for errors with our monitors. This is\n    based on the polling_timestep loops. For example, if we have a\n    polling_timestep of 10 seconds and a monitor_freq of 2, then we would run\n    the monitor checks every other loop -- or every 2<em>10 = 20 seconds. The\n    default values of polling_timestep=10 and monitor_freq=30 indicate that\n    we run monitoring functions every 5 minutes (10</em>30=300s=5min).\nsave_corrections_to_file : bool (optional)\n    Whether to write a log file of the corrections made. The default is True.\ncorrections_filename : str (optional)\n    If save_corrections_to_file is True, this is the filename of where\n    to write the corrections. The default is \"simmate_corrections.csv\".\ncompress_output : bool (optional)\n    Whether to compress the directory to a zip file at the end of the\n    task run. After compression, it will also delete the directory.\n    The default is False.\n**kwargs : Any\n    All extra arguments supported by prefect.core.task.Task. To see all\n    the options, visit https://docs.prefect.io/api/latest/core/task.html</p>\n", "parameters": ["self", "incar", "kpoints", "functional", "potcar_mappings", "confirm_convergence", "pre_sanitize_structure", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.requires_structure", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.requires_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.return_final_structure", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.return_final_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.command", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.command", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.incar", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.incar", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.incar_parallel_settings", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.incar_parallel_settings", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.kpoints", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.kpoints", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.functional", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.functional", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.potcar_mappings", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.confirm_convergence", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.pre_sanitize_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.setup", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.setup", "type": "function", "doc": "<p>This abstract method is ran before the command is actually executed. This\nallows for some pre-processing, such as writing input files or any other\nanalysis.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase setup() is normally called within the run() method.</p>\n\n<p>Some tasks don't require a setup() method, so by default, this method\ndoesn't nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>structure : pymatgen.core.structure.Structure\n    The structure to use for the task, if one is required.\ndirectory : str\n    The directory to run everything in.</p>\n", "parameters": ["self", "structure", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.workup", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.workup", "type": "function", "doc": "<p>This is the most basic VASP workup where I simply load the final structure,\nfinal energy, and (if requested) confirm convergence. I will likely make\nthis a common function for this vasp module down the road.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.get_config", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.get_config", "type": "function", "doc": "<p>Grabs the overall settings from the class. This is useful for printing out\nsettings for users to inspect.</p>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.energy", "modulename": "simmate.calculators.vasp.tasks.energy", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.mit", "modulename": "simmate.calculators.vasp.tasks.energy.mit", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.mit.MITStaticEnergy", "modulename": "simmate.calculators.vasp.tasks.energy.mit", "qualname": "MITStaticEnergy", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.mit.MITStaticEnergy.incar", "modulename": "simmate.calculators.vasp.tasks.energy.mit", "qualname": "MITStaticEnergy.incar", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.mit.MITStaticEnergy.error_handlers", "modulename": "simmate.calculators.vasp.tasks.energy.mit", "qualname": "MITStaticEnergy.error_handlers", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.quality_04", "modulename": "simmate.calculators.vasp.tasks.energy.quality_04", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.quality_04.Quality04Energy", "modulename": "simmate.calculators.vasp.tasks.energy.quality_04", "qualname": "Quality04Energy", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.quality_04.Quality04Energy.incar", "modulename": "simmate.calculators.vasp.tasks.energy.quality_04", "qualname": "Quality04Energy.incar", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.all", "modulename": "simmate.calculators.vasp.tasks.relaxation.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation.return_final_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation.return_final_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation.functional", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation.potcar_mappings", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation.incar", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation.error_handlers", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation.error_handlers", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.return_final_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.return_final_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.functional", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.potcar_mappings", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.confirm_convergence", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.incar", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.return_final_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.return_final_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.functional", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.potcar_mappings", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.confirm_convergence", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.incar", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.return_final_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.return_final_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.functional", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.potcar_mappings", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.confirm_convergence", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.incar", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.return_final_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.return_final_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.functional", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.potcar_mappings", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.confirm_convergence", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.incar", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.return_final_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.return_final_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.functional", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.potcar_mappings", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.confirm_convergence", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.incar", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.website", "modulename": "simmate.calculators.vasp.website", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows", "modulename": "simmate.calculators.vasp.workflows", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.energy", "modulename": "simmate.calculators.vasp.workflows.energy", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.energy.all", "modulename": "simmate.calculators.vasp.workflows.energy.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.energy.mit", "modulename": "simmate.calculators.vasp.workflows.energy.mit", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.energy.quality_04", "modulename": "simmate.calculators.vasp.workflows.energy.quality_04", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation", "modulename": "simmate.calculators.vasp.workflows.relaxation", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.all", "modulename": "simmate.calculators.vasp.workflows.relaxation.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.mit", "modulename": "simmate.calculators.vasp.workflows.relaxation.mit", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_00", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_00", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_01", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_01", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_02", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_02", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_03", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_03", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_04", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_04", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.staged", "modulename": "simmate.calculators.vasp.workflows.relaxation.staged", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.staged_use_same_dir", "modulename": "simmate.calculators.vasp.workflows.relaxation.staged_use_same_dir", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line", "modulename": "simmate.command_line", "qualname": "", "type": "module", "doc": "<h2 id=\"the-simmate-command-line-interface\">The Simmate Command-line Interface</h2>\n\n<p>This module defines the <code>simmate</code> command and all of it's sub-commands. </p>\n\n<p>Note, nearly all of the commands in this module wrap a lower-level function, so little code is located here. For example, the <code>simmate database reset</code> command is just a wrapper for the following python code:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.configuration.django.database import reset_database\n\nreset_database()\n</code></pre>\n\n<p>Our command-line is build using <a href=\"https://click.palletsprojects.com/en/8.0.x/\">Click</a> instead of Argparse. Be sure to read their documentation before contributing to this module.</p>\n"}, {"fullname": "simmate.command_line.base_command", "modulename": "simmate.command_line.base_command", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.database", "modulename": "simmate.command_line.database", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.run_server", "modulename": "simmate.command_line.run_server", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.start_project", "modulename": "simmate.command_line.start_project", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.workflow_engine", "modulename": "simmate.command_line.workflow_engine", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.workflows", "modulename": "simmate.command_line.workflows", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.workflows.get_workflow", "modulename": "simmate.command_line.workflows", "qualname": "get_workflow", "type": "function", "doc": "<p>This is a utility for click (cli) that grabs a workflow from the simmate\nworkflows. If the workflow can't be found, it raises a ClickException.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>workflow_name : str\n    Name of the workflow to grab</p>\n", "parameters": ["workflow_name"], "funcdef": "def"}, {"fullname": "simmate.configuration", "modulename": "simmate.configuration", "qualname": "", "type": "module", "doc": "<h2 id=\"simmate-configuration\">Simmate Configuration</h2>\n\n<p>This module sets up Simmate and other programs it depends on. It also includes an example config directory and example custom project.</p>\n"}, {"fullname": "simmate.configuration.blender", "modulename": "simmate.configuration.blender", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.blender.setup", "modulename": "simmate.configuration.blender.setup", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.blender.setup.get_blender_command", "modulename": "simmate.configuration.blender.setup", "qualname": "get_blender_command", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.configuration.blender.setup.find_blender_installation", "modulename": "simmate.configuration.blender.setup", "qualname": "find_blender_installation", "type": "function", "doc": "<p>Finds the full path to the Blender installation so that we can call blender\nfrom the command-line. This also adds it's location to the simmate\nconfiguration folder so that we don't need to search for it every time.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.configuration.blender.setup.test_blender_command", "modulename": "simmate.configuration.blender.setup", "qualname": "test_blender_command", "type": "function", "doc": "<p></p>\n", "parameters": ["blender_command"], "funcdef": "def"}, {"fullname": "simmate.configuration.dask", "modulename": "simmate.configuration.dask", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.dask.connect_to_database", "modulename": "simmate.configuration.dask.connect_to_database", "qualname": "", "type": "module", "doc": "<p>To prevent database-connection leaks, we want to setup django upfront when\na worker is started -- rather than have each task connect separately.</p>\n\n<p>You can use this script like so...\n    from dask.distributed import Client\n    client = Client(preload=\"simmate.configuration.dask.connect_to_database\")</p>\n"}, {"fullname": "simmate.configuration.django", "modulename": "simmate.configuration.django", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.django.database", "modulename": "simmate.configuration.django.database", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.django.database.update_database", "modulename": "simmate.configuration.django.database", "qualname": "update_database", "type": "function", "doc": "<p></p>\n", "parameters": ["apps_to_migrate"], "funcdef": "def"}, {"fullname": "simmate.configuration.django.database.reset_database", "modulename": "simmate.configuration.django.database", "qualname": "reset_database", "type": "function", "doc": "<p></p>\n", "parameters": ["apps_to_migrate"], "funcdef": "def"}, {"fullname": "simmate.configuration.django.database.dump_database_to_json", "modulename": "simmate.configuration.django.database", "qualname": "dump_database_to_json", "type": "function", "doc": "<p></p>\n", "parameters": ["filename", "exclude"], "funcdef": "def"}, {"fullname": "simmate.configuration.django.database.load_database_from_json", "modulename": "simmate.configuration.django.database", "qualname": "load_database_from_json", "type": "function", "doc": "<p></p>\n", "parameters": ["filename"], "funcdef": "def"}, {"fullname": "simmate.configuration.django.settings", "modulename": "simmate.configuration.django.settings", "qualname": "", "type": "module", "doc": "<p>Django settings for project.</p>\n\n<p>Generated by 'django-admin startproject' using Django 3.0.5.</p>\n\n<p>For more information on this file, see\nhttps://docs.djangoproject.com/en/3.0/topics/settings/</p>\n\n<p>For the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/3.0/ref/settings/</p>\n"}, {"fullname": "simmate.configuration.django.setup_full", "modulename": "simmate.configuration.django.setup_full", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.django.setup_full.setup_full", "modulename": "simmate.configuration.django.setup_full", "qualname": "setup_full", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.configuration.django.setup_mini", "modulename": "simmate.configuration.django.setup_mini", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.django.setup_mini.connect_database_only", "modulename": "simmate.configuration.django.setup_mini", "qualname": "connect_database_only", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.configuration.prefect", "modulename": "simmate.configuration.prefect", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.prefect.connect_to_dask", "modulename": "simmate.configuration.prefect.connect_to_dask", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.prefect.connect_to_dask.set_default_executor", "modulename": "simmate.configuration.prefect.connect_to_dask", "qualname": "set_default_executor", "type": "function", "doc": "<p>If you want to start a Prefect Agent that uses a specific Dask Cluster for\nall workflow runs, you can run this function before starting your Prefect\nAgent.</p>\n\n<p>What it does is set two enviornment variables that tell Prefect to default\nall workflows to using a default executor. So this saves us from having to\nrepeatedly use this line below when setting ups workflows...\n    from prefect.executors import DaskExecutor\n    workflow.executor = DaskExecutor(address=\"tcp://152.2.172.72:8786\")</p>\n\n<p>After you run this command, you can start your Prefect Agent as usual...\n    from prefect.agent.local import LocalAgent\n    agent = LocalAgent(name=\"ExampleAgent\")\n    agent.start()</p>\n", "parameters": ["dask_scheduler_address"], "funcdef": "def"}, {"fullname": "simmate.configuration.prefect.projects", "modulename": "simmate.configuration.prefect.projects", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.prefect.projects.build", "modulename": "simmate.configuration.prefect.projects", "qualname": "build", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.configuration.prefect.projects.delete", "modulename": "simmate.configuration.prefect.projects", "qualname": "delete", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.configuration.prefect.setup_resources", "modulename": "simmate.configuration.prefect.setup_resources", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.prefect.setup_resources.load_agent_settings", "modulename": "simmate.configuration.prefect.setup_resources", "qualname": "load_agent_settings", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.configuration.prefect.setup_resources.run_cluster_and_agent", "modulename": "simmate.configuration.prefect.setup_resources", "qualname": "run_cluster_and_agent", "type": "function", "doc": "<p></p>\n", "parameters": ["cluster_type", "agent_name", "agent_labels", "njobs", "job_cpu", "job_mem", "walltime"], "funcdef": "def"}, {"fullname": "simmate.configuration.ssh", "modulename": "simmate.configuration.ssh", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.ssh.SSHConnection", "modulename": "simmate.configuration.ssh", "qualname": "SSHConnection", "type": "class", "doc": "<p>This is a utility for running python code through a remote ssh terminal and\na PBS/SLURM job queue. It was designed specifically to make Spyder's remote\nkernal connection easier for beginners.</p>\n\n<p>Read more here:\n    http://docs.spyder-ide.org/current/panes/ipythonconsole.html?highlight=ssh#connect-to-a-remote-kernel</p>\n\n<h2 id=\"usage-guide\">Usage Guide</h2>\n\n<p>This class's use is comprised of the following steps:</p>\n\n<pre><code>1. set up your ssh host, username, and password settings\n2. call setup_remote_kernal and wait for resources to be granted\n3. start a new terminal in Spyder with the connection json file supplied\n</code></pre>\n\n<p>Steps 1-2 are completed with the following code, which includes example\nSSH connection settings and SLURM submission command (so be sure to update these):</p>\n\n<p>.. code-block:: python\n    from simmate.configuration.ssh import SSHConnection</p>\n\n<pre><code># Example here uses SLURM (sbatch) to submit a job limted to 1 hour.\n# We HIGHLY recommend setting a time limit below 3 hrs to avoid hogging\n# resources outside of your interactive session.\n# This command below is the same as submitting a script with...\n#\n# #SBATCH --nodes=1\n# #SBATCH --ntasks=2\n# #SBATCH --cpus-per-task 1\n# #SBATCH --mem=4GB\n# #SBATCH --partition=p1\n# #SBATCH --time=03:00:00\n#\n\n# set up the connection\nconnection = SSHConnection(\n    host=\"warwulf.net\",\n    user=\"WarrenLab\",\n    connect_kwargs={\"password\": \"xxxxxx\"},\n    conda_env=\"test\",\n    working_directory=\"/media/synology/user/jack/debug\",  # no ending slash!\n    submit_command=\"sbatch -N 1 -n 2 -c 1 --mem=4GB -p p1 -t 03:00:00\",\n)\n\n# Submit your SLURM job, which creates the remote python kernal for you.\n# It will also wait for the job to start, and copy the connection file\n# over to your computer\nconnection.setup_remote_kernel()\n</code></pre>\n\n<p>Make note of the connection file that is printed out. Once you have this,\nyou're all done with this terminal and can close it!</p>\n\n<p>You can then start a new terminal by selecting \"Connect to an existing kernal\"\nin Spyder and use the file that is printed out above. This will connect to the\nremote process that you started. To confirm everything is set up and working,\nrun the following in your new terminal:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code># makes sure you're running code remotely. The output should be the\n# working directory of your remote computer\nimport os\nos.getcwd()\n\n# makes sure you have simmate installed on your remote computer\n# if this fails, you need to make sure an environment with Simmate install\n# on your remote computer in addition to your local computer.\nimport simmate\n</code></pre>\n\n<p>One important thing to remember is that your submitted job will NOT be\ncanceled automatically when you close Spyder or your python terminal. Be\nsure to cancel the job when you're done. This is done by typing \"exit\" in\nyour new python terminal.</p>\n"}, {"fullname": "simmate.configuration.ssh.SSHConnection.__init__", "modulename": "simmate.configuration.ssh", "qualname": "SSHConnection.__init__", "type": "function", "doc": "<p>Creates a fabric.Connection where a remote python kernal can be easily\nset up and connected to through SLURM.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>conda_env : str\n    The conda environment to start with python kernal with. Note, this\n    environment is only used within start_remote_kernel() and will not\n    be used by the run() method.\nsubmit_command : str\n    The command used to submit to a SLURM or PBS queue system. This should\n    be something like \"sbatch -N 1 -n 2 -c 2 -p p1 -t 03:00:00\" for SLURM.\n    PBS is also supported (although not tested in production).\nworking_directory : str, optional\n    The directory to start the python kernal in. Note, this\n    directory is only used within start_remote_kernel() and will not\n    be used by the run() method. The default is \".\" which is the home\n    directory.\nport: int\n    the remote port. Defaults to 22, which is an SSH connection.\n**kwargs :\n    Any arguments passed to fabric.Connection.</p>\n", "parameters": ["self", "conda_env", "submit_command", "working_directory", "port", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.configuration.ssh.SSHConnection.start_remote_kernel", "modulename": "simmate.configuration.ssh", "qualname": "SSHConnection.start_remote_kernel", "type": "function", "doc": "<p>Completes the following steps:\n    1. Submit job to cluster which will create a python kernel\n    2. Waits for the SLURM/PBS job to start\n    3. Loads the connection filename from the batch job output file\n    4. Copies the connection file to the local computer</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>sleep_step : int, optional\n    Time to wait between checking if the batch job started. The default\n    is 3 seconds.</p>\n", "parameters": ["self", "sleep_step"], "funcdef": "def"}, {"fullname": "simmate.database", "modulename": "simmate.database", "qualname": "", "type": "module", "doc": "<h2 id=\"the-simmate-database\">The Simmate Database</h2>\n\n<p>This module hosts everything for defining and interacting with your database.</p>\n\n<h2 id=\"various-database-actions\">Various database actions</h2>\n\n<p>Viewing the raw SQL commands that are ran:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># https://docs.djangoproject.com/en/3.1/faq/models/#how-can-i-see-the-raw-sql-queries-django-is-running</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connection</span>\n<span class=\"n\">queries</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">queries</span>\n\n<span class=\"c1\"># if you have a queryset (output from a django query) you can do this instead:</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"fm\">__str__</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Running raw SQL commands directly against a file (not recommended!):</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># Using raw SQL for SQLite3 file</span>\n<span class=\"c1\"># For testing with sqlite3: https://docs.python.org/3/library/sqlite3.html</span>\n\n<span class=\"c1\"># connect to database</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlite3</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;db.sqlite3&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># write out your command in raw SQL</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT * FROM exam_question LIMIT 2&#39;</span>\n\n<span class=\"c1\"># make the query against the database</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span> <span class=\"c1\"># if changes made</span>\n\n<span class=\"c1\"># close connections</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Using Prefect to run raw SQL query against a file:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># Using Prefect Tasks</span>\n<span class=\"c1\"># For methods sqlite3 and many other db types, it&#39;s useful to start with Prefect Tasks</span>\n<span class=\"c1\"># https://docs.prefect.io/api/latest/tasks/sqlite.html</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">prefect.tasks.database.sqlite</span> <span class=\"kn\">import</span> <span class=\"n\">SQLiteQuery</span>\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">SQLiteQuery</span><span class=\"p\">(</span>\n    <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"s1\">&#39;db.sqlite3&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT * FROM exam_question LIMIT 2&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Example of making a user profile that properly uses hashing for storage:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"c1\"># alternatively I can use User.objects.create_user which will also hanlde making the password</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;jacksund&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;jacksund&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;@live.unc.edu&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># we can&#39;t give the password above because it needs to pass through the hash</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">set_password</span><span class=\"p\">(</span><span class=\"s1\">&#39;yeet123&#39;</span><span class=\"p\">)</span> \n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Example of making an object with time-specific information:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">example</span> <span class=\"kn\">import</span> <span class=\"n\">Exam</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytz</span>\n\n<span class=\"n\">exam</span> <span class=\"o\">=</span> <span class=\"n\">Exam</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Chem 102: 2020 Spring Final&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span>\n        <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">2020</span><span class=\"p\">,</span>\n        <span class=\"n\">month</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">day</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">hour</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">,</span>\n        <span class=\"n\">minute</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n        <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">time_limit</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"n\">exam</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</code></pre></div>\n"}, {"fullname": "simmate.database.base_data_types", "modulename": "simmate.database.base_data_types", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.base", "modulename": "simmate.database.base_data_types.base", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.base.SearchResults", "modulename": "simmate.database.base_data_types.base", "qualname": "SearchResults", "type": "class", "doc": "<p>This class adds some extra methods to the results returned from a database\nsearch. For example, if you searched all Structures and wanted to convert\nthese to a pandas dataframe or even a list of pymatgen structures, you can\nnow do...</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code># for a list of database objects (django models)\nsearch_results = Structures.objects.all()\n\n# for a pandas dataframe (which is like an Excel table)\ndataframe = search_results.to_dataframe()\n\n# for a list of pymatgen structure objects\nstructures = search_results.to_pymatgen()\n</code></pre>\n\n<p>For django users, we simply renamed QuerySet to SearchResults to help new users.</p>\n"}, {"fullname": "simmate.database.base_data_types.base.SearchResults.to_dataframe", "modulename": "simmate.database.base_data_types.base", "qualname": "SearchResults.to_dataframe", "type": "function", "doc": "<p>Returns a DataFrame from the queryset</p>\n\n<p>This method is coppied from...\nhttps://github.com/chrisdev/django-pandas/blob/master/django_pandas/managers.py</p>\n\n<h2 id=\"paramaters\">Paramaters</h2>\n\n<p>fieldnames:  List[str]\n    The model field names(columns) to utilise in creating the DataFrame.\n    You can span a relationships in the usual Django ORM way by using\n    the foreign key field name separated by double underscores and refer\n    to a field in a related model.\nindex: str\n    specify the field to use  for the index. If the index field is not\n    in fieldnames it will be appended. This is mandatory for timeseries.\nverbose: bool\n    If  this is <code>True</code> then populate the DataFrame with the human\n    readable versions for foreign key fields else use the actual values\n    set in the model\ncoerce_float: bool\n    Attempt to convert values to non-string, non-numeric objects (like\n    decimal.Decimal) to floating point.\ndatetime_index: bool\n    specify whether index should be converted to a DateTimeIndex.</p>\n", "parameters": ["self", "fieldnames", "verbose", "index", "coerce_float", "datetime_index"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.SearchResults.to_pymatgen", "modulename": "simmate.database.base_data_types.base", "qualname": "SearchResults.to_pymatgen", "type": "function", "doc": "<p>Converts your SearchResults/QuerySet to a list of pymatgen objects</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.Meta", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.Meta.__init__", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.Meta.abstract", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.Meta.abstract", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.objects", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.objects", "type": "function", "doc": "<p></p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.show_columns", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.show_columns", "type": "function", "doc": "<p>Prints a list of all the column names for this table and indicates which\ncolumns are related to other tables. This is primarily used to help users\ninteractively view what data is available.</p>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.create_subclass", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.create_subclass", "type": "function", "doc": "<p>This method is useful for dynamically creating a subclass DatabaseTable\nfrom some abstract class.</p>\n\n<p>Let's take an example where we inherit from a Structure table. The two\nways we create a NewTable below are exactly the same:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code># Normal way to create a child class\nNewTable(Structure):\n    new_field1 = table_column.FloatField()\n    new_field2 = table_column.FloatField()\n\n# How this method makes the same child class\nNewTable = Structure.create_subclass(\n    name=\"NewTable\",\n    module=__name__, # required for serialization\n    new_field1 = table_column.FloatField()\n    new_field2 = table_column.FloatField()\n)\n</code></pre>\n\n<p>While this might seem silly, it helps us avoid a bunch of boilerplate\ncode when we need to redefine a bunch of relationships in every single\nchild class (and always in the same way). A great example of it's utility\nis in local_calculations.relaxations.</p>\n", "parameters": ["cls", "name", "module", "new_columns"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation", "modulename": "simmate.database.base_data_types.calculation", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation", "type": "class", "doc": "<p>Base info</p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.directory", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.directory", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.prefect_flow_run_id", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.prefect_flow_run_id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.created_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.created_at", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.updated_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.updated_at", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.corrections", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.corrections", "type": "function", "doc": "<p>Archived Data</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.prefect_cloud_link", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.prefect_cloud_link", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.from_prefect_id", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.from_prefect_id", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "id", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.Meta", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.Meta.__init__", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.Meta.abstract", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.Meta.abstract", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.Meta.app_label", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.Meta.app_label", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.get_next_by_created_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation", "type": "class", "doc": "<p>A nested calculation is a calculation made up of other calculations. For example,\nwe may want to run a workflow that runs a series of relaxations. Or maybe\na relaxation, then energy, then bandstrucuture calculation. This table\nis for keeping track of workflows ran in series like this.</p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.Meta", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.Meta.__init__", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.Meta.abstract", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.Meta.abstract", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.Meta.app_label", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.Meta.app_label", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.corrections", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.corrections", "type": "variable", "doc": "<p>Archived Data</p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.create_subclass_from_calcs", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.create_subclass_from_calcs", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "name", "child_calculation_tables", "module", "extra_columns"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.update_calculation", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.update_calculation", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.get_next_by_created_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.NestedCalculation.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "NestedCalculation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces", "modulename": "simmate.database.base_data_types.forces", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.forces.Forces", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.database.base_data_types.forces.Forces.site_forces", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.site_forces", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.lattice_stress", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.lattice_stress", "type": "function", "doc": "<p>Query-helper Info</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.site_force_norm_max", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.site_force_norm_max", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.site_forces_norm", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.site_forces_norm", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.site_forces_norm_per_atom", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.site_forces_norm_per_atom", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.lattice_stress_norm", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.lattice_stress_norm", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.lattice_stress_norm_per_atom", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>Relationships</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.from_base_data", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.from_base_data", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "structure", "site_forces", "lattice_stress", "as_dict"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.Meta", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.forces.Forces.Meta.__init__", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.Meta.abstract", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.Meta.abstract", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.ionic_step_number", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.ionic_step_number", "type": "function", "doc": "<p>Relationships</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.from_pymatgen", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.from_pymatgen", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "ionic_step_number", "structure", "energy", "site_forces", "lattice_stress", "relaxation", "as_dict"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.create_subclass_from_relaxation", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.create_subclass_from_relaxation", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "name", "relaxation", "module", "extra_columns"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.Meta", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.Meta.__init__", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.Meta.abstract", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.Meta.abstract", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.Meta.app_label", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.Meta.app_label", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.spacegroup", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.band_gap", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.is_gap_direct", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.energy_fermi", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.conduction_band_minimum", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.valence_band_maximum", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.volume_change", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.create_all_subclasses", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.create_all_subclasses", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "name", "module", "extra_columns"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.update_from_vasp_run", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.update_from_vasp_run", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "vasprun", "corrections", "directory"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_convergence_plot", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_convergence_plot", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.view_convergence_plot", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.view_convergence_plot", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.Meta", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.Meta.__init__", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.Meta.abstract", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.Meta.abstract", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.Meta.app_label", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.Meta.app_label", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.spacegroup", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_next_by_created_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.band_gap", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.is_gap_direct", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.energy_fermi", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.conduction_band_minimum", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.valence_band_maximum", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.valence_band_maximum", "type": "function", "doc": "<p>Model Methods</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.from_pymatgen", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.from_pymatgen", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "structure", "energy", "site_forces", "lattice_stress", "as_dict", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.update_from_vasp_run", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.update_from_vasp_run", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "vasprun", "corrections", "directory"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.Meta", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.Meta.__init__", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.Meta.abstract", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.Meta.abstract", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.Meta.app_label", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.Meta.app_label", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.spacegroup", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.get_next_by_created_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure", "modulename": "simmate.database.base_data_types.structure", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.structure.Structure", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.database.base_data_types.structure.Structure.structure_string", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.structure_string", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.source", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.source", "type": "function", "doc": "<p>Query-helper Info</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.nsites", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.nsites", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.nelements", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.nelements", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.elements", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.elements", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.chemical_system", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.chemical_system", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.density", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.density", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.density_atomic", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.density_atomic", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.volume", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.volume", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.volume_molar", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.volume_molar", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.formula_full", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.formula_full", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.formula_reduced", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.formula_reduced", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.formula_anonymous", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.formula_anonymous", "type": "function", "doc": "<p>Relationships</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.spacegroup", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.base_data_types.structure.Structure.from_pymatgen", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.from_pymatgen", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "structure", "as_dict", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.to_pymatgen", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.to_pymatgen", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.Meta", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.structure.Structure.Meta.__init__", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.Meta.abstract", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.Meta.abstract", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.structure.Structure.spacegroup_id", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.number", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.number", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.symbol", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.symbol", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.crystal_system", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.crystal_system", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.point_group", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.point_group", "type": "function", "doc": "<p>Django App Association</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.load_database_from_pymatgen", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.load_database_from_pymatgen", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.DoesNotExist", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.MultipleObjectsReturned", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.materialsprojectstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.materialsprojectstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.jarvisstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.jarvisstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.aflowstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.aflowstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.oqmdstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.oqmdstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.codstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.codstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitstaticenergy_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitstaticenergy_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality04staticenergy_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality04staticenergy_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitrelaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitrelaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality00relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality00relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality00ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality00ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality01relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality01relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality01ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality01ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality02relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality02relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality02ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality02ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality03relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality03relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality03ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality03ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality04relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality04relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality04ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality04ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.aflowprototype_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.aflowprototype_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.thermodynamics", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.energy", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.energy", "type": "function", "doc": "<p>Query-helper Info</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.energy_per_atom", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.energy_per_atom", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.energy_above_hull", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.energy_above_hull", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.is_stable", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.is_stable", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.decomposes_to", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.decomposes_to", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.formation_energy", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.formation_energy", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.formation_energy_per_atom", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.formation_energy_per_atom", "type": "function", "doc": "<p>Relationships</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.from_base_data", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.from_base_data", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "structure", "energy", "as_dict"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.update_chemical_system_stabilities", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.update_chemical_system_stabilities", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "chemical_system"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.update_all_stabilities", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.update_all_stabilities", "type": "function", "doc": "<p></p>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.Meta", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.Meta.__init__", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.Meta.abstract", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.Meta.abstract", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.local_calculations", "modulename": "simmate.database.local_calculations", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.local_calculations.energy", "modulename": "simmate.database.local_calculations.energy", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.local_calculations.evolution", "modulename": "simmate.database.local_calculations.evolution", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.local_calculations.relaxation", "modulename": "simmate.database.local_calculations.relaxation", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.prototypes", "modulename": "simmate.database.prototypes", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.prototypes.aflow", "modulename": "simmate.database.prototypes.aflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.mineral_name", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.mineral_name", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.aflow_id", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.aflow_id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.pearson_symbol", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.pearson_symbol", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.strukturbericht", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.strukturbericht", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.nsites_wyckoff", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.nsites_wyckoff", "type": "function", "doc": "<p>Model Methods</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.name", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.name", "type": "variable", "doc": "<p>This helps piece together the name of the prototype in a user-friendly\nformat. We start by checking if there is a mineral_name to use, and we\nalso use the prototype's composition.</p>\n\n<p>An example of a structure with a mineral name is...\n    Cinnabar (HgS) Structure-type\nAnd an example of a structure without a mineral name is..\n    CaC6 Structure-type</p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.spacegroup", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.DoesNotExist", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.MultipleObjectsReturned", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.id", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.prototypes.webscraping", "modulename": "simmate.database.prototypes.webscraping", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.prototypes.webscraping.aflow", "modulename": "simmate.database.prototypes.webscraping.aflow", "qualname": "", "type": "module", "doc": "<p>This file is for pulling AFLOW data into the Simmate database. </p>\n\n<p>AFLOW's supported REST API can be accessed via \"AFLUX API\". This is a separate\npython package, which is maintained at https://github.com/rosenbrockc/aflow.\nNote that this not from the official AFLOW team, but it is made such that keywords\nare pulled dynamically from the AFLOW servers -- any updates in AFLOW's API should\nbe properly handled. Also structures are loaded as ASE Atom objects, which we then\nconvert to pymatgen.</p>\n"}, {"fullname": "simmate.database.prototypes.webscraping.aflow.load_all_prototypes", "modulename": "simmate.database.prototypes.webscraping.aflow", "qualname": "load_all_prototypes", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.database.third_parties", "modulename": "simmate.database.third_parties", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.aflow", "modulename": "simmate.database.third_parties.aflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure", "type": "class", "doc": "<p>AflowStructure(structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, id, final_energy, final_energy_per_atom, formation_energy_per_atom, band_gap, energy_above_hull)</p>\n"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.id", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.id", "type": "function", "doc": "<p>Base Info</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.final_energy", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.final_energy", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.final_energy_per_atom", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.final_energy_per_atom", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.formation_energy_per_atom", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.formation_energy_per_atom", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.band_gap", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.energy_above_hull", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.energy_above_hull", "type": "function", "doc": "<p>Properties</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.source", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.source", "type": "variable", "doc": "<p>Query-helper Info</p>\n"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.external_link", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.external_link", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.from_dict", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.from_dict", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "data_dict"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.spacegroup", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.DoesNotExist", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.database.third_parties.all", "modulename": "simmate.database.third_parties.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.cod", "modulename": "simmate.database.third_parties.cod", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.cod.CodStructure", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure", "type": "class", "doc": "<p>CodStructure(structure_string, nsites, nelements, elements, density, density_atomic, volume, volume_molar, spacegroup, id, chemical_system, formula_full, formula_reduced, formula_anonymous, is_ordered, has_implicit_hydrogens)</p>\n"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.id", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.formula_anonymous", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.formula_anonymous", "type": "function", "doc": "<p>Base Info</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.is_ordered", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.is_ordered", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.has_implicit_hydrogens", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.has_implicit_hydrogens", "type": "function", "doc": "<p>Properties</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.source", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.source", "type": "variable", "doc": "<p>Query-helper Info</p>\n"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.external_link", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.external_link", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.spacegroup", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.DoesNotExist", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.database.third_parties.jarvis", "modulename": "simmate.database.third_parties.jarvis", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.id", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.formation_energy_per_atom", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.formation_energy_per_atom", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.energy_above_hull", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.energy_above_hull", "type": "function", "doc": "<p>Properties</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.source", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.source", "type": "variable", "doc": "<p>Query-helper Info</p>\n"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.external_link", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.external_link", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.spacegroup", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.DoesNotExist", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.database.third_parties.materials_project", "modulename": "simmate.database.third_parties.materials_project", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.materials_project.MaterialsProjectStructure", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MaterialsProjectStructure", "type": "class", "doc": "<p>MaterialsProjectStructure(structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, id)</p>\n"}, {"fullname": "simmate.database.third_parties.materials_project.MaterialsProjectStructure.id", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MaterialsProjectStructure.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MaterialsProjectStructure.source", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MaterialsProjectStructure.source", "type": "variable", "doc": "<p>Query-helper Info</p>\n"}, {"fullname": "simmate.database.third_parties.materials_project.MaterialsProjectStructure.external_link", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MaterialsProjectStructure.external_link", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.materials_project.MaterialsProjectStructure.from_pymatgen", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MaterialsProjectStructure.from_pymatgen", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "id", "structure", "energy", "as_dict"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MaterialsProjectStructure.spacegroup", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MaterialsProjectStructure.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.third_parties.materials_project.MaterialsProjectStructure.DoesNotExist", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MaterialsProjectStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.database.third_parties.materials_project.MaterialsProjectStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MaterialsProjectStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.database.third_parties.oqmd", "modulename": "simmate.database.third_parties.oqmd", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure", "type": "class", "doc": "<p>OqmdStructure(structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, id, final_energy, energy_above_hull, band_gap)</p>\n"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.id", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.id", "type": "function", "doc": "<p>Base Info</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.final_energy", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.final_energy", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.energy_above_hull", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.energy_above_hull", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.band_gap", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.band_gap", "type": "function", "doc": "<p>Properties</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.source", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.source", "type": "variable", "doc": "<p>Query-helper Info</p>\n"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.external_link", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.external_link", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.spacegroup", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.spacegroup", "type": "variable", "doc": "<p>Properties</p>\n"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.DoesNotExist", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.database.third_parties.webscraping", "modulename": "simmate.database.third_parties.webscraping", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.webscraping.cod", "modulename": "simmate.database.third_parties.webscraping.cod", "qualname": "", "type": "module", "doc": "<p>This file is for pulling COD data into the Simmate database. </p>\n\n<p>The COD let's you download all of their data as a zip file. While they do have a\nREST API, it looks like they prefer you to use the zip file if you want all structures\nand metadata. This is a big download even when compressed (17GB), so it's a slow\nprocess -- but more importantly a stable one. For future reference though, the REST\nAPI is outlined here: https://wiki.crystallography.net/RESTful_API/</p>\n\n<p>Once downloaded, all of the cif files are organized into folders based on their first\nfew numbers -- for example, the cif 1234567 would be in folder /cif/1/23/45/1234567.cif\nIt's an odd way of storing the files, but we just need to script opening all of the folders\nopen. Note that some folders also don't have any cifs in them! There is also extra data\nin each cif file -- such as the doi of the paper it came from.</p>\n\n<p>There looks to be a lot of problematic cif files in the COD, but it's not worth parsing\nthrough all of these. Instead, I simply try to load the cif file into a pymatgen\nStructure object, and if it fails, I just move on. I'm slowly adding functionality\nto account for these problematic cif files though.</p>\n"}, {"fullname": "simmate.database.third_parties.webscraping.cod.load_all_structures", "modulename": "simmate.database.third_parties.webscraping.cod", "qualname": "load_all_structures", "type": "function", "doc": "<p></p>\n", "parameters": ["base_directory"], "funcdef": "def"}, {"fullname": "simmate.database.third_parties.webscraping.materials_cloud", "modulename": "simmate.database.third_parties.webscraping.materials_cloud", "qualname": "", "type": "module", "doc": "<p>This file is for pulling AFLOW data into the Simmate database. </p>\n\n<p>Materials Cloud looks to be composed of smaller databases, which makes this tricky.\nAfter reading through their website, I don't see an easy way to access all of their\ndata. It does look like there is an easier OPTIMADE endpoint here though:\n    https://www.optimade.org/providers-dashboard/providers/mcloud.html\nOPTIMADE isn't super clear on how to query these subdatabases though. I need to \ndo some more digging. I can get a single page of structures from this REST endpoint\nthough:\n    https://aiida.materialscloud.org/3dd/optimade/structures\nRead more at:\n    https://petstore.swagger.io/?url=https://raw.githubusercontent.com/Materials-Consortia/OPTIMADE/v1.0.0/schemas/openapi_schema.json#/</p>\n\n<p>Another option is using pymatgen's OPTIMADE class:\n    https://github.com/materialsproject/pymatgen/blob/v2022.0.8/pymatgen/ext/optimade.py</p>\n"}, {"fullname": "simmate.database.third_parties.webscraping.materials_project", "modulename": "simmate.database.third_parties.webscraping.materials_project", "qualname": "", "type": "module", "doc": "<p>This file is for pulling Materials Project data into the Simmate database. \nPyMatGen offers an easy way to do this in python -- the MPRester class. All you\nneed is an API key from https://materialsproject.org/open and pymatgen installed.\nFor now, we only pull the mp-id, structure, final energy, and energy above hull.</p>\n\n<p>Note, that the structures we pull into our database may not be exact matches to\nwhat's shown in their database. This is beacuse we run symmetry analysis on the\nstructure and convert to a LLL reduced cell.</p>\n"}, {"fullname": "simmate.database.third_parties.webscraping.materials_project.load_all_structures", "modulename": "simmate.database.third_parties.webscraping.materials_project", "qualname": "load_all_structures", "type": "function", "doc": "<p></p>\n", "parameters": ["criteria", "api_key"], "funcdef": "def"}, {"fullname": "simmate.file_converters", "modulename": "simmate.file_converters", "qualname": "", "type": "module", "doc": "<h2 id=\"file-converters\">File Converters</h2>\n\n<p>:warning: This module is at the planning stage so no code exists here yet.</p>\n\n<p>I think this will be a good module to have io features that can't be added to a specific calculator or toolkit module. For example, cif/xyz files are universal standards, and not linked directly to a specific calculator. There are also third-party classes (e.g. pymatgen/ase/jarvis structures) which users may want to switch between.</p>\n\n<p>I therefore plan for this module to be a one-stop place where users can convert between formats. For example, for simmate.file_converters.structures will have imports pointing toward vasp(POSCAR), castep, cif, pymatgen, ase, and all the different ways to represent a single crystal structure. Links between formats (e.g. vasp --> castep) will be done by first converting to a simmate.toolkit.base_data_types.Structure first.</p>\n"}, {"fullname": "simmate.file_converters.molecule", "modulename": "simmate.file_converters.molecule", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure", "modulename": "simmate.file_converters.structure", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.ase", "modulename": "simmate.file_converters.structure.ase", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.cif", "modulename": "simmate.file_converters.structure.cif", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.jarvis", "modulename": "simmate.file_converters.structure.jarvis", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.others", "modulename": "simmate.file_converters.structure.others", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.pymatgen", "modulename": "simmate.file_converters.structure.pymatgen", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.simmate_database", "modulename": "simmate.file_converters.structure.simmate_database", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.voxeldata", "modulename": "simmate.file_converters.voxeldata", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.shortcuts", "modulename": "simmate.shortcuts", "qualname": "", "type": "module", "doc": "<p>This file exists strictly for when you're testing with Simmate and don't want\nto write out long imports every single time. When writing modules, you should\nnever use these shortcuts because they actually take longer to run. </p>\n\n<p>So if you're a beginner, use the shortcut. If you're contributing to Simmate\ncode or really care about speed of your code, avoid the shortcut.</p>\n\n<p>By example, the import below is a shortcut for the longer line below it. They \nboth load the same function, but have two key differences: (1) The shortcut is \nobiously easier to remember and write -- so it's best for when you're quickly \ntesting things via Spyder; and (2) the shortcut loads slower (typically 1 second)\nthan the full import. This is because the shortcut module (this file) loads other\nconvient modules too. So you're actually loading extra things!</p>\n\n<pre><code>    # the convenient shortcut\n    from simmate.shortcuts import setup\n\n    # the faster import that does the same thing\n    from simmate.configuration.django import setup_full\n</code></pre>\n"}, {"fullname": "simmate.toolkit", "modulename": "simmate.toolkit", "qualname": "", "type": "module", "doc": "<h2 id=\"the-simmate-toolkit\">The Simmate Toolkit</h2>\n\n<p>:warning: This module is highly experimental and it's use will change often. Therefore many of the classes are undocumented and untested at the moment.</p>\n\n<p>The toolkit module is ment to be an extension of <a href=\"https://pymatgen.org/\">pymatgen</a> and <a href=\"https://gitlab.com/ase/ase\">ase</a>. It includes low-level classes and functions -- such as the <code>Structure</code> class and analyses ran on it. This module is entirely in python and does not involve calling third-party DFT programs (see the <code>simmate.calculators</code> module for those).</p>\n\n<p>The most commonly used classes from this toolkit are the <code>Structure</code> and <code>Composition</code> classes, which are located <code>base_data_types</code> module. For convenience, we also allow importing these classes directly with...</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.toolkit import Structure, Composition\n</code></pre>\n\n<h2 id=\"outline-of-submodules\">Outline of submodules</h2>\n\n<ul>\n<li><code>base_data_types</code> = defines fundamental classes for materials science</li>\n<li><code>creators</code> = creates structures, lattices, and periodic sites</li>\n<li><code>featurizers</code> = makes properties into numerical descriptors for machine-learning</li>\n<li><code>structure_prediction</code> = predicts reasonable crystal structures given a composition</li>\n<li><code>symmetry</code> = contains tools/metadata for symmetry, such as spacegroups and wyckoff sites</li>\n<li><code>transformations</code> = define transformations/mutations that can be applied to Structures</li>\n<li><code>validators</code> = evulate structures/lattices/etc. to see if they meet given criteria</li>\n</ul>\n"}, {"fullname": "simmate.toolkit.base_data_types", "modulename": "simmate.toolkit.base_data_types", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.base_data_types.element_data", "modulename": "simmate.toolkit.base_data_types.element_data", "qualname": "", "type": "module", "doc": "<p>This file contains commonly accessed data for pure Elements. If you would like to\nview all of this data in a friendly format, you should look at element_data.csv.\nIt's the same exact data, but in a cleaner CSV table.</p>\n\n<p>All data was ported from /pymatgen/core/periodic_table.json, where we host the\ndata directly in python rather than JSON for speed.</p>\n\n<p>While Simmate typically prefers CSV or SQL, we use JSON/dict format\nhere because there is a performance boost with the lazy-loading style that the Element\nbase class uses. This file is therefore an exception to our coding philophosy due\nthe specific use-case.</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.element_data.SUPPORTED_PROPERTIES", "modulename": "simmate.toolkit.base_data_types.element_data", "qualname": "SUPPORTED_PROPERTIES", "type": "variable", "doc": "<p>These are the attributes that pymatgen has but we are missing at the moment. There are\nothers, but I think these are the ones worth adding:\n    ionization_energies\n    mendeleev_no\n    valence\n    ground_level\n    row_number\n    group_number\n    block (s,p,d,f)\n    term_symbols\n    ground_state_term_symbol</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice", "type": "class", "doc": "<p>This class is for 3D crystal lattices, which are represented by a 3x3 matrix.\nThis class provides a bunch of tools to pull out common values like vector\nlengths and angles, and also allows for lattice conversions.</p>\n\n<p>For some basic formulas and introduction, see here:\n    http://gisaxs.com/index.php/Unit_cell\n    http://gisaxs.com/index.php/Lattices</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice.__init__", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice.__init__", "type": "function", "doc": "<p>Create a lattice from a 3x3 matrix. Each vector is defined via xyz on\none row of the matrix. For example, a cubic lattice where all vectors\nare 1 Angstrom and 90deg from eachother would be defined as\n    matrix = [[1, 0, 0],\n              [0, 1, 0],\n              [0, 0, 1]]</p>\n", "parameters": ["self", "matrix"], "funcdef": "def"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice.lengths", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice.lengths", "type": "variable", "doc": "<p>Gives the lengths of the lattice as (a, b, c).</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice.a", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice.a", "type": "variable", "doc": "<p>The length of the lattice vector \"a\" (in Angstroms)</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice.b", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice.b", "type": "variable", "doc": "<p>The length of the lattice vector \"b\" (in Angstroms)</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice.c", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice.c", "type": "variable", "doc": "<p>The length of the lattice vector \"c\" (in Angstroms)</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice.angles", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice.angles", "type": "variable", "doc": "<p>The angles of the lattice as (alpha, beta, gamma).</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice.alpha", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice.alpha", "type": "variable", "doc": "<p>The angle between the lattice vectors b and c (in degrees).</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice.beta", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice.beta", "type": "variable", "doc": "<p>The angle between the lattice vectors a and c (in degrees).</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.lattice.Lattice.gamma", "modulename": "simmate.toolkit.base_data_types.lattice", "qualname": "Lattice.gamma", "type": "variable", "doc": "<p>The angle between the lattice vectors a and b (in degrees).</p>\n"}, {"fullname": "simmate.toolkit.creators", "modulename": "simmate.toolkit.creators", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice", "modulename": "simmate.toolkit.creators.lattice", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.all", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.all.RandomLattice", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RandomLattice", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.all.RandomLattice.__init__", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RandomLattice.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "vector_generation_method", "vector_gen_options", "angle_generation_method", "angle_gen_options"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.all.RandomLattice.new_lattice", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RandomLattice.new_lattice", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.all.RandomSymLattice", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RandomSymLattice", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.all.RandomSymLattice.__init__", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RandomSymLattice.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup_include", "spacegroup_exclude", "vector_generation_method", "vector_gen_options", "angle_generation_method", "angle_gen_options"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.all.RandomSymLattice.new_lattice", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RandomSymLattice.new_lattice", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.all.RSLFixedVolume", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RSLFixedVolume", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.all.RSLFixedVolume.__init__", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RSLFixedVolume.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "volume", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.all.RSLFixedVolume.new_lattice", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RSLFixedVolume.new_lattice", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.all.RSLSmartVolume", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RSLSmartVolume", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.all.RSLSmartVolume.__init__", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RSLSmartVolume.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "volume", "spacegroup_include", "spacegroup_exclude", "vector_generation_method", "vector_gen_options", "angle_generation_method", "angle_gen_options"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.all.RSLSmartVolume.new_lattice", "modulename": "simmate.toolkit.creators.lattice.all", "qualname": "RSLSmartVolume.new_lattice", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.sites", "modulename": "simmate.toolkit.creators.sites", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff.RandomWySites", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "qualname": "RandomWySites", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff.RandomWySites.__init__", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "qualname": "RandomWySites.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "spacegroup_include", "spacegroup_exclude", "coords_generation_method", "coords_gen_options"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff.RandomWySites.new_sites", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "qualname": "RandomWySites.new_sites", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff.asymmetric_unit_boundries", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "qualname": "asymmetric_unit_boundries", "type": "function", "doc": "<p></p>\n", "parameters": ["spacegroup", "asym_data"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure", "modulename": "simmate.toolkit.creators.structure", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.all", "modulename": "simmate.toolkit.creators.structure.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.base", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator.__init__", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator.__init__", "type": "function", "doc": "<p>This is where you store all settings for the creation and do the setup.\nFor example, you would store the target composition here and/or\nspecify the fixed volume to use. Many times, there are 'setup' steps\nthat require a lot of overhead which you don't want to redo for each\nnew creation. For example, you don't want to find all combinations\nof allowed wyckoff sites for a specific composition each time you make\na new structure, so you would find all valid combinations here in the\n__init__ so you don't have to repeatedly find combos below in create()</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator.create_structure", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator.create_structure", "type": "function", "doc": "<p>For all different structure creators, there should be a method of\n.new_structure() that makes the new object. The main rule for this\nfunction is that it must return a single pymatgen structure object.\nHow that structure object is created is up to each method!</p>\n\n<p>Below is some example code for how Structures are typically made. How\nthe spacegroup/lattice/species/coords is determined is up to each\nmethodand not shown.</p>\n\n<h1 id=\"import-module-do-this-outside-the-class-functions\">import module (do this outside the class functions)</h1>\n\n<p>from pymatgen.core.structure import Structure</p>\n\n<h1 id=\"run-your-method-that-makes-the-latticespeciescoords-or-uses-the\">run your method that makes the lattice/species/coords or uses the</h1>\n\n<h1 id=\"inputs-from-above\">inputs from above.</h1>\n\n<p>...</p>\n\n<h1 id=\"for-new_structure-method-that-doesnt-use-symmetry-or-wyckoff-sites\">for new_structure method that doesnt use symmetry or wyckoff sites</h1>\n\n<p>sg = 1 # this is never used but just for bookkeeping\nstructure = Structure(lattice = lattice,\n                      species = species,\n                      coords = coords)</p>\n\n<h1 id=\"for-new_structure-methods-that-depend-on-symmetry-and-wyckoff-sites\">for new_structure methods that depend on symmetry and wyckoff sites</h1>\n\n<h1 id=\"if-you-give-the-sites-in-the-asym-unit-they-will-be-replicated\">If you give the sites in the asym unit, they will be replicated</h1>\n\n<h1 id=\"elsewhere-in-the-unitcell-using-spacegroup-symmetry-operations\">elsewhere in the unitcell using spacegroup symmetry operations.</h1>\n\n<p>structure = Structure.from_spacegroup(sg = spacegroup,\n                                      lattice = lattice,\n                                      species = species,\n                                      coords = coords)</p>\n", "parameters": ["self", "spacegroup"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator.create_many_structures", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator.create_many_structures", "type": "function", "doc": "<p>This is a convience function to create many structures in parallel.\nIn most cases, you don't want to redefine this function.\nIt is assumed that calling create_structure() repeatedly is the\nfastest method to make new structures, so that is the function\nparallelized. In some cases (such as the USPEX creator), there is a\nlot of overhead with a single call to create_structure(), so it may\nmake more sense to have the main structure creation code in this\nfunction. See the USPEXStructure Creator class for an example of this.</p>\n\n<p>Make sure you have a Dask cluster setup as a global variable!\nHere's how you should do that...\n    from dask.distributed import Client\n    client = Client(processes=False)</p>\n", "parameters": ["self", "n", "spacegroup"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator.update_data", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator.update_data", "type": "function", "doc": "<p>TO-DO\nThis is a function to update settings. For example, I could use this\nto update the self.lattice_creator method to a more accurate volume.\nI can run machine learning code here before updating too.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.prototypes", "modulename": "simmate.toolkit.creators.structure.prototypes", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.exact_match", "modulename": "simmate.toolkit.creators.structure.prototypes.exact_match", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.exact_match.ExactAflowPrototypeStructures", "modulename": "simmate.toolkit.creators.structure.prototypes.exact_match", "qualname": "ExactAflowPrototypeStructures", "type": "class", "doc": "<p>Given a compositon, this class can be used to create structures from\nthe <strong>exactly-matching</strong> prototypes in the AFLOW library. This means we\nare only using prototypes that have the same anonymous formula. For example,\nif you request structures for Ca2N to be made, only prototypes that have\nthe AB2 anonymoous formula will be used (such as the MoS2 prototype).</p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.exact_match.ExactAflowPrototypeStructures.__init__", "modulename": "simmate.toolkit.creators.structure.prototypes.exact_match", "qualname": "ExactAflowPrototypeStructures.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "max_sites"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.ordered", "modulename": "simmate.toolkit.creators.structure.prototypes.ordered", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.ordered.AflowPrototypeStructures", "modulename": "simmate.toolkit.creators.structure.prototypes.ordered", "qualname": "AflowPrototypeStructures", "type": "class", "doc": "<p>Given a compositon, this class can be used to create all structures from\nthe prototypes in the AFLOW library.</p>\n\n<p>At the moment, this does not allow for disordered versions of prototypes.\nThis would be like using a supercell of a 1-site prototype for a 2-site target\ncomposition. A concrete example of this is using the NaCl rocksalt prototype\nfor a NaClBr or NaKClBr compositions -- each of these compositions would\nrequire a supercell of the NaCl prototype structure becuase they need more\nthan 2 sites.</p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.ordered.AflowPrototypeStructures.__init__", "modulename": "simmate.toolkit.creators.structure.prototypes.ordered", "qualname": "AflowPrototypeStructures.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "allow_multiples", "max_sites"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.ordered_and_disordered", "modulename": "simmate.toolkit.creators.structure.prototypes.ordered_and_disordered", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.random_symmetry", "modulename": "simmate.toolkit.creators.structure.random_symmetry", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.random_symmetry.RandomSymStructure", "modulename": "simmate.toolkit.creators.structure.random_symmetry", "qualname": "RandomSymStructure", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "simmate.toolkit.creators.structure.random_symmetry.RandomSymStructure.__init__", "modulename": "simmate.toolkit.creators.structure.random_symmetry", "qualname": "RandomSymStructure.__init__", "type": "function", "doc": "<p>This is where you store all settings for the creation and do the setup.\nFor example, you would store the target composition here and/or\nspecify the fixed volume to use. Many times, there are 'setup' steps\nthat require a lot of overhead which you don't want to redo for each\nnew creation. For example, you don't want to find all combinations\nof allowed wyckoff sites for a specific composition each time you make\na new structure, so you would find all valid combinations here in the\n__init__ so you don't have to repeatedly find combos below in create()</p>\n", "parameters": ["self", "composition", "spacegroup_include", "spacegroup_exclude", "lattice_generation_method", "lattice_gen_options", "site_generation_method", "site_gen_options", "validator_method", "validator_options", "fixindicator_method", "fixindicator_options", "remove_failed_spacegroups", "cleanup"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.random_symmetry.RandomSymStructure.create_structure", "modulename": "simmate.toolkit.creators.structure.random_symmetry", "qualname": "RandomSymStructure.create_structure", "type": "function", "doc": "<p>For all different structure creators, there should be a method of\n.new_structure() that makes the new object. The main rule for this\nfunction is that it must return a single pymatgen structure object.\nHow that structure object is created is up to each method!</p>\n\n<p>Below is some example code for how Structures are typically made. How\nthe spacegroup/lattice/species/coords is determined is up to each\nmethodand not shown.</p>\n\n<h1 id=\"import-module-do-this-outside-the-class-functions\">import module (do this outside the class functions)</h1>\n\n<p>from pymatgen.core.structure import Structure</p>\n\n<h1 id=\"run-your-method-that-makes-the-latticespeciescoords-or-uses-the\">run your method that makes the lattice/species/coords or uses the</h1>\n\n<h1 id=\"inputs-from-above\">inputs from above.</h1>\n\n<p>...</p>\n\n<h1 id=\"for-new_structure-method-that-doesnt-use-symmetry-or-wyckoff-sites\">for new_structure method that doesnt use symmetry or wyckoff sites</h1>\n\n<p>sg = 1 # this is never used but just for bookkeeping\nstructure = Structure(lattice = lattice,\n                      species = species,\n                      coords = coords)</p>\n\n<h1 id=\"for-new_structure-methods-that-depend-on-symmetry-and-wyckoff-sites\">for new_structure methods that depend on symmetry and wyckoff sites</h1>\n\n<h1 id=\"if-you-give-the-sites-in-the-asym-unit-they-will-be-replicated\">If you give the sites in the asym unit, they will be replicated</h1>\n\n<h1 id=\"elsewhere-in-the-unitcell-using-spacegroup-symmetry-operations\">elsewhere in the unitcell using spacegroup symmetry operations.</h1>\n\n<p>structure = Structure.from_spacegroup(sg = spacegroup,\n                                      lattice = lattice,\n                                      species = species,\n                                      coords = coords)</p>\n", "parameters": ["self", "spacegroup"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party", "modulename": "simmate.toolkit.creators.structure.third_party", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.airss", "modulename": "simmate.toolkit.creators.structure.third_party.airss", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.airss.AIRSSStructure", "modulename": "simmate.toolkit.creators.structure.third_party.airss", "qualname": "AIRSSStructure", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.airss.AIRSSStructure.__init__", "modulename": "simmate.toolkit.creators.structure.third_party.airss", "qualname": "AIRSSStructure.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.airss.AIRSSStructure.new_structure", "modulename": "simmate.toolkit.creators.structure.third_party.airss", "qualname": "AIRSSStructure.new_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup", "lattice", "species", "coords"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.ase", "modulename": "simmate.toolkit.creators.structure.third_party.ase", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.ase.ASEStructure", "modulename": "simmate.toolkit.creators.structure.third_party.ase", "qualname": "ASEStructure", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.ase.ASEStructure.__init__", "modulename": "simmate.toolkit.creators.structure.third_party.ase", "qualname": "ASEStructure.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "ratio_of_covalent_radii"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.ase.ASEStructure.new_structure", "modulename": "simmate.toolkit.creators.structure.third_party.ase", "qualname": "ASEStructure.new_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup", "lattice", "species", "coords"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.calypso", "modulename": "simmate.toolkit.creators.structure.third_party.calypso", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.calypso.CALYPSOStructure", "modulename": "simmate.toolkit.creators.structure.third_party.calypso", "qualname": "CALYPSOStructure", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.calypso.CALYPSOStructure.__init__", "modulename": "simmate.toolkit.creators.structure.third_party.calypso", "qualname": "CALYPSOStructure.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "calypso_exe_loc", "calypso_python_env", "conda_loc", "temp_dir"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.calypso.CALYPSOStructure.new_structures", "modulename": "simmate.toolkit.creators.structure.third_party.calypso", "qualname": "CALYPSOStructure.new_structures", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "n"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.calypso.CALYPSOStructure.new_structure", "modulename": "simmate.toolkit.creators.structure.third_party.calypso", "qualname": "CALYPSOStructure.new_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup", "lattice", "species", "coords"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.gasp", "modulename": "simmate.toolkit.creators.structure.third_party.gasp", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.gasp.GASPStructure", "modulename": "simmate.toolkit.creators.structure.third_party.gasp", "qualname": "GASPStructure", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.gasp.GASPStructure.__init__", "modulename": "simmate.toolkit.creators.structure.third_party.gasp", "qualname": "GASPStructure.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.gasp.GASPStructure.new_structure", "modulename": "simmate.toolkit.creators.structure.third_party.gasp", "qualname": "GASPStructure.new_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup", "lattice", "species", "coords"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.pyxtal", "modulename": "simmate.toolkit.creators.structure.third_party.pyxtal", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.pyxtal.PyXtalStructure", "modulename": "simmate.toolkit.creators.structure.third_party.pyxtal", "qualname": "PyXtalStructure", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.pyxtal.PyXtalStructure.__init__", "modulename": "simmate.toolkit.creators.structure.third_party.pyxtal", "qualname": "PyXtalStructure.__init__", "type": "function", "doc": "<p>This is where you store all settings for the creation and do the setup.\nFor example, you would store the target composition here and/or\nspecify the fixed volume to use. Many times, there are 'setup' steps\nthat require a lot of overhead which you don't want to redo for each\nnew creation. For example, you don't want to find all combinations\nof allowed wyckoff sites for a specific composition each time you make\na new structure, so you would find all valid combinations here in the\n__init__ so you don't have to repeatedly find combos below in create()</p>\n", "parameters": ["self", "composition", "volume_factor", "default_lattice", "tolerance_matrix", "spacegroup_include", "spacegroup_exclude"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.pyxtal.PyXtalStructure.create_structure", "modulename": "simmate.toolkit.creators.structure.third_party.pyxtal", "qualname": "PyXtalStructure.create_structure", "type": "function", "doc": "<p>For all different structure creators, there should be a method of\n.new_structure() that makes the new object. The main rule for this\nfunction is that it must return a single pymatgen structure object.\nHow that structure object is created is up to each method!</p>\n\n<p>Below is some example code for how Structures are typically made. How\nthe spacegroup/lattice/species/coords is determined is up to each\nmethodand not shown.</p>\n\n<h1 id=\"import-module-do-this-outside-the-class-functions\">import module (do this outside the class functions)</h1>\n\n<p>from pymatgen.core.structure import Structure</p>\n\n<h1 id=\"run-your-method-that-makes-the-latticespeciescoords-or-uses-the\">run your method that makes the lattice/species/coords or uses the</h1>\n\n<h1 id=\"inputs-from-above\">inputs from above.</h1>\n\n<p>...</p>\n\n<h1 id=\"for-new_structure-method-that-doesnt-use-symmetry-or-wyckoff-sites\">for new_structure method that doesnt use symmetry or wyckoff sites</h1>\n\n<p>sg = 1 # this is never used but just for bookkeeping\nstructure = Structure(lattice = lattice,\n                      species = species,\n                      coords = coords)</p>\n\n<h1 id=\"for-new_structure-methods-that-depend-on-symmetry-and-wyckoff-sites\">for new_structure methods that depend on symmetry and wyckoff sites</h1>\n\n<h1 id=\"if-you-give-the-sites-in-the-asym-unit-they-will-be-replicated\">If you give the sites in the asym unit, they will be replicated</h1>\n\n<h1 id=\"elsewhere-in-the-unitcell-using-spacegroup-symmetry-operations\">elsewhere in the unitcell using spacegroup symmetry operations.</h1>\n\n<p>structure = Structure.from_spacegroup(sg = spacegroup,\n                                      lattice = lattice,\n                                      species = species,\n                                      coords = coords)</p>\n", "parameters": ["self", "spacegroup"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.uspex", "modulename": "simmate.toolkit.creators.structure.third_party.uspex", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.uspex.USPEXStructure", "modulename": "simmate.toolkit.creators.structure.third_party.uspex", "qualname": "USPEXStructure", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.uspex.USPEXStructure.__init__", "modulename": "simmate.toolkit.creators.structure.third_party.uspex", "qualname": "USPEXStructure.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "uspex_python_env", "uspex_loc", "conda_loc", "temp_dir"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.uspex.USPEXStructure.new_structures", "modulename": "simmate.toolkit.creators.structure.third_party.uspex", "qualname": "USPEXStructure.new_structures", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "n"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.uspex.USPEXStructure.new_structure", "modulename": "simmate.toolkit.creators.structure.third_party.uspex", "qualname": "USPEXStructure.new_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup", "lattice", "species", "coords"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.xtalopt", "modulename": "simmate.toolkit.creators.structure.third_party.xtalopt", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.xtalopt.XtalOptStructure", "modulename": "simmate.toolkit.creators.structure.third_party.xtalopt", "qualname": "XtalOptStructure", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.xtalopt.XtalOptStructure.__init__", "modulename": "simmate.toolkit.creators.structure.third_party.xtalopt", "qualname": "XtalOptStructure.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "spacegroup_include", "spacegroup_exclude"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.xtalopt.XtalOptStructure.new_structure", "modulename": "simmate.toolkit.creators.structure.third_party.xtalopt", "qualname": "XtalOptStructure.new_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "spacegroup", "lattice", "species", "coords"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils", "modulename": "simmate.toolkit.creators.utils", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.utils.FixIndicator", "modulename": "simmate.toolkit.creators.utils", "qualname": "FixIndicator", "type": "class", "doc": "<p>This is an abstract base class for pointing to some class based on an\ninput number of attempts. Note that these classes should be written to run\nin parallel and called accross multiple threads -- this means you should\nnot store or update the attempt number within the class. Instead you must\nsimply take the attempt number and return a class based on that number.</p>\n"}, {"fullname": "simmate.toolkit.creators.utils.FixIndicator.point_to_fix", "modulename": "simmate.toolkit.creators.utils", "qualname": "FixIndicator.point_to_fix", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "attempt"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.SingleFix", "modulename": "simmate.toolkit.creators.utils", "qualname": "SingleFix", "type": "class", "doc": "<p>This is an abstract base class for pointing to some class based on an\ninput number of attempts. Note that these classes should be written to run\nin parallel and called accross multiple threads -- this means you should\nnot store or update the attempt number within the class. Instead you must\nsimply take the attempt number and return a class based on that number.</p>\n"}, {"fullname": "simmate.toolkit.creators.utils.SingleFix.__init__", "modulename": "simmate.toolkit.creators.utils", "qualname": "SingleFix.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "fixes", "cutoffs"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.SingleFix.point_to_fix", "modulename": "simmate.toolkit.creators.utils", "qualname": "SingleFix.point_to_fix", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "attempt"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.SerialFixes", "modulename": "simmate.toolkit.creators.utils", "qualname": "SerialFixes", "type": "class", "doc": "<p>This is an abstract base class for pointing to some class based on an\ninput number of attempts. Note that these classes should be written to run\nin parallel and called accross multiple threads -- this means you should\nnot store or update the attempt number within the class. Instead you must\nsimply take the attempt number and return a class based on that number.</p>\n"}, {"fullname": "simmate.toolkit.creators.utils.SerialFixes.__init__", "modulename": "simmate.toolkit.creators.utils", "qualname": "SerialFixes.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "fixes", "cutoffs"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.SerialFixes.point_to_fix", "modulename": "simmate.toolkit.creators.utils", "qualname": "SerialFixes.point_to_fix", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "attempt"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.NestedFixes", "modulename": "simmate.toolkit.creators.utils", "qualname": "NestedFixes", "type": "class", "doc": "<p>This is an abstract base class for pointing to some class based on an\ninput number of attempts. Note that these classes should be written to run\nin parallel and called accross multiple threads -- this means you should\nnot store or update the attempt number within the class. Instead you must\nsimply take the attempt number and return a class based on that number.</p>\n"}, {"fullname": "simmate.toolkit.creators.utils.NestedFixes.__init__", "modulename": "simmate.toolkit.creators.utils", "qualname": "NestedFixes.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "fixes", "cutoffs"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.NestedFixes.point_to_fix", "modulename": "simmate.toolkit.creators.utils", "qualname": "NestedFixes.point_to_fix", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "attempt"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.get_nested_map", "modulename": "simmate.toolkit.creators.utils", "qualname": "get_nested_map", "type": "function", "doc": "<p></p>\n", "parameters": ["a"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.get_nested_size", "modulename": "simmate.toolkit.creators.utils", "qualname": "get_nested_size", "type": "function", "doc": "<p></p>\n", "parameters": ["a"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.vector", "modulename": "simmate.toolkit.creators.vector", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.normal_distribution", "modulename": "simmate.toolkit.creators.vector.normal_distribution", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.normal_distribution.NormallyDistributedVectors", "modulename": "simmate.toolkit.creators.vector.normal_distribution", "qualname": "NormallyDistributedVectors", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.normal_distribution.NormallyDistributedVectors.__init__", "modulename": "simmate.toolkit.creators.vector.normal_distribution", "qualname": "NormallyDistributedVectors.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "min_value", "max_value", "extra_conditions", "center", "standdev"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.vector.normal_distribution.NormallyDistributedVectors.new_vector", "modulename": "simmate.toolkit.creators.vector.normal_distribution", "qualname": "NormallyDistributedVectors.new_vector", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.vector.uniform_distribution", "modulename": "simmate.toolkit.creators.vector.uniform_distribution", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors", "modulename": "simmate.toolkit.creators.vector.uniform_distribution", "qualname": "UniformlyDistributedVectors", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors.__init__", "modulename": "simmate.toolkit.creators.vector.uniform_distribution", "qualname": "UniformlyDistributedVectors.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "min_value", "max_value", "extra_conditions"], "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors.new_vector", "modulename": "simmate.toolkit.creators.vector.uniform_distribution", "qualname": "UniformlyDistributedVectors.new_vector", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers", "modulename": "simmate.toolkit.featurizers", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.featurizers.fingerprint", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint", "type": "class", "doc": "<p>Computes statistics of properties across all sites in a structure, and\nbreaks these down by element. This featurizer first uses a site featurizer\nclass (see site.py for options) to compute features of each site of a\nspecific element in a structure, and then computes features of the entire\nstructure by measuring statistics of each attribute.\nFeatures:\n    - Returns each statistic of each site feature, broken down by element</p>\n"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.__init__", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.__init__", "type": "function", "doc": "<p>Args:\n    site_featurizer (BaseFeaturizer): a site-based featurizer\n    stats ([str]): list of weighted statistics to compute for each feature.\n        If stats is None, a list is returned for each features\n        that contains the calculated feature for each site in the\n        structure.\n        <em>Note for nth mode, stat must be 'n</em>_mode'; e.g. stat='2nd_mode'\n    elements ([str]): list of elements to include. Default is all.\n    covariance (bool): Whether to compute the covariance of site features</p>\n", "parameters": ["self", "site_featurizer", "stats", "elements", "covariance"], "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.fit", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.fit", "type": "function", "doc": "<p>Define the list of elements to be included in the PRDF. By default,\nthe PRDF will include all of the elements in <code>X</code>\nArgs:\n    X: (numpy array nx1) structures used in the training set. Each entry\n        must be Pymatgen Structure objects.\n    y: <em>Not used</em>\n    fit_kwargs: <em>not used</em>\nReturns:\n    self</p>\n", "parameters": ["self", "X", "y"], "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.featurize", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.featurize", "type": "function", "doc": "<p>Get PSSF of the input structure.\nArgs:\n    s: Pymatgen Structure object.\nReturns:\n    pssf: 1D array of each element's ssf</p>\n", "parameters": ["self", "s"], "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.compute_pssf", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.compute_pssf", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "s", "e"], "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.feature_labels", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.feature_labels", "type": "function", "doc": "<p>Generate attribute names.</p>\n\n<p>Returns:\n    ([str]) attribute labels.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.citations", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.citations", "type": "function", "doc": "<p>Citation(s) and reference(s) for this feature.</p>\n\n<p>Returns:\n    (list) each element should be a string citation,\n        ideally in BibTeX format.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.implementors", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.implementors", "type": "function", "doc": "<p>List of implementors of the feature.</p>\n\n<p>Returns:\n    (list) each element should either be a string with author name (e.g.,\n        \"Anubhav Jain\") or a dictionary  with required key \"name\" and other\n        keys like \"email\" or \"institution\" (e.g., {\"name\": \"Anubhav\n        Jain\", \"email\": \"ajain@lbl.gov\", \"institution\": \"LBNL\"}).</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.from_preset", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.from_preset", "type": "function", "doc": "<p>Create a PartialsSiteStatsFingerprint class according to a preset\nArgs:\n    preset (str) - Name of preset\n    kwargs - Options for PartialsSiteStatsFingerprint</p>\n", "parameters": ["preset", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction", "modulename": "simmate.toolkit.structure_prediction", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution", "modulename": "simmate.toolkit.structure_prediction.evolution", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch", "type": "class", "doc": "<p>This database table holds all of the information related to an evolutionary\nsearch and also has convient methods to analyze the data.</p>\n\n<h2 id=\"loading-results\">Loading Results</h2>\n\n<p>Typically, you'll load your search through a search id or a composition:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.shortcuts import SearchResults\n\n# if you know the id\nsearch_results = SearchResults.objects.get(id=123)\n\n# if you know the composition\nsearch_results = SearchResults.objects.get(id=\"Ca2 N1\")\n</code></pre>\n\n<p>Alternatively, you can find these out by looking at a table of all the\nevolutionary searches that have been ran:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>all_searches = SearchResults.objects.to_dataframe()\n</code></pre>\n\n<h2 id=\"viewing-results\">Viewing Results</h2>\n\n<p>The first thing you may want to check is the best structure found. To access\nthis and write it to a file:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code># loads the best structure and converts it to a pymatgen structure object\nstructure = search_results.best_individual.to_pymatgen()\n\n# writes it to a cif file\nstructure.to(\"cif\", \"best_structure.cif\")\n</code></pre>\n\n<p>To view convergence of the search, you can use the convenient plotting methods.</p>\n\n<p>Note: this will open up the plot in your default browser, so this command\nwon't work properly through an ssh terminal.</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>search_results.view_convergence_plot()\n</code></pre>\n\n<p>If you are benchmarking Simmate to see if it found a particular structure,\nyou can use:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from pymatgen.core import Structure\n\nstructure = Structure.from_file(\"example123.cif\")\n\nsearch_results.view_correctness_plot(structure)\n</code></pre>\n\n<p>Beyond plots, you can also access a table of all calculated structures:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>dataframe = search_results.individuals_completed.to_dataframe()\n</code></pre>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.composition", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.composition", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.individuals_datatable_str", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.individuals_datatable_str", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.workflows", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.workflows", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.max_structures", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.max_structures", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.limit_best_survival", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.limit_best_survival", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.individuals_datatable", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.individuals_datatable", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.individuals", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.individuals", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.individuals_completed", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.individuals_completed", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.best_individual", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.best_individual", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.get_convergence_plot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.get_convergence_plot", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.view_convergence_plot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.view_convergence_plot", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.get_correctness_plot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.get_correctness_plot", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure_known"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.view_correctness_plot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.view_correctness_plot", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure_known"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.DoesNotExist", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.MultipleObjectsReturned", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.id", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.sources", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.sources", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource", "type": "class", "doc": "<p>StructureSource(id, name, is_steadystate, is_singleshot, settings, created_at, updated_at, prefect_flow_run_ids, search)</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.name", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.name", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.is_steadystate", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.is_steadystate", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.is_singleshot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.is_singleshot", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.settings", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.settings", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.created_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.created_at", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.updated_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.updated_at", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.prefect_flow_run_ids", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.prefect_flow_run_ids", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.search", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.search", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.update_flow_run_ids", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.update_flow_run_ids", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.nprefect_flow_runs", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.nprefect_flow_runs", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.DoesNotExist", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.MultipleObjectsReturned", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.get_next_by_created_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.get_previous_by_created_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.get_next_by_updated_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.get_previous_by_updated_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.search_id", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.search_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.id", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.search_engine", "modulename": "simmate.toolkit.structure_prediction.evolution.search_engine", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.search_engine.SearchEngine", "modulename": "simmate.toolkit.structure_prediction.evolution.search_engine", "qualname": "SearchEngine", "type": "class", "doc": "<p>This class is the entry point for predicting crystal structures with an\nevolutionary search algorithm.</p>\n\n<p>Once you initialize a SearchEngine with a composition (and any other\noptional parameters), you simply need to call the run() method to start\nthe search. Note that we've added this class to the shortcuts module for\nconvenience:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.shortcuts import SearchEngine\n\nsearch_engine = SearchEngine(\n    composition=\"C4\",\n    labels=[\"WarWulf\"],  # optional\n    workflow_command=\"mpirun -n 8 vasp_std &gt; vasp.out\",  # optional\n)\n\nsearch.run()\n</code></pre>\n\n<p>This class is only for creating (or continuing) searches. If you only want\nto view results, you should instead look directly at the database table for\npreviously ran searches:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.shortcuts import SearchResults</p>\n\n<p>search_results = SearchResults.objects.get(composition=\"Sr4 Si4 N8\")</p>\n\n<p>If you start a separate terminal from where a search is running, you can\nactually use this table to view results WHILE the search is still running!</p>\n\n<p>You can also access the search results from your search_engine object. So\nonce your search is finished or stopped, you can do:</p>\n\n<p>.. code-block:: python</p>\n\n<p>search_results = search_engine.search_datatable</p>\n\n<p>To better understand how to view/analyze results, please read the documentation\nfor the SearchResults class.</p>\n\n<p><strong>WARNING</strong> This search engine assumes you have properly configured\nPrefect Cloud and a cloud database backend (e.g. Postgres). In the future,\nwe will accommodate local runs and other backends.</p>\n\n<h2 id=\"alternative-codes-softwares\">Alternative Codes &amp; Softwares</h2>\n\n<p><a href=\"https://uspex-team.org/en\">USPEX</a>, <a href=\"https://github.com/xtalopt/XtalOpt\">XtalOpt</a>, <a href=\"http://www.calypso.cn/\">CALYPSO</a>, <a href=\"https://www.mtg.msm.cam.ac.uk/Codes/AIRSS\">AIRSS</a>, <a href=\"https://wiki.fysik.dtu.dk/ase/ase/ga/ga.html#module-ase.ga\">ASE-GA</a>, <a href=\"https://github.com/henniggroup/GASP-python\">GASP</a></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.search_engine.SearchEngine.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.search_engine", "qualname": "SearchEngine.__init__", "type": "function", "doc": "<p>Sets up the search engine and its settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>composition : pymatgen.core.composition.Composition or str\n    The composition to run the evolutionary search for. Note that the\n    number of sites is fixed to what is set here. (Ca2N vs Ca4N2)\nworkflow : simmate.workflow_engine.workflow.Workflow or str (optional)\n    The workflow to run all individuals through. Note, the result_database\n    of this workflow will be treated as the individuals in this search.\n    The default is \"StagedRelaxation\"\nworkflow_command : str (optional)\n    The command that will be passed to the workflow.run() method.\nmax_structures : int (optional)\n    The maximum number of individuals that will be calculated before\n    stopping the search. The default is 3000.\nlimit_best_survival : int (optional)\n    The search is stopped when the best individual remains unbeaten for\n    this number of new individuals. The default is 250.\nsingleshot_sources : list of strings (optional)\n    TODO: This is not implemented yet\nnfirst_generation : int (optional)\n    No mutations or \"child\" individuals will be carried out until this\n    number of individuals have been calculated. The default is 20.\nnsteadystate : int (optional)\n    The total number of individuals from steady-state sources that will\n    be running/submitted at any given time. The default is 40.\nsteadystate_sources : List[Tuple[float, str]]\n    A list of tuples where each tuple is (percent, source). The percent\n    determines the number of steady stage calculations that will be\n    running for this at any given time. For example, 0.25 means\n    0.25*40=10 individuals will be running/submitted at all times. The\n    source can be from either the toolkit.creator or toolkit.transformations\n    modules. Don't change this default unless you know what you're doing!\nselector : str (optional)\n    The defualt method to use for choosing the parent individual(s). The\n    default is TruncatedSelection.</p>\n", "parameters": ["self", "composition", "workflow", "workflow_command", "max_structures", "limit_best_survival", "singleshot_sources", "nfirst_generation", "nsteadystate", "steadystate_sources", "selector", "labels"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.search_engine.SearchEngine.run", "modulename": "simmate.toolkit.structure_prediction.evolution.search_engine", "qualname": "SearchEngine.run", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "sleep_step"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.all", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.all.Selector", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors.all", "qualname": "Selector", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.all.Selector.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors.all", "qualname": "Selector.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.all.Selector.select", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors.all", "qualname": "Selector.select", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "nselect", "individuals", "fitness_column"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.all.TruncatedSelection", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors.all", "qualname": "TruncatedSelection", "type": "class", "doc": "<p>Truncated selection limits the parent selection to the top X% of individuals,\nand then within this top section, every individual has an equal chance of\nbeing selected.</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.all.TruncatedSelection.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors.all", "qualname": "TruncatedSelection.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "percentile", "ntruncate_min", "allow_duplicate"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.all.TruncatedSelection.select", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors.all", "qualname": "TruncatedSelection.select", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "nselect", "individuals", "fitness_column"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base", "qualname": "", "type": "module", "doc": "<p>Feel free to write your own StopCondition! It should follow the format shown here.</p>\n\n<p>-Jack</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base.StopCondition", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base", "qualname": "StopCondition", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base.StopCondition.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base", "qualname": "StopCondition.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base.StopCondition.check", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base", "qualname": "StopCondition.check", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base.BasicStopConditions", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base", "qualname": "BasicStopConditions", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base.BasicStopConditions.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base", "qualname": "BasicStopConditions.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "max_structures", "energy_limit", "same_min_structures"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base.BasicStopConditions.check", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions.base", "qualname": "BasicStopConditions.check", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_from_third_parties", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_from_third_parties", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_prototypes", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_prototypes", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures.AddStructures", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures", "qualname": "AddStructures", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures.AddStructures.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures", "qualname": "AddStructures.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "n_pending_limit", "n_add_structures"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures.AddStructures.check", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures", "qualname": "AddStructures.check", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures.AddStructures.action", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.add_structures", "qualname": "AddStructures.action", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.TriggeredAction", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "TriggeredAction", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.TriggeredAction.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "TriggeredAction.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.TriggeredAction.check", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "TriggeredAction.check", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.TriggeredAction.action", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "TriggeredAction.action", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.TriggeredAction.from_composition", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "TriggeredAction.from_composition", "type": "function", "doc": "<p></p>\n", "parameters": ["cls", "composition", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.InitStructures", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "InitStructures", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.InitStructures.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "InitStructures.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "n_initial_structures"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.InitStructures.check", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "InitStructures.check", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.InitStructures.action", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "InitStructures.action", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.AddStructures", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "AddStructures", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.AddStructures.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "AddStructures.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "n_pending_limit", "n_add_structures"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.AddStructures.check", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "AddStructures.check", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base.AddStructures.action", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions.base", "qualname": "AddStructures.action", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "search"], "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry", "modulename": "simmate.toolkit.symmetry", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.symmetry.wyckoff", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.loadWyckoffData", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "loadWyckoffData", "type": "function", "doc": "<p>This function loads the csv file containing all wyckoff site data into\na pandas dataframe. One column that we need is not directly stored in\nthe csv file though - this is site \"Availablility\", which can be inferred\nfrom the \"Coordinates\" column. Therefore, this function generates the\n\"Availability\" column before returning the pandas dataframe.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.findValidWyckoffCombos", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "findValidWyckoffCombos", "type": "function", "doc": "<p>Given a composition's stoichiometry (such as [4,4,12] for Mg4Si4O12) and\na single spacegroup (1-230), this function will find all valid wyckoff\ncombinations that can produce that stoichiometry.</p>\n\n<p>stoich = a list of integers representing the target stoichiometry\nspacegroup = an integer for the target spacegroup\nwy_data = pandas dataframe with wyckoff data (DON'T EDIT THIS!)</p>\n\n<p>NOTE: don't change the wy_data input! It is set in the header instead of\nrunning inside the function for time performance reasons. By putting it\nin the header, calling findValidWyckoffCombos() repetitively will not\nrepetitively call loadWyckoffData() which yields a massive\nspeed improvement.</p>\n", "parameters": ["stoich", "spacegroup", "wy_data"], "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.findValidWyckoffCombosForListofSpacegroups", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "findValidWyckoffCombosForListofSpacegroups", "type": "function", "doc": "<p>Find all wyckoff group combinations for specified list of spacegroups.\nThis function calls the findValidWyckoffCombos function repeatedly, so\nreally this is just a convience function.</p>\n\n<p>stoich = list of nsites for each element\n    (i.e. Mg4Si4O12 has stoich = [4,4,12])\nsg_include = list of spacegroups that we are interested in.\n    (default is all 230 spacegroups)\nsg_exclude = list of spacegroups that we should explicitly ignore</p>\n", "parameters": ["stoich", "sg_include", "sg_exclude"], "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.loadAsymmetricUnitData", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "loadAsymmetricUnitData", "type": "function", "doc": "<p>This function simply loads the csv file containing all asymmetric unit\ndata into a pandas dataframe. It then just grabs the column we need and\nturns it into a numpy array (for performance reasons) even though we lose\nthe spacegroup column - it's really just index+1 for each entry.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.loadSpecifiedUnitData", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "loadSpecifiedUnitData", "type": "function", "doc": "<p>THIS IS JUST A COPY/PASTE OF loadAsymmetricUnitData() WITH A DIFFERENT\nCOLUMN GRAB I NEED TO UPDATE THESE CSV FILES OR COMBINE THESE FUNCTIONS.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations", "modulename": "simmate.toolkit.transformations", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all", "modulename": "simmate.toolkit.transformations.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutation", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutation", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutation.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutation.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "min_exchanges", "max_exchanges"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutation.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutation.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutation.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutation.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutation.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutation.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutation.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutation.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure", "max_attempts"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrain", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrain", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrain.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrain.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "fixed_volume"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrain.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrain.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrain.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrain.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrain.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrain.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrain.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrain.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure", "max_attempts"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbation", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbation", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbation.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbation.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "min_displace", "max_displace"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbation.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbation.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbation.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbation.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbation.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbation.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbation.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbation.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.CoordinateOrderedPerturbation", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinateOrderedPerturbation", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinateOrderedPerturbation.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinateOrderedPerturbation.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.CoordinateOrderedPerturbation.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinateOrderedPerturbation.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinateOrderedPerturbation.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinateOrderedPerturbation.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinateOrderedPerturbation.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinateOrderedPerturbation.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinateOrderedPerturbation.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinateOrderedPerturbation.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure", "max_attempts"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.SoftMutationASE", "modulename": "simmate.toolkit.transformations.all", "qualname": "SoftMutationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.SoftMutationASE.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "SoftMutationASE.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "ratio_of_covalent_radii", "bounds", "use_tags", "used_modes_file"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.SoftMutationASE.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "SoftMutationASE.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.SoftMutationASE.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "SoftMutationASE.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.SoftMutationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "SoftMutationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.SoftMutationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "SoftMutationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.HeredityASE", "modulename": "simmate.toolkit.transformations.all", "qualname": "HeredityASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.HeredityASE.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "HeredityASE.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "ratio_of_covalent_radii"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.HeredityASE.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "HeredityASE.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.HeredityASE.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "HeredityASE.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.HeredityASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "HeredityASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.HeredityASE.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "HeredityASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structures"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbationASE", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbationASE.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbationASE.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "ratio_of_covalent_radii"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbationASE.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbationASE.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbationASE.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbationASE.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.CoordinatePerturbationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "CoordinatePerturbationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutationASE", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutationASE.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutationASE.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "ratio_of_covalent_radii"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutationASE.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutationASE.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutationASE.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutationASE.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.AtomicPermutationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "AtomicPermutationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.MirrorMutationASE", "modulename": "simmate.toolkit.transformations.all", "qualname": "MirrorMutationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.MirrorMutationASE.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "MirrorMutationASE.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "ratio_of_covalent_radii"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.MirrorMutationASE.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "MirrorMutationASE.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.MirrorMutationASE.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "MirrorMutationASE.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.MirrorMutationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "MirrorMutationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.MirrorMutationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "MirrorMutationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrainASE", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrainASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrainASE.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrainASE.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "ratio_of_covalent_radii"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrainASE.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrainASE.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrainASE.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrainASE.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrainASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrainASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.LatticeStrainASE.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "LatticeStrainASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.RotationalMutationASE", "modulename": "simmate.toolkit.transformations.all", "qualname": "RotationalMutationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.all.RotationalMutationASE.__init__", "modulename": "simmate.toolkit.transformations.all", "qualname": "RotationalMutationASE.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "ratio_of_covalent_radii"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.all.RotationalMutationASE.io_scale", "modulename": "simmate.toolkit.transformations.all", "qualname": "RotationalMutationASE.io_scale", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.RotationalMutationASE.ninput", "modulename": "simmate.toolkit.transformations.all", "qualname": "RotationalMutationASE.ninput", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.RotationalMutationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.all", "qualname": "RotationalMutationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.all.RotationalMutationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.all", "qualname": "RotationalMutationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.base", "modulename": "simmate.toolkit.transformations.base", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.io_type", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.io_type", "type": "variable", "doc": "<p>Should I do StructureTransformation, LatticeTransformation, and\nSiteTransformation subclasses? Here, io_type could be either\n'structure', 'lattice', or 'site' as to indicate the input.</p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.io_scale", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.io_scale", "type": "variable", "doc": "<p>The input/output type for the class.\nThis should be one of the following choices:\n    - one_to_one\n    - one_to_many\n    - many_to_one\n    - many_to_many # I have no examples of this yet</p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.use_multiprocessing", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.use_multiprocessing", "type": "variable", "doc": "<p>Whether or not this transformation can be done in parallel.\nSimply set to True or False.</p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.ninput", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.ninput", "type": "variable", "doc": "<p>Number of inputs required. For example, some transformations require\ntwo structures to be input. If one_to_* we know ninput = 1.</p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.apply_transformation", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators", "modulename": "simmate.toolkit.validators", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.base", "modulename": "simmate.toolkit.validators.base", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.base.Validator", "modulename": "simmate.toolkit.validators.base", "qualname": "Validator", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "simmate.toolkit.validators.base.Validator.check_structure", "modulename": "simmate.toolkit.validators.base", "qualname": "Validator.check_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.base.Validator.check_many_structures", "modulename": "simmate.toolkit.validators.base", "qualname": "Validator.check_many_structures", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structures", "progressbar", "mode"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint", "modulename": "simmate.toolkit.validators.fingerprint", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.crystalnn", "modulename": "simmate.toolkit.validators.fingerprint.crystalnn", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.crystalnn.CrystalNNFingerprint", "modulename": "simmate.toolkit.validators.fingerprint.crystalnn", "qualname": "CrystalNNFingerprint", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.crystalnn.CrystalNNFingerprint.__init__", "modulename": "simmate.toolkit.validators.fingerprint.crystalnn", "qualname": "CrystalNNFingerprint.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "on_fail", "max_fails", "cnn_options", "stat_options", "initial_structures", "parallel"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.crystalnn.CrystalNNFingerprint.check_structure", "modulename": "simmate.toolkit.validators.fingerprint.crystalnn", "qualname": "CrystalNNFingerprint.check_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure", "tolerance"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn.PartialCrystalNNFingerprint", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "qualname": "PartialCrystalNNFingerprint", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn.PartialCrystalNNFingerprint.__init__", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "qualname": "PartialCrystalNNFingerprint.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "stat_options", "structure_pool", "add_unique_to_pool", "crystalnn_options"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn.PartialCrystalNNFingerprint.check_structure", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "qualname": "PartialCrystalNNFingerprint.check_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure", "tolerance"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn.PartialCrystalNNFingerprint.update_fingerprint_database", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "qualname": "PartialCrystalNNFingerprint.update_fingerprint_database", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.prdf", "modulename": "simmate.toolkit.validators.fingerprint.prdf", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.prdf.PartialRDFFingerprint", "modulename": "simmate.toolkit.validators.fingerprint.prdf", "qualname": "PartialRDFFingerprint", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.prdf.PartialRDFFingerprint.__init__", "modulename": "simmate.toolkit.validators.fingerprint.prdf", "qualname": "PartialRDFFingerprint.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "on_fail", "max_fails", "cutoff", "bin_size", "initial_structures", "parallel"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.prdf.PartialRDFFingerprint.check_structure", "modulename": "simmate.toolkit.validators.fingerprint.prdf", "qualname": "PartialRDFFingerprint.check_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure", "tolerance"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.prdf.PartialRDFFingerprint.point_next_step", "modulename": "simmate.toolkit.validators.fingerprint.prdf", "qualname": "PartialRDFFingerprint.point_next_step", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "attempt"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.rdf", "modulename": "simmate.toolkit.validators.fingerprint.rdf", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.rdf.RDFFingerprint", "modulename": "simmate.toolkit.validators.fingerprint.rdf", "qualname": "RDFFingerprint", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.rdf.RDFFingerprint.__init__", "modulename": "simmate.toolkit.validators.fingerprint.rdf", "qualname": "RDFFingerprint.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "on_fail", "max_fails", "cutoff", "bin_size", "initial_structures", "parallel"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.rdf.RDFFingerprint.check_structure", "modulename": "simmate.toolkit.validators.fingerprint.rdf", "qualname": "RDFFingerprint.check_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure", "tolerance"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.rdf.RDFFingerprint.point_next_step", "modulename": "simmate.toolkit.validators.fingerprint.rdf", "qualname": "RDFFingerprint.point_next_step", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "attempt"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.structure", "modulename": "simmate.toolkit.validators.structure", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistance", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistance", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistance.__init__", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistance.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "distance_cutoff"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistance.check_structure", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistance.check_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistanceMatrix", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistanceMatrix", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistanceMatrix.__init__", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistanceMatrix.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "composition", "radius_method", "packing_factor"], "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistanceMatrix.check_structure", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistanceMatrix.check_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "structure"], "funcdef": "def"}, {"fullname": "simmate.utilities", "modulename": "simmate.utilities", "qualname": "", "type": "module", "doc": "<p>This file hosts common functions that are used throughout Simmate</p>\n"}, {"fullname": "simmate.utilities.get_doc_from_readme", "modulename": "simmate.utilities", "qualname": "get_doc_from_readme", "type": "function", "doc": "<p>Loads the docstring from a README.rst file in the same directory.</p>\n\n<p>This is commonly used in __init__.py files because we like having our\ndocumentation isolated (so that github renders it).</p>\n\n<p>To use, simply pass the file property:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.utilities import get_doc_from_readme\n\n__doc__ = get_doc_from_readme(__file__)\n</code></pre>\n\n<p>This is an alternative to using \"include\" in rst files, which <a href=\"https://pdoc.dev/docs/pdoc.html#include-markdown-files\">pdoc recommends</a>.\nWe prefer this utility because it allows Spyder to load the docs -- although\nit's slower in production (bc of opening/closing files).</p>\n", "parameters": ["file"], "funcdef": "def"}, {"fullname": "simmate.utilities.get_directory", "modulename": "simmate.utilities", "qualname": "get_directory", "type": "function", "doc": "<p>Initializes a directory.</p>\n\n<p>There are many cases where the user can choose their working directory\nfor a calculation, and they may want to provide their directory in various\nformats. This includes... None, a string, or a TemporaryDirectory instance.\nBased on the input, this function does the following:\n  None --> returns the full path to a new folder inside python's\n            current working directory named \"simmate-task-<randomID>\"\n  TemporaryDirectory --> returns the full path to the given temp directory\n  str --> makes the directory if it doesnt exist and then returns the path</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>directory : Union[str,tempfile.TemporaryDirectory], optional\n    Either None, a path to the directory, or a tempdir. The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>directory : str\n    The path to the initialized directory</p>\n", "parameters": ["directory"], "funcdef": "def"}, {"fullname": "simmate.utilities.make_archive", "modulename": "simmate.utilities", "qualname": "make_archive", "type": "function", "doc": "<p>Compresses the directory to a zip file of the same name. After compressing,\nit then deletes the original directory.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>directory : str\n    Path to the folder that should be archived</p>\n", "parameters": ["directory"], "funcdef": "def"}, {"fullname": "simmate.utilities.empty_directory", "modulename": "simmate.utilities", "qualname": "empty_directory", "type": "function", "doc": "<p>Deletes all files and folders within a directory, except for those provided\nto the files_to_keep parameter.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>directory : str\n    base directory that should be emptied\nfiles_to_keep : List[str], optional\n    A list of file and folder names within the base directory that should\n    not be deleted. The default is [].</p>\n", "parameters": ["directory", "files_to_keep"], "funcdef": "def"}, {"fullname": "simmate.utilities.get_chemical_subsystems", "modulename": "simmate.utilities", "qualname": "get_chemical_subsystems", "type": "function", "doc": "<p></p>\n", "parameters": ["chemical_system"], "funcdef": "def"}, {"fullname": "simmate.utilities.get_sanitized_structure", "modulename": "simmate.utilities", "qualname": "get_sanitized_structure", "type": "function", "doc": "<p>Run symmetry analysis and \"sanitization\" on the pymatgen structure</p>\n", "parameters": ["structure"], "funcdef": "def"}, {"fullname": "simmate.utilities.estimate_radii", "modulename": "simmate.utilities", "qualname": "estimate_radii", "type": "function", "doc": "<p></p>\n", "parameters": ["composition", "radius_method"], "funcdef": "def"}, {"fullname": "simmate.utilities.estimate_volume", "modulename": "simmate.utilities", "qualname": "estimate_volume", "type": "function", "doc": "<p></p>\n", "parameters": ["composition", "radius_method", "packing_factor"], "funcdef": "def"}, {"fullname": "simmate.utilities.distance_matrix", "modulename": "simmate.utilities", "qualname": "distance_matrix", "type": "function", "doc": "<p></p>\n", "parameters": ["composition", "radius_method", "packing_factor"], "funcdef": "def"}, {"fullname": "simmate.visualization", "modulename": "simmate.visualization", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.visualization.structure", "modulename": "simmate.visualization.structure", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.visualization.structure.blender", "modulename": "simmate.visualization.structure.blender", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.visualization.structure.blender.make_blender_structure", "modulename": "simmate.visualization.structure.blender", "qualname": "make_blender_structure", "type": "function", "doc": "<p></p>\n", "parameters": ["structure", "filename"], "funcdef": "def"}, {"fullname": "simmate.visualization.structure.blender.serialize_structure_sites", "modulename": "simmate.visualization.structure.blender", "qualname": "serialize_structure_sites", "type": "function", "doc": "<p></p>\n", "parameters": ["structure"], "funcdef": "def"}, {"fullname": "simmate.website", "modulename": "simmate.website", "qualname": "", "type": "module", "doc": "<h2 id=\"the-simmate-website\">The Simmate Website</h2>\n\n<p>This module hosts everything for the website framework/interface. The folder/file structure of this module is the most rigid because it follows the Django opinionated format. The key thing that is moved/missing is the database ORM, which is instead located in the simmate.database module.</p>\n"}, {"fullname": "simmate.website.accounts", "modulename": "simmate.website.accounts", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.accounts.apps", "modulename": "simmate.website.accounts.apps", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.accounts.apps.AccountsConfig", "modulename": "simmate.website.accounts.apps", "qualname": "AccountsConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n"}, {"fullname": "simmate.website.accounts.apps.AccountsConfig.name", "modulename": "simmate.website.accounts.apps", "qualname": "AccountsConfig.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.accounts.urls", "modulename": "simmate.website.accounts.urls", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.accounts.views", "modulename": "simmate.website.accounts.views", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.accounts.views.register", "modulename": "simmate.website.accounts.views", "qualname": "register", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.accounts.views.profile", "modulename": "simmate.website.accounts.views", "qualname": "profile", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.accounts.views.loginstatus", "modulename": "simmate.website.accounts.views", "qualname": "loginstatus", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.core", "modulename": "simmate.website.core", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.core.asgi", "modulename": "simmate.website.core.asgi", "qualname": "", "type": "module", "doc": "<p>ASGI config for project.</p>\n\n<p>It exposes the ASGI callable as a module-level variable named <code>application</code>.</p>\n\n<p>For more information on this file, see\nhttps://docs.djangoproject.com/en/3.0/howto/deployment/asgi/</p>\n"}, {"fullname": "simmate.website.core.urls", "modulename": "simmate.website.core.urls", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.core.views", "modulename": "simmate.website.core.views", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.core.views.home", "modulename": "simmate.website.core.views", "qualname": "home", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.core.views.extras", "modulename": "simmate.website.core.views", "qualname": "extras", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.core.wsgi", "modulename": "simmate.website.core.wsgi", "qualname": "", "type": "module", "doc": "<p>WSGI config for project.</p>\n\n<p>It exposes the WSGI callable as a module-level variable named <code>application</code>.</p>\n\n<p>For more information on this file, see\nhttps://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/</p>\n"}, {"fullname": "simmate.website.local_calculations", "modulename": "simmate.website.local_calculations", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.apps", "modulename": "simmate.website.local_calculations.apps", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.apps.LocalCalculationsConfig", "modulename": "simmate.website.local_calculations.apps", "qualname": "LocalCalculationsConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n"}, {"fullname": "simmate.website.local_calculations.apps.LocalCalculationsConfig.name", "modulename": "simmate.website.local_calculations.apps", "qualname": "LocalCalculationsConfig.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.forms", "modulename": "simmate.website.local_calculations.forms", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.forms.MITRelaxationForm", "modulename": "simmate.website.local_calculations.forms", "qualname": "MITRelaxationForm", "type": "class", "doc": "<p>A collection of Fields, plus their associated data.</p>\n"}, {"fullname": "simmate.website.local_calculations.forms.MITRelaxationForm.clean_structure_file", "modulename": "simmate.website.local_calculations.forms", "qualname": "MITRelaxationForm.clean_structure_file", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.website.local_calculations.forms.MITRelaxationForm.clean_labels", "modulename": "simmate.website.local_calculations.forms", "qualname": "MITRelaxationForm.clean_labels", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.website.local_calculations.forms.MITRelaxationForm.media", "modulename": "simmate.website.local_calculations.forms", "qualname": "MITRelaxationForm.media", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.forms.MITRelaxationForm.declared_fields", "modulename": "simmate.website.local_calculations.forms", "qualname": "MITRelaxationForm.declared_fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.forms.MITRelaxationForm.base_fields", "modulename": "simmate.website.local_calculations.forms", "qualname": "MITRelaxationForm.base_fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.migrations", "modulename": "simmate.website.local_calculations.migrations", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.migrations.0001_initial", "modulename": "simmate.website.local_calculations.migrations.0001_initial", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.migrations.0001_initial.Migration", "modulename": "simmate.website.local_calculations.migrations.0001_initial", "qualname": "Migration", "type": "class", "doc": "<p>The base class for all migrations.</p>\n\n<p>Migration files will import this from django.db.migrations.Migration\nand subclass it as a class called Migration. It will have one or more\nof the following attributes:</p>\n\n<ul>\n<li>operations: A list of Operation instances, probably from django.db.migrations.operations</li>\n<li>dependencies: A list of tuples of (app_path, migration_name)</li>\n<li>run_before: A list of tuples of (app_path, migration_name)</li>\n<li>replaces: A list of migration_names</li>\n</ul>\n\n<p>Note that all migrations come out of migrations and into the Loader or\nGraph as instances, having been initialized with their app label and name.</p>\n"}, {"fullname": "simmate.website.local_calculations.migrations.0001_initial.Migration.initial", "modulename": "simmate.website.local_calculations.migrations.0001_initial", "qualname": "Migration.initial", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.migrations.0001_initial.Migration.dependencies", "modulename": "simmate.website.local_calculations.migrations.0001_initial", "qualname": "Migration.dependencies", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.migrations.0001_initial.Migration.operations", "modulename": "simmate.website.local_calculations.migrations.0001_initial", "qualname": "Migration.operations", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.models", "modulename": "simmate.website.local_calculations.models", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.urls", "modulename": "simmate.website.local_calculations.urls", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.views", "modulename": "simmate.website.local_calculations.views", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.local_calculations.views.all_local_calculations", "modulename": "simmate.website.local_calculations.views", "qualname": "all_local_calculations", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.local_calculations.views.relaxations", "modulename": "simmate.website.local_calculations.views", "qualname": "relaxations", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.local_calculations.views.mit_about", "modulename": "simmate.website.local_calculations.views", "qualname": "mit_about", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.local_calculations.views.mit_submit", "modulename": "simmate.website.local_calculations.views", "qualname": "mit_submit", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.local_calculations.views.mit_all", "modulename": "simmate.website.local_calculations.views", "qualname": "mit_all", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.local_calculations.views.mit_single", "modulename": "simmate.website.local_calculations.views", "qualname": "mit_single", "type": "function", "doc": "<p></p>\n", "parameters": ["request", "mitrelax_id"], "funcdef": "def"}, {"fullname": "simmate.website.prototypes", "modulename": "simmate.website.prototypes", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.apps", "modulename": "simmate.website.prototypes.apps", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.apps.PrototypesConfig", "modulename": "simmate.website.prototypes.apps", "qualname": "PrototypesConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n"}, {"fullname": "simmate.website.prototypes.apps.PrototypesConfig.name", "modulename": "simmate.website.prototypes.apps", "qualname": "PrototypesConfig.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.migrations", "modulename": "simmate.website.prototypes.migrations", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial", "modulename": "simmate.website.prototypes.migrations.0001_initial", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial.Migration", "modulename": "simmate.website.prototypes.migrations.0001_initial", "qualname": "Migration", "type": "class", "doc": "<p>The base class for all migrations.</p>\n\n<p>Migration files will import this from django.db.migrations.Migration\nand subclass it as a class called Migration. It will have one or more\nof the following attributes:</p>\n\n<ul>\n<li>operations: A list of Operation instances, probably from django.db.migrations.operations</li>\n<li>dependencies: A list of tuples of (app_path, migration_name)</li>\n<li>run_before: A list of tuples of (app_path, migration_name)</li>\n<li>replaces: A list of migration_names</li>\n</ul>\n\n<p>Note that all migrations come out of migrations and into the Loader or\nGraph as instances, having been initialized with their app label and name.</p>\n"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial.Migration.initial", "modulename": "simmate.website.prototypes.migrations.0001_initial", "qualname": "Migration.initial", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial.Migration.dependencies", "modulename": "simmate.website.prototypes.migrations.0001_initial", "qualname": "Migration.dependencies", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial.Migration.operations", "modulename": "simmate.website.prototypes.migrations.0001_initial", "qualname": "Migration.operations", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.models", "modulename": "simmate.website.prototypes.models", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api", "modulename": "simmate.website.rest_api", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.urls", "modulename": "simmate.website.rest_api.urls", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views", "modulename": "simmate.website.rest_api.views", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectSerializer", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectSerializer.Meta", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectSerializer.Meta.__init__", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectSerializer.Meta.model", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectSerializer.Meta.model", "type": "class", "doc": "<p>MaterialsProjectStructure(structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, id)</p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectSerializer.Meta.fields", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectViewSet", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectViewSet.queryset", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectViewSet.queryset", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectViewSet.serializer_class", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectViewSet.filterset_fields", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectViewSet.name", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectViewSet.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectViewSet.description", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectViewSet.description", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectViewSet.suffix", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectViewSet.suffix", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectViewSet.detail", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectViewSet.detail", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.MaterialsProjectViewSet.basename", "modulename": "simmate.website.rest_api.views", "qualname": "MaterialsProjectViewSet.basename", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisSerializer", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisSerializer.Meta", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisSerializer.Meta.__init__", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.website.rest_api.views.JarvisSerializer.Meta.model", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisSerializer.Meta.model", "type": "class", "doc": "<p>Base Info</p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisSerializer.Meta.fields", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisViewSet", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisViewSet.queryset", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisViewSet.queryset", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisViewSet.serializer_class", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisViewSet.filterset_fields", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisViewSet.name", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisViewSet.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisViewSet.description", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisViewSet.description", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisViewSet.suffix", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisViewSet.suffix", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisViewSet.detail", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisViewSet.detail", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.JarvisViewSet.basename", "modulename": "simmate.website.rest_api.views", "qualname": "JarvisViewSet.basename", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowSerializer", "modulename": "simmate.website.rest_api.views", "qualname": "AflowSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.AflowSerializer.Meta", "modulename": "simmate.website.rest_api.views", "qualname": "AflowSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowSerializer.Meta.__init__", "modulename": "simmate.website.rest_api.views", "qualname": "AflowSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.website.rest_api.views.AflowSerializer.Meta.model", "modulename": "simmate.website.rest_api.views", "qualname": "AflowSerializer.Meta.model", "type": "class", "doc": "<p>AflowStructure(structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, id, final_energy, final_energy_per_atom, formation_energy_per_atom, band_gap, energy_above_hull)</p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowSerializer.Meta.fields", "modulename": "simmate.website.rest_api.views", "qualname": "AflowSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowViewSet", "modulename": "simmate.website.rest_api.views", "qualname": "AflowViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowViewSet.queryset", "modulename": "simmate.website.rest_api.views", "qualname": "AflowViewSet.queryset", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowViewSet.serializer_class", "modulename": "simmate.website.rest_api.views", "qualname": "AflowViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.AflowViewSet.filterset_fields", "modulename": "simmate.website.rest_api.views", "qualname": "AflowViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowViewSet.name", "modulename": "simmate.website.rest_api.views", "qualname": "AflowViewSet.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowViewSet.description", "modulename": "simmate.website.rest_api.views", "qualname": "AflowViewSet.description", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowViewSet.suffix", "modulename": "simmate.website.rest_api.views", "qualname": "AflowViewSet.suffix", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowViewSet.detail", "modulename": "simmate.website.rest_api.views", "qualname": "AflowViewSet.detail", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.AflowViewSet.basename", "modulename": "simmate.website.rest_api.views", "qualname": "AflowViewSet.basename", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdSerializer", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdSerializer.Meta", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdSerializer.Meta.__init__", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.website.rest_api.views.OqmdSerializer.Meta.model", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdSerializer.Meta.model", "type": "class", "doc": "<p>OqmdStructure(structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, id, final_energy, energy_above_hull, band_gap)</p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdSerializer.Meta.fields", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdViewSet", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdViewSet.queryset", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdViewSet.queryset", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdViewSet.serializer_class", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdViewSet.filterset_fields", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdViewSet.name", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdViewSet.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdViewSet.description", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdViewSet.description", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdViewSet.suffix", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdViewSet.suffix", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdViewSet.detail", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdViewSet.detail", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.OqmdViewSet.basename", "modulename": "simmate.website.rest_api.views", "qualname": "OqmdViewSet.basename", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.CodSerializer", "modulename": "simmate.website.rest_api.views", "qualname": "CodSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.CodSerializer.Meta", "modulename": "simmate.website.rest_api.views", "qualname": "CodSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.CodSerializer.Meta.__init__", "modulename": "simmate.website.rest_api.views", "qualname": "CodSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "simmate.website.rest_api.views.CodSerializer.Meta.model", "modulename": "simmate.website.rest_api.views", "qualname": "CodSerializer.Meta.model", "type": "class", "doc": "<p>CodStructure(structure_string, nsites, nelements, elements, density, density_atomic, volume, volume_molar, spacegroup, id, chemical_system, formula_full, formula_reduced, formula_anonymous, is_ordered, has_implicit_hydrogens)</p>\n"}, {"fullname": "simmate.website.rest_api.views.CodSerializer.Meta.fields", "modulename": "simmate.website.rest_api.views", "qualname": "CodSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.CodViewSet", "modulename": "simmate.website.rest_api.views", "qualname": "CodViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n"}, {"fullname": "simmate.website.rest_api.views.CodViewSet.queryset", "modulename": "simmate.website.rest_api.views", "qualname": "CodViewSet.queryset", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.CodViewSet.serializer_class", "modulename": "simmate.website.rest_api.views", "qualname": "CodViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n"}, {"fullname": "simmate.website.rest_api.views.CodViewSet.filterset_fields", "modulename": "simmate.website.rest_api.views", "qualname": "CodViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.CodViewSet.name", "modulename": "simmate.website.rest_api.views", "qualname": "CodViewSet.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.CodViewSet.description", "modulename": "simmate.website.rest_api.views", "qualname": "CodViewSet.description", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.CodViewSet.suffix", "modulename": "simmate.website.rest_api.views", "qualname": "CodViewSet.suffix", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.CodViewSet.detail", "modulename": "simmate.website.rest_api.views", "qualname": "CodViewSet.detail", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.rest_api.views.CodViewSet.basename", "modulename": "simmate.website.rest_api.views", "qualname": "CodViewSet.basename", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer", "modulename": "simmate.website.structure_viewer", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer.apps", "modulename": "simmate.website.structure_viewer.apps", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer.apps.StructureViewerConfig", "modulename": "simmate.website.structure_viewer.apps", "qualname": "StructureViewerConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n"}, {"fullname": "simmate.website.structure_viewer.apps.StructureViewerConfig.name", "modulename": "simmate.website.structure_viewer.apps", "qualname": "StructureViewerConfig.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer.urls", "modulename": "simmate.website.structure_viewer.urls", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer.views", "modulename": "simmate.website.structure_viewer.views", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer.views.structure_viewer", "modulename": "simmate.website.structure_viewer.views", "qualname": "structure_viewer", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.third_parties", "modulename": "simmate.website.third_parties", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.apps", "modulename": "simmate.website.third_parties.apps", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.apps.ThirdPartyConfig", "modulename": "simmate.website.third_parties.apps", "qualname": "ThirdPartyConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n"}, {"fullname": "simmate.website.third_parties.apps.ThirdPartyConfig.name", "modulename": "simmate.website.third_parties.apps", "qualname": "ThirdPartyConfig.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.forms", "modulename": "simmate.website.third_parties.forms", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm", "type": "class", "doc": "<p>A collection of Fields, plus their associated data.</p>\n"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.clean_chemical_system", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.clean_chemical_system", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.media", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.media", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.declared_fields", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.declared_fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.base_fields", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.base_fields", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.migrations", "modulename": "simmate.website.third_parties.migrations", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial", "modulename": "simmate.website.third_parties.migrations.0001_initial", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial.Migration", "modulename": "simmate.website.third_parties.migrations.0001_initial", "qualname": "Migration", "type": "class", "doc": "<p>The base class for all migrations.</p>\n\n<p>Migration files will import this from django.db.migrations.Migration\nand subclass it as a class called Migration. It will have one or more\nof the following attributes:</p>\n\n<ul>\n<li>operations: A list of Operation instances, probably from django.db.migrations.operations</li>\n<li>dependencies: A list of tuples of (app_path, migration_name)</li>\n<li>run_before: A list of tuples of (app_path, migration_name)</li>\n<li>replaces: A list of migration_names</li>\n</ul>\n\n<p>Note that all migrations come out of migrations and into the Loader or\nGraph as instances, having been initialized with their app label and name.</p>\n"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial.Migration.initial", "modulename": "simmate.website.third_parties.migrations.0001_initial", "qualname": "Migration.initial", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial.Migration.dependencies", "modulename": "simmate.website.third_parties.migrations.0001_initial", "qualname": "Migration.dependencies", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial.Migration.operations", "modulename": "simmate.website.third_parties.migrations.0001_initial", "qualname": "Migration.operations", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.models", "modulename": "simmate.website.third_parties.models", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.templatetags", "modulename": "simmate.website.third_parties.templatetags", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.templatetags.chemical_formula_filter", "modulename": "simmate.website.third_parties.templatetags.chemical_formula_filter", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.templatetags.chemical_formula_filter.formula_to_html", "modulename": "simmate.website.third_parties.templatetags.chemical_formula_filter", "qualname": "formula_to_html", "type": "function", "doc": "<p>Converts a chemical formula to html format by wrapping numbers with a\nsubscript tag. For example, \"Y2CF2\" will be turned into \"Y<sub>2</sub>CF<sub>2</sub>\"\nso that it looks nice in a webpage</p>\n", "parameters": ["formula_str"], "funcdef": "def"}, {"fullname": "simmate.website.third_parties.urls", "modulename": "simmate.website.third_parties.urls", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views", "modulename": "simmate.website.third_parties.views", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views.home", "modulename": "simmate.website.third_parties.views", "qualname": "home", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.website.workflow_execution", "modulename": "simmate.website.workflow_execution", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.apps", "modulename": "simmate.website.workflow_execution.apps", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.apps.WorkflowExecutionConfig", "modulename": "simmate.website.workflow_execution.apps", "qualname": "WorkflowExecutionConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n"}, {"fullname": "simmate.website.workflow_execution.apps.WorkflowExecutionConfig.name", "modulename": "simmate.website.workflow_execution.apps", "qualname": "WorkflowExecutionConfig.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.migrations", "modulename": "simmate.website.workflow_execution.migrations", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial.Migration", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "qualname": "Migration", "type": "class", "doc": "<p>The base class for all migrations.</p>\n\n<p>Migration files will import this from django.db.migrations.Migration\nand subclass it as a class called Migration. It will have one or more\nof the following attributes:</p>\n\n<ul>\n<li>operations: A list of Operation instances, probably from django.db.migrations.operations</li>\n<li>dependencies: A list of tuples of (app_path, migration_name)</li>\n<li>run_before: A list of tuples of (app_path, migration_name)</li>\n<li>replaces: A list of migration_names</li>\n</ul>\n\n<p>Note that all migrations come out of migrations and into the Loader or\nGraph as instances, having been initialized with their app label and name.</p>\n"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial.Migration.initial", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "qualname": "Migration.initial", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial.Migration.dependencies", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "qualname": "Migration.dependencies", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial.Migration.operations", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "qualname": "Migration.operations", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.models", "modulename": "simmate.website.workflow_execution.models", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.urls", "modulename": "simmate.website.workflow_execution.urls", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.views", "modulename": "simmate.website.workflow_execution.views", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.views.home", "modulename": "simmate.website.workflow_execution.views", "qualname": "home", "type": "function", "doc": "<p></p>\n", "parameters": ["request"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine", "modulename": "simmate.workflow_engine", "qualname": "", "type": "module", "doc": "<h2 id=\"the-simmate-workflow-engine\">The Simmate Workflow Engine</h2>\n\n<p>This module defines common workflow tasks, error handling, and job restarts. It is ment for users that want to create custom workflows from scratch. Use of this module is closely tied with <a href=\"https://github.com/jacksund/simmate/tree/main/tutorials\">Tutorials 08 and 09</a>.</p>\n\n<p>This module is only meant for advanced users. Beginners should instead start by checking if there is already a workflow built for them (in <code>simmate.workflows</code>) or if there are common tasks already built for the program they are using (for example, VASP users can check <code>simmate.calculators.vasp</code>).</p>\n"}, {"fullname": "simmate.workflow_engine.error_handler", "modulename": "simmate.workflow_engine.error_handler", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler", "type": "class", "doc": "<p>Abstract base class for an ErrorHandler. These handlers should be used in\ncombination with SupervisedStagedShellTasks.</p>\n"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.is_monitor", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.is_monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.is_terminating", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.is_terminating", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.filename_to_check", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.filename_to_check", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.possible_error_messages", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.possible_error_messages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.check", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have .check() functions that do one\nof the following:\n    (1) returns True when the error is there and False otherwise\n    (2) the ErrorHandler includes variations of a particular error, where\n        it returns a label such as \"Scenario 2\" that .correct() can use.\n        And in cases where there's no error, either False or None is returned.</p>\n\n<p>This method can be overwritten, but we have a \"default\" function below that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.correct", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.name", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.name", "type": "variable", "doc": "<p>A nice string name for the handler. By default it just returns the name\nof this class.</p>\n"}, {"fullname": "simmate.workflow_engine.execution", "modulename": "simmate.workflow_engine.execution", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database", "modulename": "simmate.workflow_engine.execution.database", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem", "type": "class", "doc": "<p>Base info</p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.fxn", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.fxn", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.args", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.args", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.kwargs", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.kwargs", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.result", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.result", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.PENDING", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.PENDING", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.RUNNING", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.RUNNING", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.CANCELLED", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.CANCELLED", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.FINISHED", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.FINISHED", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.label", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.label", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.do_not_call_in_templates", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.do_not_call_in_templates", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.status", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.status", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.DoesNotExist", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.MultipleObjectsReturned", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.get_status_display", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.get_status_display", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.id", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor", "type": "class", "doc": "<p>Sets up a connection to the queue database. Unlike normal executors,\nthis does not set up any workers -- you must launch Worker instances\nelsewhere. It's primary role is to connect to the queue database\nand generate futures for workers. Therefore, think of the Executor\nas how you SUBMIT tasks and then the Worker is how you RUN jobs. You\nneed both classes to have the setup working properly.</p>\n\n<p>Only use this Executor when Dask can't solve your problem! It's main\nuse it to bypass university HPC cluster's firewalls because here worker\nsignals are one-directional -- that is they query a database and there\nis never a signal sent to the worker like other executors do. Thus\nwe can have workers anywhere we'd like as long as they have access\nto internet - so even multiple HPC clusters will work. At the moment,\nthe executor has no idea how many workers exist and their state. I may\nadd a \"worker heartbeat\" table to the queue database for the executor\nto read and run managerial tasks based off though.</p>\n"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.submit", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.submit", "type": "function", "doc": "<p>Submit a function to the executor for execution. Returns a future-like object.</p>\n\n<p>Args:\n    - fn (Callable): function that is being submitted for execution\n    - <em>args (Any): arguments to be passed to <code>fn</code>\n    - extra_context (dict, optional): an optional dictionary with extra information\n        about the submitted task\n    - *</em>kwargs (Any): keyword arguments to be passed to <code>fn</code></p>\n\n<p>Returns:\n    - Any: a future-like object</p>\n", "parameters": ["self", "fxn", "args", "extra_context", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.map", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.map", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "fxn", "iterables", "timeout", "chunksize"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.shutdown", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.shutdown", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "wait", "cancel_futures"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.wait", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.wait", "type": "function", "doc": "<p>Waits for all futures to complete before returning a list of their results</p>\n", "parameters": ["self", "futures"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.queue_size", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.queue_size", "type": "function", "doc": "<p>Return the approximate size of the queue.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.clear_queue", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.clear_queue", "type": "function", "doc": "<p>Empties the WorkItem database table and delete everything. This will\nnot stop the workers if they are in the middle of a job though.</p>\n", "parameters": ["self", "are_you_sure"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.clear_finished", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.clear_finished", "type": "function", "doc": "<p>Empties the WorkItem database table and delete everything. This will\nnot stop the workers if they are in the middle of a job though.</p>\n", "parameters": ["self", "are_you_sure"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future", "modulename": "simmate.workflow_engine.execution.future", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.__init__", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "pk"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.cancel", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.cancel", "type": "function", "doc": "<p>Attempt to cancel the call. If the call is currently being executed or\nfinished running and cannot be cancelled then the method will return\nFalse, otherwise the call will be cancelled and the method will return\nTrue.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.cancelled", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.cancelled", "type": "function", "doc": "<p>Return True if the call was successfully cancelled.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.running", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.running", "type": "function", "doc": "<p>Return True if the call is currently being executed and cannot be cancelled.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.done", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.done", "type": "function", "doc": "<p>Return True if the call was successfully cancelled or finished running.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.result", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.result", "type": "function", "doc": "<p>Return the value returned by the call. If the call hasn\u2019t yet completed\nthen this method will wait up to timeout seconds. If the call hasn\u2019t\ncompleted in timeout seconds, then a concurrent.futures.TimeoutError\nwill be raised. timeout can be an int or float. If timeout is not\nspecified or None, there is no limit to the wait time.</p>\n\n<p>If the future is cancelled before completing then CancelledError\nwill be raised.</p>\n\n<p>If the call raised, this method will raise the same exception.</p>\n", "parameters": ["self", "timeout", "sleep_step"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.CancelledError", "modulename": "simmate.workflow_engine.execution.future", "qualname": "CancelledError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n"}, {"fullname": "simmate.workflow_engine.execution.worker", "modulename": "simmate.workflow_engine.execution.worker", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.worker.SimmateWorker", "modulename": "simmate.workflow_engine.execution.worker", "qualname": "SimmateWorker", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.worker.SimmateWorker.__init__", "modulename": "simmate.workflow_engine.execution.worker", "qualname": "SimmateWorker.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "nitems_max", "timeout", "close_on_empty_queue", "waittime_on_empty_queue"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.worker.SimmateWorker.start", "modulename": "simmate.workflow_engine.execution.worker", "qualname": "SimmateWorker.start", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.worker.SimmateWorker.queue_size", "modulename": "simmate.workflow_engine.execution.worker", "qualname": "SimmateWorker.queue_size", "type": "function", "doc": "<p>Return the approximate size of the queue.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.tasks", "modulename": "simmate.workflow_engine.tasks", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask", "type": "class", "doc": "<h2 id=\"introduction-to-the-sss-task\">Introduction to the \"SSS Task\"</h2>\n\n<p>This class contains the core functionality to <em>supervise</em> a <em>staged</em> task\ninvolving some <em>shell</em> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<pre><code>- setup = writing any input files required for the program\n- execution = actually calling the command and running our program\n- workup = loading data from output files back into python\n</code></pre>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<p>TODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...</p>\n\n<ul>\n<li>Write Input Files based on custom+defualt settings</li>\n<li>Run the calculation by calling the program</li>\n<li>Load ouput files</li>\n<li>check for errors</li>\n<li>[correct them, rerun]</li>\n<li>postprocess/analysis</li>\n</ul>\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run()</p>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules. For\na full (and advanced) example, take a look at...</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simmate</span><span class=\"o\">.</span><span class=\"n\">calculators</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">VaspTask</span>\n</code></pre></div>\n\n<p>And here's an example of inheriting and then running a task:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflow_engine.tasks.supervised_staged_shell_task import (\n    SupervisedStagedShellTask as SSSTask,\n)\nfrom example.error_handlers import PossibleError1, PossibleError2\n\n\nclass ExampleTask(SSSTask):\n\n    command = \"echo example\"  # just prints out \"example\"\n    max_corrections = 7\n    error_handlers = [PossibleError1, PossibleError2]\n    polling_timestep = 0.1\n    monitor_freq = 10\n    some_new_setting = 123\n\n    def setup(self, structure, directory):  # &lt;-- MUST have these two args\n        print(\"I'm setting things up!\")\n        print(f\"My new setting is {some_new_setting}\")\n\n    def workup(self, directory):  # &lt;-- MUST have this arg\n        print(\"I'm working things up!\")\n\n\ntask = ExampleTask()\nresult = task.run()\n</code></pre>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.__init__", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.__init__", "type": "function", "doc": "<p>Creates a task instance of this class. The parameters passed will be the\nsame every time you call the task.run() method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>structure : pymatgen.core.structure.Structure (optional)\n    The structure to use for the task, if one is required. Typically, this\n    class is ran for multiple structures, where you can pass this\n    option to the task.run() method instead.\ncommand : str (optional)\n    The command that will be called during execution.\ndirectory : str (optional)\n    The directory to run everything in. This is passed to the ulitities\n    function simmate.ulitities.get_directory\nerror_handlers : List[ErrorHandler] (optional)\n    The list of error handler objects to use. These should be listing in\n    order of priority, where to highest priority is first. If one handler\n    is triggered, the correction will be applied and none of the\n    following handlers will be checked.\nmax_corrections : int (optional)\n    The maximum number of times that corrections will be made before\n    giving up on the calculation. Note, once this limit is exceeded, the\n    error is stored without correcting or restarting the run.\nmonitor : bool (optional)\n    Whether to run monitor handlers while the command runs. False means\n    wait until the job has completed.\npolling_timestep : float (optional)\n    If we are monitoring the job for errors while it runs, this is how often\n    (in seconds) we should check the status of our job. Note this check is\n    just whether the job is done or not. This is NOT how often we check for\n    errors. See monitor_freq for that.\nmonitor_freq : int (optional)\n    The frequency we should run check for errors with our monitors. This is\n    based on the polling_timestep loops. For example, if we have a\n    polling_timestep of 10 seconds and a monitor_freq of 2, then we would run\n    the monitor checks every other loop -- or every 2<em>10 = 20 seconds. The\n    default values of polling_timestep=10 and monitor_freq=30 indicate that\n    we run monitoring functions every 5 minutes (10</em>30=300s=5min).\nsave_corrections_to_file : bool (optional)\n    Whether to write a log file of the corrections made. The default is True.\ncorrections_filename : str (optional)\n    If save_corrections_to_file is True, this is the filename of where\n    to write the corrections. The default is \"simmate_corrections.csv\".\ncompress_output : bool (optional)\n    Whether to compress the directory to a zip file at the end of the\n    task run. After compression, it will also delete the directory.\n    The default is False.\n**kwargs : Any\n    All extra arguments supported by prefect.core.task.Task. To see all\n    the options, visit https://docs.prefect.io/api/latest/core/task.html</p>\n", "parameters": ["self", "structure", "command", "directory", "error_handlers", "max_corrections", "monitor", "polling_timestep", "monitor_freq", "save_corrections_to_file", "corrections_filename", "compress_output", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.command", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.command", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.requires_structure", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.requires_structure", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.error_handlers", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.error_handlers", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.max_corrections", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.max_corrections", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.monitor", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.monitor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.polling_timestep", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.polling_timestep", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.monitor_freq", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.monitor_freq", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.setup", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.setup", "type": "function", "doc": "<p>This abstract method is ran before the command is actually executed. This\nallows for some pre-processing, such as writing input files or any other\nanalysis.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase setup() is normally called within the run() method.</p>\n\n<p>Some tasks don't require a setup() method, so by default, this method\ndoesn't nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>structure : pymatgen.core.structure.Structure\n    The structure to use for the task, if one is required.\ndirectory : str\n    The directory to run everything in.</p>\n", "parameters": ["self", "structure", "directory"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.execute", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.execute", "type": "function", "doc": "<p>This calls the command within the target directory and handles all error\nhandling as well as monitoring of the job.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase execute() is normally called within the run() method.</p>\n\n<p>Some tasks don't require a setup() method, so by default, this method\ndoes nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>directory : str\n    The directory to run everything in.\ncommand : str\n    The command that will be called during execution.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>corrections : List\n    A list of tuples where each entry is a error identified and the\n    correction applied. Ex: [(\"ExampleError\", \"ExampleCorrection\")]</p>\n", "parameters": ["self", "directory", "command"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.workup", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.workup", "type": "function", "doc": "<p>This method is called at the end of a job, <em>after</em> error detection.\nThis allows post-processing, such as cleanup, analysis of results,\netc. This should return the result of the entire job, such as a\nthe final structure or final energy calculated.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase workup() is normally called within the run() method.</p>\n\n<p>Some tasks don't require a workup() method, so by default, this method\ndoes nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>directory : str\n    The directory to run everything in.</p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.run", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.run", "type": "function", "doc": "<p>Runs the entire staged task (setup, execution, workup), which includes\nsupervising during execution.</p>\n\n<p>Call this method once you have your task initialized. For each run you\ncan provide a new structure, directory, or command. For example,</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.calculator.example.tasks import ExampleTask\n   my_task = ExampleTask()\n   my_result = my_task.run(structure=my_structure, command=my_command)</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>structure : pymatgen.core.structure.Structure (optional)\n    The structure to use for the task, if one is required.\ncommand : str (optional)\n    The command that will be called during execution.\ndirectory : str (optional)\n    The directory to run everything in. This is passed to the ulitities\n    function simmate.ulitities.get_directory</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    a dictionary of the result, corrections, and working directory used\n    for this task run</p>\n", "parameters": ["self", "structure", "directory", "command"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.get_config", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.get_config", "type": "function", "doc": "<p>Grabs the overall settings from the class.</p>\n\n<p>By default, this will just grab the class's __dict__ attribute but this\ncan be overwritten to show only relevent information.</p>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.SupervisedStagedShellTask.print_config", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "SupervisedStagedShellTask.print_config", "type": "function", "doc": "<p>Takes the result of get_config and prints it in a yaml format that is\neasier to read.</p>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.MaxCorrectionsError", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "MaxCorrectionsError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.NonZeroExitError", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "NonZeroExitError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n"}, {"fullname": "simmate.workflow_engine.tasks.supervised_staged_shell_task.StructureRequiredError", "modulename": "simmate.workflow_engine.tasks.supervised_staged_shell_task", "qualname": "StructureRequiredError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n"}, {"fullname": "simmate.workflow_engine.tasks.workflow_task", "modulename": "simmate.workflow_engine.tasks.workflow_task", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.tasks.workflow_task.WorkflowTask", "modulename": "simmate.workflow_engine.tasks.workflow_task", "qualname": "WorkflowTask", "type": "class", "doc": "<p>Many times in Material Science, a workflow is made up of other smaller workflows.\nFor example, calculations for bandstructure first involve a structure relaxation\nfollowed by a static energy calculation -- before the bandstructure is even\ncalculated.</p>\n\n<p>For this reason, we need a way to call these workflows as if they were a task.</p>\n\n<p>The easiest way to make your Workflow into a WorkflowTask is actually NOT\ncalling this class. But instead using the to_workflow_task method:</p>\n\n<p>.. code-block:: python</p>\n\n<p>from simmate.workflows.all import example_workflow\n   my_task = example_workflow.to_workflow_task()</p>\n\n<p>DEV NOTE:\nPrefect has a module prefect.tasks.prefect.flow_run which is close to this\nidea -- but this module requires you to be using Prefect Cloud and have all\nof the flows registered. We need to account for running flows locally too!\nTherefore, we had to make this custom task here -- where it decided whether\nwe call the workflow.run_cloud or workflow.run method.\nConsider moving this functionality to Prefect down the line.</p>\n"}, {"fullname": "simmate.workflow_engine.tasks.workflow_task.WorkflowTask.__init__", "modulename": "simmate.workflow_engine.tasks.workflow_task", "qualname": "WorkflowTask.__init__", "type": "function", "doc": "<p>Creates a Prefect task instance from a workflow and determines how it\nshould be ran when task.run() is called.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>workflow : Workflow\n    The full workflow to run.\nreturn_result : bool\n    If True, the task run will return the result of the task set as the\n    worfklow.result_task attribute. If False, the workflow State is returned.\n    The default is True.\nexecutor_type : str (optional)\n    How the workflow should be scheduled and ran. The options are either\n    local or prefect (i.e. prefect cloud). The default is \"local\".\nwait_for_run : bool (optional)\n    If Prefect is used to schedule the workflow, then this indicates\n    whether we should wait for the flow to finish or not.\nlabels : List[str] (optional)\n    If Prefect is used to schedule the workflow, then this indicates\n    what labels should be attached to the flow\nlog_stdout : bool (optional)\n    Whether to log anything printed by the workflow. The default is True.\n**kwargs : TYPE\n    All extra arguments supported by prefect.core.task.Task.</p>\n", "parameters": ["self", "workflow", "return_result", "executor_type", "wait_for_run", "labels", "log_stdout", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.tasks.workflow_task.WorkflowTask.run", "modulename": "simmate.workflow_engine.tasks.workflow_task", "qualname": "WorkflowTask.run", "type": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>executor_type : str (optional)\n    How the workflow should be scheduled and ran. The options are either\n    local or prefect (i.e. prefect cloud).\nreturn_result : bool\n    If True, the task run will return the result of the task set as the\n    worfklow.result_task attribute. If False, the workflow State is returned.\n    The default is True.\nwait_for_run : bool (optional)\n    If Prefect is used to schedule the workflow, then this indicates\n    whether we should wait for the flow to finish or not.\nlabels : List[str] (optional)\n    If Prefect is used to schedule the workflow, then this indicates\n    what labels should be attached to the flow\n**parameters : TYPE\n    All options to pass the workflow.run() method.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>str\n    The flow-run-id if submitted with prefect OR the prefect state if\n    the workflow was ran locally</p>\n", "parameters": ["self", "executor_type", "return_result", "wait_for_run", "labels", "parameters"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.utilities", "modulename": "simmate.workflow_engine.utilities", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.utilities.s3task_to_workflow", "modulename": "simmate.workflow_engine.utilities", "qualname": "s3task_to_workflow", "type": "function", "doc": "<p>Builds a workflow from a S3Task and it's corresponding database table.</p>\n\n<p>Very often with Simmate's S3Tasks, the workflow for a single S3Task is\nthe same. The workflow is typically made of three tasks:\n    (1) loading the input parameters and registering the calculation\n    (2) running the calculation (what this S3Task does on its own)\n    (3) saving the calculation results\nTask 1 and 3 always use the same functions, where we just need to tell\nit which database table we are registering/saving to.</p>\n\n<p>Because of this common recipe for workflows, we use this method to make\nthe workflow for us.</p>\n", "parameters": ["name", "module", "project_name", "s3task", "calculation_table", "register_kwargs"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.workflow", "modulename": "simmate.workflow_engine.workflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.workflow.Workflow", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow", "type": "class", "doc": "<p>The Flow class is used as the representation of a collection of dependent Tasks.  Flows\ntrack Task dependencies, parameters and provide the main API for constructing and managing\nworkflows.</p>\n\n<p>Initializing Flow example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">MyTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;hello&quot;</span>\n\n<span class=\"n\">task_1</span> <span class=\"o\">=</span> <span class=\"n\">MyTask</span><span class=\"p\">()</span>\n<span class=\"n\">flow</span> <span class=\"o\">=</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;my_flow&quot;</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">task_1</span><span class=\"p\">])</span>\n\n<span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Initializing Flow as context manager example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_task</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;hello&quot;</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">flow</span><span class=\"p\">:</span>\n    <span class=\"n\">task_1</span> <span class=\"o\">=</span> <span class=\"n\">my_task</span><span class=\"p\">()</span>\n\n<span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Args:\n    - name (str): The name of the flow. Cannot be <code>None</code> or an empty string\n    - schedule (prefect.schedules.Schedule, optional): A default schedule for the flow\n    - executor (prefect.executors.Executor, optional): The executor that the flow\n       should use. If <code>None</code>, the default executor configured in the runtime environment\n       will be used.\n    - environment (prefect.environments.Environment, optional, DEPRECATED): The environment\n       that the flow should be run in.\n    - run_config (prefect.run_configs.RunConfig, optional): The runtime\n       configuration to use when deploying this flow.\n    - storage (prefect.storage.Storage, optional): The unit of storage\n        that the flow will be written into.\n    - tasks ([Task], optional): If provided, a list of tasks that will initialize the flow\n    - edges ([Edge], optional): A list of edges between tasks\n    - reference_tasks ([Task], optional): A list of tasks that determine the final\n        state of a flow\n    - result (Result, optional): the result instance used to retrieve and store\n        task results during execution\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the flow changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the flow instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(flow: Flow, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature <code>fn(flow: Flow, state:\n        State) -&gt; None</code> which will be called anytime this Flow enters a failure state\n    - validate (bool, optional): Whether or not to check the validity of\n        the flow (e.g., presence of cycles and illegal keys) after adding the edges passed\n        in the <code>edges</code> argument. Defaults to the value of <code>eager_edge_validation</code> in\n        your prefect configuration file.\n    -  terminal_state_handler (Callable, optional): A state handler that can be used to\n        inspect or modify the final state of the flow run. Expects a callable with signature\n        <code>handler(flow: Flow, state: State, reference_task_states: Set[State]) -&gt; Optional[State]</code>,\n        where <code>flow</code> is the current Flow, <code>state</code> is the current state of the Flow run, and\n        <code>reference_task_states</code> is set of states for all reference tasks in the flow. It should\n        return either a new state for the flow run, or <code>None</code> (in which case the existing\n        state will be used).</p>\n"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.result_task", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.result_task", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.run_cloud", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.run_cloud", "type": "function", "doc": "<p>This schedules the workflow to run remotely.</p>\n\n<p>Make sure you have Prefect properly configured and have registered your\nworkflow with the backend.</p>\n\n<p>Note that this method can be viewed as a fork of...\n    from prefect.tasks.prefect.flow_run import create_flow_run\nIt can also be viewed as a more convenient way to call to client.create_flow_run.\nI don't accept any other client.create_flow_run() inputs besides 'labels'.\nThis may change in the future if I need to set flow run names or schedules.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>labels: List[str]\n    a list of labels to schedule the workflow with\nwait_for_run: bool\n    whether to wait for the workflow to finish. If False, the workflow\n    will simply be submitted and then exit. The default is True.\n**kwargs:\n    all options that are normally passed to the run() method</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>str:\n    The flow run id that was used in prefect cloud.</p>\n", "parameters": ["self", "labels", "wait_for_run", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.wait_for_flow_run", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.wait_for_flow_run", "type": "function", "doc": "<p>Waits for a given flow run to complete</p>\n\n<p>This method is a direct fork of...\n    from prefect.tasks.prefect.flow_run import wait_for_flow_run</p>\n\n<p>It does exactly the same thing where I just assume I want to stream logs.</p>\n", "parameters": ["self", "flow_run_id"], "funcdef": "def"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.nflows_submitted", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.nflows_submitted", "type": "variable", "doc": "<p>Queries Prefect to see how many workflows are in a running or submitted\nstate. It will return a count (integer).</p>\n\n<p>Note, your workflow must be registered with Prefect for this to work.</p>\n"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.to_workflow_task", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.to_workflow_task", "type": "function", "doc": "<p>Converts a prefect workflow to a prefect task (aka a \"workflow task\")</p>\n\n<p>See the documentation in workflow_engine.tasks.workflow_task for more.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.workflows", "modulename": "simmate.workflows", "qualname": "", "type": "module", "doc": "<h2 id=\"simmate-workflows\">Simmate Workflows</h2>\n\n<p>This module brings together all predefined workflows and organizes them by application for convenience.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p><a href=\"https://github.com/jacksund/simmate/tree/main/tutorials\">Tutorials 01-05</a> will teach you how to run workflows and access their results. But as a review:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflows.all import energy_mit\n\n# runs the workflow and returns a status\nstatus = energy_mit.run(structure=...)\n\n# gives the DatabaseTable where ALL results are stored\nenergy_mit.result_table\n</code></pre>\n\n<h2 id=\"location-of-each-workflows-source-code\">Location of Each Workflow's Source-code</h2>\n\n<p>The code that defines these workflows and configures their settings are located in the corresponding <code>simmate.calculators</code> module. We make workflows accessible here because users often want to search for workflows by application -- not by their calculator name. For example, a structure relaxation that uses VASP under MIT project settings can be imported with...</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.workflows.relaxation.all import relaxation_mit\n</code></pre>\n\n<p>Alternatively, this same workflow could have been imported with...</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.calculators.vasp.workflows.relaxation.all import relaxation_mit\n</code></pre>\n"}, {"fullname": "simmate.workflows.all", "modulename": "simmate.workflows.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.common_tasks", "modulename": "simmate.workflows.common_tasks", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.common_tasks.all", "modulename": "simmate.workflows.common_tasks.all", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.common_tasks.load_input_and_register", "modulename": "simmate.workflows.common_tasks.load_input_and_register", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.common_tasks.load_input_and_register.LoadInputAndRegister", "modulename": "simmate.workflows.common_tasks.load_input_and_register", "qualname": "LoadInputAndRegister", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n"}, {"fullname": "simmate.workflows.common_tasks.load_input_and_register.LoadInputAndRegister.__init__", "modulename": "simmate.workflows.common_tasks.load_input_and_register", "qualname": "LoadInputAndRegister.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "calculation_table", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.workflows.common_tasks.load_input_and_register.LoadInputAndRegister.run", "modulename": "simmate.workflows.common_tasks.load_input_and_register", "qualname": "LoadInputAndRegister.run", "type": "function", "doc": "<p>How the structure was submitted as a parameter depends on if we are submitting\nto Prefect Cloud, running the flow locally, or even continuing from a\nprevious calculation.  Here, we use a task to convert the input to a pymatgen\nstructure and (if requested) provide the directory as well.</p>\n\n<p>Possible structure formats include...\n    object of pymatgen structure\n    dictionary of pymatgen structure\n    dictionary of...\n        (1) python path to calculation datatable\n        (2) one of the following (only one is used in this priority order):\n            (a) prefect flow id\n            (b) calculation id\n            (c) directory\n            ** these three are chosen because all three are unique for every\n            single calculation and we have access to different ones at different\n            times!\n        (3) (optional) attribute to use on table (e.g. structure_final)\n            By default, we assume calculation table is also a structure table\n    filename for a structure (cif, poscar, etc.) [TODO]</p>\n\n<p>directory is optional</p>\n\n<p>use_previous_directory is only used when we are pulling a structure from a\nprevious calculation. If use_previous_directory=True, then the directory\nparameter is ignored.</p>\n", "parameters": ["self", "structure", "source", "directory", "use_previous_directory"], "funcdef": "def"}, {"fullname": "simmate.workflows.common_tasks.load_nested_calculation", "modulename": "simmate.workflows.common_tasks.load_nested_calculation", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.common_tasks.load_nested_calculation.LoadNestedCalculationTask", "modulename": "simmate.workflows.common_tasks.load_nested_calculation", "qualname": "LoadNestedCalculationTask", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n"}, {"fullname": "simmate.workflows.common_tasks.load_nested_calculation.LoadNestedCalculationTask.__init__", "modulename": "simmate.workflows.common_tasks.load_nested_calculation", "qualname": "LoadNestedCalculationTask.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "calculation_table", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.workflows.common_tasks.load_nested_calculation.LoadNestedCalculationTask.run", "modulename": "simmate.workflows.common_tasks.load_nested_calculation", "qualname": "LoadNestedCalculationTask.run", "type": "function", "doc": "<p>The <code>run()</code> method is called (with arguments, if appropriate) to run a task.</p>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>If a task has arguments in its <code>run()</code> method, these can be bound either by using the\nfunctional API and _calling_ the task instance, or by using <code>self.bind</code> directly.</p>\n\n<p>In addition to running arbitrary functions, tasks can interact with Prefect in a few ways:</p>\n\n<ul><li> Return an optional result. When this function runs successfully,\n    the task is considered successful and the result (if any) can be\n    made available to downstream tasks. </li>\n<li> Raise an error. Errors are interpreted as failure. </li>\n<li> Raise a [signal](../engine/signals.html). Signals can include `FAIL`, `SUCCESS`,\n    `RETRY`, `SKIP`, etc. and indicate that the task should be put in the indicated state.\n        <ul>\n        <li> `FAIL` will lead to retries if appropriate </li>\n        <li> `SUCCESS` will cause the task to be marked successful </li>\n        <li> `RETRY` will cause the task to be marked for retry, even if `max_retries`\n            has been exceeded </li>\n        <li> `SKIP` will skip the task and possibly propogate the skip state through the\n            flow, depending on whether downstream tasks have `skip_on_upstream_skip=True`.\n        </li></ul>\n\n<p></li></ul></p>\n", "parameters": ["self", "directory"], "funcdef": "def"}, {"fullname": "simmate.workflows.common_tasks.save_nested_calculation", "modulename": "simmate.workflows.common_tasks.save_nested_calculation", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.common_tasks.save_nested_calculation.SaveNestedCalculationTask", "modulename": "simmate.workflows.common_tasks.save_nested_calculation", "qualname": "SaveNestedCalculationTask", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n"}, {"fullname": "simmate.workflows.common_tasks.save_nested_calculation.SaveNestedCalculationTask.__init__", "modulename": "simmate.workflows.common_tasks.save_nested_calculation", "qualname": "SaveNestedCalculationTask.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "calculation_table", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.workflows.common_tasks.save_nested_calculation.SaveNestedCalculationTask.run", "modulename": "simmate.workflows.common_tasks.save_nested_calculation", "qualname": "SaveNestedCalculationTask.run", "type": "function", "doc": "<p>The <code>run()</code> method is called (with arguments, if appropriate) to run a task.</p>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>If a task has arguments in its <code>run()</code> method, these can be bound either by using the\nfunctional API and _calling_ the task instance, or by using <code>self.bind</code> directly.</p>\n\n<p>In addition to running arbitrary functions, tasks can interact with Prefect in a few ways:</p>\n\n<ul><li> Return an optional result. When this function runs successfully,\n    the task is considered successful and the result (if any) can be\n    made available to downstream tasks. </li>\n<li> Raise an error. Errors are interpreted as failure. </li>\n<li> Raise a [signal](../engine/signals.html). Signals can include `FAIL`, `SUCCESS`,\n    `RETRY`, `SKIP`, etc. and indicate that the task should be put in the indicated state.\n        <ul>\n        <li> `FAIL` will lead to retries if appropriate </li>\n        <li> `SUCCESS` will cause the task to be marked successful </li>\n        <li> `RETRY` will cause the task to be marked for retry, even if `max_retries`\n            has been exceeded </li>\n        <li> `SKIP` will skip the task and possibly propogate the skip state through the\n            flow, depending on whether downstream tasks have `skip_on_upstream_skip=True`.\n        </li></ul>\n\n<p></li></ul></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "simmate.workflows.common_tasks.save_result", "modulename": "simmate.workflows.common_tasks.save_result", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.common_tasks.save_result.SaveOutputTask", "modulename": "simmate.workflows.common_tasks.save_result", "qualname": "SaveOutputTask", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n"}, {"fullname": "simmate.workflows.common_tasks.save_result.SaveOutputTask.__init__", "modulename": "simmate.workflows.common_tasks.save_result", "qualname": "SaveOutputTask.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "calculation_table", "kwargs"], "funcdef": "def"}, {"fullname": "simmate.workflows.common_tasks.save_result.SaveOutputTask.run", "modulename": "simmate.workflows.common_tasks.save_result", "qualname": "SaveOutputTask.run", "type": "function", "doc": "<p>The <code>run()</code> method is called (with arguments, if appropriate) to run a task.</p>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>If a task has arguments in its <code>run()</code> method, these can be bound either by using the\nfunctional API and _calling_ the task instance, or by using <code>self.bind</code> directly.</p>\n\n<p>In addition to running arbitrary functions, tasks can interact with Prefect in a few ways:</p>\n\n<ul><li> Return an optional result. When this function runs successfully,\n    the task is considered successful and the result (if any) can be\n    made available to downstream tasks. </li>\n<li> Raise an error. Errors are interpreted as failure. </li>\n<li> Raise a [signal](../engine/signals.html). Signals can include `FAIL`, `SUCCESS`,\n    `RETRY`, `SKIP`, etc. and indicate that the task should be put in the indicated state.\n        <ul>\n        <li> `FAIL` will lead to retries if appropriate </li>\n        <li> `SUCCESS` will cause the task to be marked successful </li>\n        <li> `RETRY` will cause the task to be marked for retry, even if `max_retries`\n            has been exceeded </li>\n        <li> `SKIP` will skip the task and possibly propogate the skip state through the\n            flow, depending on whether downstream tasks have `skip_on_upstream_skip=True`.\n        </li></ul>\n\n<p></li></ul></p>\n", "parameters": ["self", "output"], "funcdef": "def"}, {"fullname": "simmate.workflows.energy", "modulename": "simmate.workflows.energy", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.relaxation", "modulename": "simmate.workflows.relaxation", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.utilities", "modulename": "simmate.workflows.utilities", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.utilities.get_list_of_all_workflows", "modulename": "simmate.workflows.utilities", "qualname": "get_list_of_all_workflows", "type": "function", "doc": "<p>Returns a list of all the workflows located in the workflows.all module</p>\n", "parameters": [], "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();