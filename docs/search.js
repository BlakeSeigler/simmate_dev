window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "simmate", "modulename": "simmate", "type": "module", "doc": "<h1 id=\"welcome\">Welcome!</h1>\n\n<p>To get started, make sure you have either completed our <a href=\"https://github.com/jacksund/simmate/tree/main/tutorials\">introduction tutorials</a>\nor are comfortable with python.</p>\n\n<p><code>simmate</code> is the base module and contains all of the code that our package runs on. Within each subfolder (aka each python \u201cmodule\u201d), you\u2019ll find more details on what it contains.</p>\n\n<p><strong>But as a brief summary\u2026</strong></p>\n\n<ul>\n<li><code>calculators</code> = third-party programs that run analyses for us (e.g. VASP which runs DFT calculations)</li>\n<li><code>command_line</code> = makes some common functions available as commands in the terminal</li>\n<li><code>configuration</code> = the defualt Simmate settings and how to update them </li>\n<li><code>database</code> = defines how all Simmate data is organized into tables and let\u2019s you access it </li>\n<li><code>file_converters</code> = reformat to/from file types (e.g. POSCAR \u2013&gt; CIF) </li>\n<li><code>toolkit</code> = the fundamental functions and classes for Simmate (e.g. the <code>Structure</code> class)</li>\n<li><code>visualization</code> = visualizing structures, 3D data, and simple plots</li>\n<li><code>website</code> = runs the simmate.org website </li>\n<li><code>workflow_engine</code> = tools and utilities that help submit calculations as well as handle errors</li>\n<li><code>workflows</code> = common analyses used in materials chemistry</li>\n</ul>\n\n<p>There are also three extra files\u2026</p>\n\n<ul>\n<li><code>shortcuts</code> = let\u2019s you import common functions with ease </li>\n<li><code>utilities</code> = contains simple functions that are used throughout the other modules</li>\n<li><code>conftest</code> = this is for running Simmate tests and only for contributing devs</li>\n</ul>\n"}, {"fullname": "simmate.calculators", "modulename": "simmate.calculators", "type": "module", "doc": "<h2 id=\"simmate-calculators\">Simmate Calculators</h2>\n\n<p>Calculators are external codes/programs that perform some analysis for us. </p>\n\n<p>For example, VASP is a program that can run a variety of density functional theory (DFT) calculations. But because it isn't written in Python, we need some \"helper\" code here to call VASP commands, make input files, and pull data from the outputs. </p>\n\n<p>All calculators have the same folder structure:</p>\n\n<pre><code>\u251c\u2500\u2500 example_calculator\n\u2502   \u251c\u2500\u2500 database\n\u2502   \u251c\u2500\u2500 error_handlers\n\u2502   \u251c\u2500\u2500 inputs\n\u2502   \u251c\u2500\u2500 outputs\n\u2502   \u251c\u2500\u2500 configuration\n\u2502   \u251c\u2500\u2500 tasks\n\u2502   \u251c\u2500\u2500 website\n\u2502   \u2514\u2500\u2500 workflows\n</code></pre>\n\n<p>In a more logical order (rather than alphabetical like above), here is what each module contains:</p>\n\n<ul>\n<li><code>configuration</code> = helps to install the program and setup common settings for it</li>\n<li><code>inputs</code> &amp; <code>outputs</code> = automatically generate files as well as load their data into python</li>\n<li><code>error_handlers</code> = help correct common errors in calculations that cause the program to fail</li>\n<li><code>tasks</code> = how the program is actually setup, executed, and worked-up. It ties together all the <code>inputs</code>, <code>outputs</code>, and <code>error-handler</code> functions into one. A single task can be viewed as a single call to the program (i.e. a single calculation).</li>\n<li><code>database</code> = holds all of the datatables for storing our results</li>\n<li><code>workflows</code>  = brings together <code>tasks</code> and <code>database</code>, so these setup individual tasks and handle saving the results to our database</li>\n<li><code>website</code> = lets us submit workflows and view results with our website interface</li>\n</ul>\n\n<p><strong>NOTE:</strong> <em>Beginners should start by looking at the <code>workflows</code> module as this ties all other modules together. Advanced users can start with each calculator's <code>tasks</code> to build your own custom workflow.</em></p>\n"}, {"fullname": "simmate.calculators.bader", "modulename": "simmate.calculators.bader", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader.inputs", "modulename": "simmate.calculators.bader.inputs", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader.outputs", "modulename": "simmate.calculators.bader.outputs", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader.outputs.acf", "modulename": "simmate.calculators.bader.outputs.acf", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader.outputs.acf.ACF", "modulename": "simmate.calculators.bader.outputs.acf", "qualname": "ACF", "type": "function", "doc": "<p></p>\n", "signature": "(filename='ACF.dat')", "funcdef": "def"}, {"fullname": "simmate.calculators.bader.tasks", "modulename": "simmate.calculators.bader.tasks", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.bader.tasks.CombineCHGCARsTask", "modulename": "simmate.calculators.bader.tasks", "qualname": "CombineCHGCARsTask", "type": "class", "doc": "<h2 id=\"the-supervised-staged-shell-task-aka-s3task\">The Supervised-Staged-Shell Task (aka \"S3Task\")</h2>\n\n<p>This class contains the core functionality to <strong>supervise</strong> a <strong>staged</strong> task\ninvolving some <strong>shell</strong> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<ul>\n<li>setup = writing any input files required for the program</li>\n<li>execution = actually calling the command and running our program</li>\n<li>workup = loading data from output files back into python</li>\n</ul>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<!--\nTODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...\n\n- Write Input Files based on custom+defualt settings\n- Run the calculation by calling the program\n- Load ouput files\n- check for errors\n- [correct them, rerun]\n- postprocess/analysis\n-->\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>   <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculator.example.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleTask</span>\n\n   <span class=\"n\">my_task</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTask</span><span class=\"p\">()</span>\n   <span class=\"n\">my_result</span> <span class=\"o\">=</span> <span class=\"n\">my_task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, and Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules, so you\nwill likely want to subclass this. Here is a basic example of inheriting\nand then running a task:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflow_engine</span> <span class=\"kn\">import</span> <span class=\"n\">S3Task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">example.error_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">PossibleError1</span><span class=\"p\">,</span> <span class=\"n\">PossibleError2</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleTask</span><span class=\"p\">(</span><span class=\"n\">SSSTask</span><span class=\"p\">):</span>\n\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;echo example&quot;</span>  <span class=\"c1\"># just prints out &quot;example&quot;</span>\n    <span class=\"n\">max_corrections</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n    <span class=\"n\">error_handlers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">PossibleError1</span><span class=\"p\">,</span> <span class=\"n\">PossibleError2</span><span class=\"p\">]</span>\n    <span class=\"n\">polling_timestep</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n    <span class=\"n\">monitor_freq</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">some_new_setting</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"p\">,</span> <span class=\"n\">directory</span><span class=\"p\">):</span>  <span class=\"c1\"># &lt;-- MUST have these two args</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I&#39;m setting things up!&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;My new setting is </span><span class=\"si\">{</span><span class=\"n\">some_new_setting</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">workup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">directory</span><span class=\"p\">):</span>  <span class=\"c1\"># &lt;-- MUST have this arg</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I&#39;m working things up!&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTask</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n\n<p>For a full (and advanced) example, of a subclass take a look at\n<code>simmate.calculators.vasp.tasks.base.VaspTask</code>.</p>\n", "bases": "simmate.workflow_engine.supervised_staged_shell_task.S3Task"}, {"fullname": "simmate.calculators.bader.tasks.CombineCHGCARsTask.command", "modulename": "simmate.calculators.bader.tasks", "qualname": "CombineCHGCARsTask.command", "type": "variable", "doc": "<p>The defualt shell command to use.</p>\n", "annotation": ": str", "default_value": " = './chgsum.pl AECCAR0 AECCAR2 > chgsum.out'"}, {"fullname": "simmate.calculators.bader.tasks.BaderAnalysisTask", "modulename": "simmate.calculators.bader.tasks", "qualname": "BaderAnalysisTask", "type": "class", "doc": "<h2 id=\"the-supervised-staged-shell-task-aka-s3task\">The Supervised-Staged-Shell Task (aka \"S3Task\")</h2>\n\n<p>This class contains the core functionality to <strong>supervise</strong> a <strong>staged</strong> task\ninvolving some <strong>shell</strong> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<ul>\n<li>setup = writing any input files required for the program</li>\n<li>execution = actually calling the command and running our program</li>\n<li>workup = loading data from output files back into python</li>\n</ul>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<!--\nTODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...\n\n- Write Input Files based on custom+defualt settings\n- Run the calculation by calling the program\n- Load ouput files\n- check for errors\n- [correct them, rerun]\n- postprocess/analysis\n-->\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>   <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculator.example.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleTask</span>\n\n   <span class=\"n\">my_task</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTask</span><span class=\"p\">()</span>\n   <span class=\"n\">my_result</span> <span class=\"o\">=</span> <span class=\"n\">my_task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, and Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules, so you\nwill likely want to subclass this. Here is a basic example of inheriting\nand then running a task:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflow_engine</span> <span class=\"kn\">import</span> <span class=\"n\">S3Task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">example.error_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">PossibleError1</span><span class=\"p\">,</span> <span class=\"n\">PossibleError2</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleTask</span><span class=\"p\">(</span><span class=\"n\">SSSTask</span><span class=\"p\">):</span>\n\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;echo example&quot;</span>  <span class=\"c1\"># just prints out &quot;example&quot;</span>\n    <span class=\"n\">max_corrections</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n    <span class=\"n\">error_handlers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">PossibleError1</span><span class=\"p\">,</span> <span class=\"n\">PossibleError2</span><span class=\"p\">]</span>\n    <span class=\"n\">polling_timestep</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n    <span class=\"n\">monitor_freq</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">some_new_setting</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"p\">,</span> <span class=\"n\">directory</span><span class=\"p\">):</span>  <span class=\"c1\"># &lt;-- MUST have these two args</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I&#39;m setting things up!&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;My new setting is </span><span class=\"si\">{</span><span class=\"n\">some_new_setting</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">workup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">directory</span><span class=\"p\">):</span>  <span class=\"c1\"># &lt;-- MUST have this arg</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I&#39;m working things up!&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTask</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n\n<p>For a full (and advanced) example, of a subclass take a look at\n<code>simmate.calculators.vasp.tasks.base.VaspTask</code>.</p>\n", "bases": "simmate.workflow_engine.supervised_staged_shell_task.S3Task"}, {"fullname": "simmate.calculators.bader.tasks.BaderAnalysisTask.command", "modulename": "simmate.calculators.bader.tasks", "qualname": "BaderAnalysisTask.command", "type": "variable", "doc": "<p>The defualt shell command to use.</p>\n", "annotation": ": str", "default_value": " = './bader CHGCAR -ref CHGCAR_sum -b weight > bader.out'"}, {"fullname": "simmate.calculators.bader.tasks.BaderAnalysisTask.setup", "modulename": "simmate.calculators.bader.tasks", "qualname": "BaderAnalysisTask.setup", "type": "function", "doc": "<p>This abstract method is ran before the command is actually executed. This\nallows for some pre-processing, such as writing input files or any other\nanalysis.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase setup() is normally called within the run() method.</p>\n\n<p>Some tasks don't require a setup() method, so by default, this method\ndoesn't nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>structure</code>:\nThe structure to use for the task, if one is required.</li>\n<li><code>directory</code>:\nThe directory to run everything in. Must exist already.</li>\n<li><code>**kwargs</code>:\nExtra kwargs that may be passed to some function within. Because\nSimmate prefers fixed settings for their workflows, this is typically\nnot used, but instead, keywords should be explicitly defined when\nwriting a setup method.</li>\n</ul>\n", "signature": "(self, dir=None)", "funcdef": "def"}, {"fullname": "simmate.calculators.bader.tasks.BaderAnalysisTask.postprocess", "modulename": "simmate.calculators.bader.tasks", "qualname": "BaderAnalysisTask.postprocess", "type": "function", "doc": "<p></p>\n", "signature": "(self, dir=None)", "funcdef": "def"}, {"fullname": "simmate.calculators.deepmd", "modulename": "simmate.calculators.deepmd", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs", "modulename": "simmate.calculators.deepmd.inputs", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs.parameters", "modulename": "simmate.calculators.deepmd.inputs.parameters", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs.type_and_set", "modulename": "simmate.calculators.deepmd.inputs.type_and_set", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs.type_and_set.DeepmdDataset", "modulename": "simmate.calculators.deepmd.inputs.type_and_set", "qualname": "DeepmdDataset", "type": "class", "doc": "<p>This class works simply as a converter. You provide it a list of\nIonicStepStructures that have forces and energies, and it will create a\ndeepmd input for you.</p>\n\n<p>The input consists of 2 \"type\" files and then a subfolder made of 4 files for\nthe actaul data. An example folder looks like this:\n    type.raw\n    type_map.raw\n    set.000\n        box.npy\n        coord.npy\n        energy.npy\n        force.npy</p>\n\n<p>The \"type\" files are very simple. \"type_map.raw\" is just a list of elements\nand the \"type.raw\" is our composition listing what each site is. For example,\nH20 (water) would just be...\n    type_map.raw --> H O\n    type.raw --> 0 0 1</p>\n\n<p>These .npy are \"numpy\" files, where the data included in each is...\n  box = lattice matrixes\n  coord = site's cartesian coordinates\n  energy = calculated energies\n  force = calculated forces for sites</p>\n\n<p>All data is collapsed to 1D arrays. For example, this means the 3x3 lattice matrix\nbecomes a 1x9 list of numbers and the entire file is a list of matricies in this\nformat. The same is done to forces, coords, and energies.</p>\n\n<p>Note this is the folder/file format for EACH composition. So this class creates\nmany of these folders if you provide input structures that have varying\ncompositions (such as CoO2, Co2O4, Co3O6, etc.).</p>\n\n<p>Further, we split the input structures into training and test datasets. So\nthe final folder setup will look like...\ndeepmd_data\n    CoO2_train\n    CoO2_test\n    Co2O4_train\n    Co2O4_test\n    &lt;&lt; etc. &gt;&gt;</p>\n\n<p>All data required is available from an IonicStepStructure in our database, so\nthis is our current input format.</p>\n"}, {"fullname": "simmate.calculators.deepmd.inputs.type_and_set.DeepmdDataset.__init__", "modulename": "simmate.calculators.deepmd.inputs.type_and_set", "qualname": "DeepmdDataset.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.deepmd.inputs.type_and_set.DeepmdDataset.to_file", "modulename": "simmate.calculators.deepmd.inputs.type_and_set", "qualname": "DeepmdDataset.to_file", "type": "function", "doc": "<p></p>\n", "signature": "(ionic_step_structures, directory='deepmd_data', test_size=0.2)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp", "modulename": "simmate.calculators.vasp", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database", "modulename": "simmate.calculators.vasp.database", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.band_structure", "modulename": "simmate.calculators.vasp.database.band_structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure", "type": "class", "doc": "<p>MatProjBandStructure(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_structure_data, nbands, band_gap, is_gap_direct, band_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, is_metal)</p>\n", "bases": "simmate.database.base_data_types.band_structure.BandStructureCalc"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.structure_string", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.nsites", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.nelements", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.elements", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.chemical_system", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.density", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.density_atomic", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.volume", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.volume_molar", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.formula_full", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.formula_reduced", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.formula_anonymous", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.spacegroup", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.band_structure_data", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.band_structure_data", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.nbands", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.nbands", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.band_gap", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.is_gap_direct", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.band_gap_direct", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.band_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.energy_fermi", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.is_metal", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.is_metal", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.directory", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.created_at", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.updated_at", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.corrections", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.source", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.DoesNotExist", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.spacegroup_id", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.band_structure.MatProjBandStructure.id", "modulename": "simmate.calculators.vasp.database.band_structure", "qualname": "MatProjBandStructure.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states", "modulename": "simmate.calculators.vasp.database.density_of_states", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates", "type": "class", "doc": "<p>MatProjDensityOfStates(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, density_of_states_data, band_gap, energy_fermi, conduction_band_minimum, valence_band_maximum)</p>\n", "bases": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.structure_string", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.nsites", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.nelements", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.elements", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.chemical_system", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.density", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.density_atomic", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.volume", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.volume_molar", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.formula_full", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.formula_reduced", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.formula_anonymous", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.spacegroup", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.density_of_states_data", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.density_of_states_data", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.band_gap", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.energy_fermi", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.directory", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.created_at", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.updated_at", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.corrections", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.source", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.DoesNotExist", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.spacegroup_id", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.density_of_states.MatProjDensityOfStates.id", "modulename": "simmate.calculators.vasp.database.density_of_states", "qualname": "MatProjDensityOfStates.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics", "modulename": "simmate.calculators.vasp.database.dynamics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun", "type": "class", "doc": "<p>MITDynamicsRun(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, temperature_start, temperature_end, time_step, nsteps)</p>\n", "bases": "simmate.database.base_data_types.dynamics.DynamicsRun"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.temperature_start", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.temperature_start", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.temperature_end", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.temperature_end", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.time_step", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.time_step", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.nsteps", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.nsteps", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.structure_string", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.nsites", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.nelements", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.elements", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.chemical_system", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.density", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.density_atomic", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.volume", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.volume_molar", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.formula_full", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.formula_reduced", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.formula_anonymous", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.spacegroup", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.directory", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.created_at", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.updated_at", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.corrections", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.source", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.DoesNotExist", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.spacegroup_id", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.id", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsRun.structures", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsRun.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep", "type": "class", "doc": "<p>MITDynamicsIonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, temperature, dynamics_run)</p>\n", "bases": "simmate.database.base_data_types.dynamics.DynamicsIonicStep"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.number", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.number", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.temperature", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.temperature", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.structure_string", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.nsites", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.nelements", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.elements", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.chemical_system", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.density", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.density_atomic", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.volume", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.volume_molar", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.formula_full", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.formula_reduced", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.formula_anonymous", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.energy", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.energy_per_atom", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.energy_above_hull", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.is_stable", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.decomposes_to", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.formation_energy", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.site_forces", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.lattice_stress", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.site_forces_norm", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.source", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.dynamics_run_id", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.dynamics_run_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.dynamics_run", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.dynamics_run", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.spacegroup_id", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.dynamics.MITDynamicsIonicStep.id", "modulename": "simmate.calculators.vasp.database.dynamics", "qualname": "MITDynamicsIonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy", "modulename": "simmate.calculators.vasp.database.energy", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy", "type": "class", "doc": "<p>MITStaticEnergy(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum)</p>\n", "bases": "simmate.database.base_data_types.static_energy.StaticEnergy"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.band_gap", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.is_gap_direct", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.energy_fermi", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.structure_string", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.nsites", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.nelements", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.elements", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.chemical_system", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.density", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.density_atomic", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.volume", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.volume_molar", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.formula_full", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.formula_reduced", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.formula_anonymous", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.spacegroup", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.energy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.energy_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.energy_above_hull", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.is_stable", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.decomposes_to", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.formation_energy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.site_forces", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.lattice_stress", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.site_forces_norm", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.directory", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.corrections", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.source", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.DoesNotExist", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.spacegroup_id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MITStaticEnergy.id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MITStaticEnergy.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy", "type": "class", "doc": "<p>MatProjStaticEnergy(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum)</p>\n", "bases": "simmate.database.base_data_types.static_energy.StaticEnergy"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.band_gap", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.is_gap_direct", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.energy_fermi", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.structure_string", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.nsites", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.nelements", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.elements", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.chemical_system", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.density", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.density_atomic", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.volume", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.volume_molar", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.formula_full", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.formula_reduced", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.formula_anonymous", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.spacegroup", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.energy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.energy_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.energy_above_hull", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.is_stable", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.decomposes_to", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.formation_energy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.site_forces", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.lattice_stress", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.site_forces_norm", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.directory", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.corrections", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.source", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.DoesNotExist", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.spacegroup_id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.MatProjStaticEnergy.id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "MatProjStaticEnergy.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy", "type": "class", "doc": "<p>NEBEndpointStaticEnergy(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum)</p>\n", "bases": "simmate.database.base_data_types.static_energy.StaticEnergy"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.band_gap", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.is_gap_direct", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.energy_fermi", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.structure_string", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.nsites", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.nelements", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.elements", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.chemical_system", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.density", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.density_atomic", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.volume", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.volume_molar", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.formula_full", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.formula_reduced", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.formula_anonymous", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.spacegroup", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.energy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.energy_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.energy_above_hull", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.is_stable", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.decomposes_to", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.formation_energy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.site_forces", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.lattice_stress", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.site_forces_norm", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.directory", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.corrections", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.source", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.DoesNotExist", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.spacegroup_id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.NEBEndpointStaticEnergy.id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "NEBEndpointStaticEnergy.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy", "type": "class", "doc": "<p>Quality04StaticEnergy(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum)</p>\n", "bases": "simmate.database.base_data_types.static_energy.StaticEnergy"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.band_gap", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.is_gap_direct", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.energy_fermi", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.structure_string", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.nsites", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.nelements", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.elements", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.chemical_system", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.density", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.density_atomic", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.volume", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.volume_molar", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.formula_full", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.formula_reduced", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.formula_anonymous", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.spacegroup", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.energy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.energy_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.energy_above_hull", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.is_stable", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.decomposes_to", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.formation_energy", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.site_forces", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.lattice_stress", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.site_forces_norm", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.directory", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.corrections", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.source", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.DoesNotExist", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.spacegroup_id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.energy.Quality04StaticEnergy.id", "modulename": "simmate.calculators.vasp.database.energy", "qualname": "Quality04StaticEnergy.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis", "type": "class", "doc": "<p>MITDiffusionAnalysis(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, migrating_specie, vacancy_mode, atomic_fraction, barrier_cell, paths_involved, npaths_involved)</p>\n", "bases": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.migrating_specie", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.migrating_specie", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.vacancy_mode", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.vacancy_mode", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.atomic_fraction", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.atomic_fraction", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.barrier_cell", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.barrier_cell", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.paths_involved", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.paths_involved", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.npaths_involved", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.npaths_involved", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.structure_string", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.nsites", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.nelements", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.elements", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.chemical_system", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.density", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.density_atomic", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.volume", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.volume_molar", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.formula_full", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.formula_reduced", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.formula_anonymous", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.spacegroup", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.source", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.DoesNotExist", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.spacegroup_id", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.id", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITDiffusionAnalysis.migration_hops", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITDiffusionAnalysis.migration_hops", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop", "type": "class", "doc": "<p>MITMigrationHop(id, source, site_start, site_end, index_start, index_end, number, length, dimension_path, dimension_host_lattice, energy_barrier, diffusion_analysis)</p>\n", "bases": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.site_start", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.site_start", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.site_end", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.site_end", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.index_start", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.index_start", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.index_end", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.index_end", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.number", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.number", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.length", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.length", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.dimension_path", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.dimension_path", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.dimension_host_lattice", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.dimension_host_lattice", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.energy_barrier", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.energy_barrier", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.source", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.DoesNotExist", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.diffusion_analysis_id", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.diffusion_analysis_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.diffusion_analysis", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.diffusion_analysis", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.id", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationHop.migration_images", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationHop.migration_images", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage", "type": "class", "doc": "<p>MITMigrationImage(id, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, number, force_tangent, energy, structure_distance, migration_hop)</p>\n", "bases": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.number", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.number", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.force_tangent", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.force_tangent", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.energy", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.energy", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.structure_distance", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.structure_distance", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.structure_string", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.nsites", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.nelements", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.elements", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.chemical_system", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.density", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.density_atomic", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.volume", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.volume_molar", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.formula_full", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.formula_reduced", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.formula_anonymous", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.spacegroup", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.DoesNotExist", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.migration_hop_id", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.migration_hop_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.migration_hop", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.migration_hop", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.spacegroup_id", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.nudged_elastic_band.MITMigrationImage.id", "modulename": "simmate.calculators.vasp.database.nudged_elastic_band", "qualname": "MITMigrationImage.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "type": "module", "doc": "<p>This module creates all database tables for vasp relaxation workflows.</p>\n\n<p>With the exception of StagedRelaxation, the data stored in each table is exactly \nthe same -- so they all inherit from the <code>Relaxation</code> class without adding any\nfeatures. See <code>simmate.database.base_data_types.relaxation</code> for details.</p>\n\n<p>StagedRelaxation on the other hand is a NestedCalculation -- in that it connects\na series of relaxation. See <code>simmate.database.base_data_types.calculation_nested</code>\nfor details.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation", "type": "class", "doc": "<p>StagedRelaxation(id, source, directory, prefect_flow_run_id, created_at, updated_at, quality00relaxation, quality01relaxation, quality02relaxation, quality03relaxation, quality04relaxation)</p>\n", "bases": "simmate.database.base_data_types.calculation_nested.NestedCalculation"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.directory", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.child_calculation_tables", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.child_calculation_tables", "type": "variable", "doc": "<p></p>\n", "default_value": " = [<class 'simmate.calculators.vasp.database.relaxation.Quality00Relaxation'>, <class 'simmate.calculators.vasp.database.relaxation.Quality01Relaxation'>, <class 'simmate.calculators.vasp.database.relaxation.Quality02Relaxation'>, <class 'simmate.calculators.vasp.database.relaxation.Quality03Relaxation'>, <class 'simmate.calculators.vasp.database.relaxation.Quality04Relaxation'>]"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality00relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality00relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality00relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality00relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality01relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality01relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality01relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality01relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality02relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality02relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality02relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality02relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality03relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality03relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality03relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality03relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality04relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality04relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.quality04relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.quality04relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.StagedRelaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "StagedRelaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation", "type": "class", "doc": "<p>MITRelaxation(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n", "bases": "simmate.database.base_data_types.relaxation.Relaxation"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.band_gap", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.is_gap_direct", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.energy_fermi", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.volume_change", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.directory", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.corrections", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITRelaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITRelaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep", "type": "class", "doc": "<p>MITIonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, relaxation)</p>\n", "bases": "simmate.database.base_data_types.relaxation.IonicStep"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.number", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.energy_above_hull", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.is_stable", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.decomposes_to", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.formation_energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.site_forces", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.lattice_stress", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.site_forces_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MITIonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MITIonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation", "type": "class", "doc": "<p>MatProjRelaxation(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n", "bases": "simmate.database.base_data_types.relaxation.Relaxation"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.band_gap", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.is_gap_direct", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.energy_fermi", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.volume_change", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.directory", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.corrections", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjRelaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjRelaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep", "type": "class", "doc": "<p>MatProjIonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, relaxation)</p>\n", "bases": "simmate.database.base_data_types.relaxation.IonicStep"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.number", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.energy_above_hull", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.is_stable", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.decomposes_to", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.formation_energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.site_forces", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.lattice_stress", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.site_forces_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.MatProjIonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "MatProjIonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation", "type": "class", "doc": "<p>NEBEndpointRelaxation(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n", "bases": "simmate.database.base_data_types.relaxation.Relaxation"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.band_gap", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.is_gap_direct", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.energy_fermi", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.volume_change", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.directory", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.corrections", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointRelaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointRelaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep", "type": "class", "doc": "<p>NEBEndpointIonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, relaxation)</p>\n", "bases": "simmate.database.base_data_types.relaxation.IonicStep"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.number", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.energy_above_hull", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.is_stable", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.decomposes_to", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.formation_energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.site_forces", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.lattice_stress", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.site_forces_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.NEBEndpointIonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "NEBEndpointIonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation", "type": "class", "doc": "<p>Quality00Relaxation(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n", "bases": "simmate.database.base_data_types.relaxation.Relaxation"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.band_gap", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.is_gap_direct", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.energy_fermi", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.volume_change", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.directory", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.corrections", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep", "type": "class", "doc": "<p>Quality00IonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, relaxation)</p>\n", "bases": "simmate.database.base_data_types.relaxation.IonicStep"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.number", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.energy_above_hull", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.is_stable", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.decomposes_to", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.formation_energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.site_forces", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.lattice_stress", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.site_forces_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality00IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality00IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation", "type": "class", "doc": "<p>Quality01Relaxation(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n", "bases": "simmate.database.base_data_types.relaxation.Relaxation"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.band_gap", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.is_gap_direct", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.energy_fermi", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.volume_change", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.directory", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.corrections", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep", "type": "class", "doc": "<p>Quality01IonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, relaxation)</p>\n", "bases": "simmate.database.base_data_types.relaxation.IonicStep"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.number", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.energy_above_hull", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.is_stable", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.decomposes_to", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.formation_energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.site_forces", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.lattice_stress", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.site_forces_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality01IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality01IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation", "type": "class", "doc": "<p>Quality02Relaxation(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n", "bases": "simmate.database.base_data_types.relaxation.Relaxation"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.band_gap", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.is_gap_direct", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.energy_fermi", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.volume_change", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.directory", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.corrections", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep", "type": "class", "doc": "<p>Quality02IonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, relaxation)</p>\n", "bases": "simmate.database.base_data_types.relaxation.IonicStep"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.number", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.energy_above_hull", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.is_stable", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.decomposes_to", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.formation_energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.site_forces", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.lattice_stress", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.site_forces_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality02IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality02IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation", "type": "class", "doc": "<p>Quality03Relaxation(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n", "bases": "simmate.database.base_data_types.relaxation.Relaxation"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.band_gap", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.is_gap_direct", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.energy_fermi", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.volume_change", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.directory", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.corrections", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep", "type": "class", "doc": "<p>Quality03IonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, relaxation)</p>\n", "bases": "simmate.database.base_data_types.relaxation.IonicStep"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.number", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.energy_above_hull", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.is_stable", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.decomposes_to", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.formation_energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.site_forces", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.lattice_stress", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.site_forces_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality03IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality03IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation", "type": "class", "doc": "<p>Quality04Relaxation(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n", "bases": "simmate.database.base_data_types.relaxation.Relaxation"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.band_gap", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.is_gap_direct", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.energy_fermi", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.conduction_band_minimum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.valence_band_maximum", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.volume_change", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.directory", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.prefect_flow_run_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.corrections", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structure_start_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structure_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structure_final_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structure_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.get_next_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.get_previous_by_created_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.get_next_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.get_previous_by_updated_at", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.structures", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04Relaxation.stagedrelaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04Relaxation.stagedrelaxation", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep", "type": "class", "doc": "<p>Quality04IonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, relaxation)</p>\n", "bases": "simmate.database.base_data_types.relaxation.IonicStep"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.number", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.structure_string", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.nsites", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.nelements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.elements", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.chemical_system", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.density", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.density_atomic", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.volume", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.volume_molar", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.formula_full", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.formula_reduced", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.formula_anonymous", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.spacegroup", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.energy_above_hull", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.is_stable", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.decomposes_to", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.formation_energy", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.formation_energy_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.site_forces", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.lattice_stress", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.site_force_norm_max", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.site_forces_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.site_forces_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.lattice_stress_norm", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.source", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.DoesNotExist", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.MultipleObjectsReturned", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.relaxation_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.relaxation", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.spacegroup_id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.id", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.relaxations_as_start", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.database.relaxation.Quality04IonicStep.relaxations_as_final", "modulename": "simmate.calculators.vasp.database.relaxation", "qualname": "Quality04IonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers", "modulename": "simmate.calculators.vasp.error_handlers", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions", "modulename": "simmate.calculators.vasp.error_handlers.brions", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions", "type": "class", "doc": "<p>This fixes an internal VASP error by increasing POTIM.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.__init__", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['BRIONS problems: POTIM should be increased']"}, {"fullname": "simmate.calculators.vasp.error_handlers.brions.Brions.correct", "modulename": "simmate.calculators.vasp.error_handlers.brions", "qualname": "Brions.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.brmix", "modulename": "simmate.calculators.vasp.error_handlers.brmix", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.brmix.Brmix", "modulename": "simmate.calculators.vasp.error_handlers.brmix", "qualname": "Brmix", "type": "class", "doc": "<p>This handler addresses changes in charge density during a SCF loop. There are\na series of fixes that depend on the type and state of the calculation being\nran, so be sure to read the stages below.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.brmix.Brmix.__init__", "modulename": "simmate.calculators.vasp.error_handlers.brmix", "qualname": "Brmix.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.brmix.Brmix.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.brmix", "qualname": "Brmix.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.brmix.Brmix.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.brmix", "qualname": "Brmix.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.brmix.Brmix.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.brmix", "qualname": "Brmix.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['BRMIX: very serious problems']"}, {"fullname": "simmate.calculators.vasp.error_handlers.brmix.Brmix.check", "modulename": "simmate.calculators.vasp.error_handlers.brmix", "qualname": "Brmix.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have <code>check</code> functions that do one\nof the following:</p>\n\n<ol>\n<li>returns True when the error is there and False otherwise</li>\n<li>the ErrorHandler includes variations of a particular error, where\nit returns a label such as \"Scenario 2\" that .correct() can use.\nAnd in cases where there's no error, either False or None is returned.</li>\n</ol>\n\n<p>This method can be overwritten, but we have a \"default\" function that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.brmix.Brmix.correct", "modulename": "simmate.calculators.vasp.error_handlers.brmix", "qualname": "Brmix.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.edddav", "modulename": "simmate.calculators.vasp.error_handlers.edddav", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.edddav.Edddav", "modulename": "simmate.calculators.vasp.error_handlers.edddav", "qualname": "Edddav", "type": "class", "doc": "<p>When the gradient is not orthogonal, we make a fix depending on what IMSEAR\nis set to.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.edddav.Edddav.__init__", "modulename": "simmate.calculators.vasp.error_handlers.edddav", "qualname": "Edddav.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.edddav.Edddav.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.edddav", "qualname": "Edddav.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.edddav.Edddav.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.edddav", "qualname": "Edddav.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.edddav.Edddav.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.edddav", "qualname": "Edddav.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['EDWAV: internal error, the gradient is not orthogonal']"}, {"fullname": "simmate.calculators.vasp.error_handlers.edddav.Edddav.correct", "modulename": "simmate.calculators.vasp.error_handlers.edddav", "qualname": "Edddav.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm", "type": "class", "doc": "<p>This is an error caused by failed call to LAPCK.</p>\n\n<p>This could be caused by a number of things, such as instability of the\nRMM-DIIS diagonalisation algorithm, an unreasonable crystal geometry, or\neven just incorrect installation of LAPCK.</p>\n\n<p>Further discussion is also located on VASP's forum\n<a href=\"https://www.vasp.at/forum/viewtopic.php?f=3&amp;t=214&amp;p=215\">here</a>.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.__init__", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['WARNING in EDDRMM: call to ZHEGV failed']"}, {"fullname": "simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm.correct", "modulename": "simmate.calculators.vasp.error_handlers.eddrmm", "qualname": "Eddrmm.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav", "type": "class", "doc": "<p>When the gradient is not orthogonal, we make a fix depending on what IMSEAR\nis set to.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.__init__", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['EDWAV: internal error, the gradient is not orthogonal']"}, {"fullname": "simmate.calculators.vasp.error_handlers.edwav.Edwav.correct", "modulename": "simmate.calculators.vasp.error_handlers.edwav", "qualname": "Edwav.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar", "type": "class", "doc": "<p>Abstract base class for an ErrorHandler. These handlers should be used in\ncombination with S3Tasks.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.__init__", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['ELF: KPAR>1 not implemented']"}, {"fullname": "simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar.correct", "modulename": "simmate.calculators.vasp.error_handlers.elf_kpar", "qualname": "ElfKpar.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.Frozen", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "Frozen", "type": "class", "doc": "<p>Checks when the output file has last been editted. If the job has been sitting\nfor a long time (i.e. 1 hour), we consider it frozen and want to change the\nALGO from Normal to Fast or alternatively reduce SYMPREC.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.Frozen.__init__", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "Frozen.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, timeout_limit: float = 3600)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.Frozen.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "Frozen.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.Frozen.check", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "Frozen.check", "type": "function", "doc": "<p>Check for error in the specified directory. Note, we assume that we are\nchecking the vasp.out file. If that file is not present, we say that there\nis no error because another handler will address this.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.frozen.Frozen.correct", "modulename": "simmate.calculators.vasp.error_handlers.frozen", "qualname": "Frozen.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift", "type": "class", "doc": "<p>This handler addresses issues in the K-point mesh that can be fixed by switching\nto a gamma-centered mesh.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.__init__", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['Could not get correct shifts']"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift.correct", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_shift", "qualname": "IncorrectShift.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearing", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearing", "type": "class", "doc": "<p>This checks if a calculation is a metal (zero bandgap), has been run with\nISMEAR=-5, and is not a static calculation. This type of smearing is only\nappropriate for the relaxation of semiconductors and insulators -- not\nmetals. If this occurs, this handler will rerun the calculation\nusing the smearing settings appropriate for metals (ISMEAR=2, SIGMA=0.2).</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearing.__init__", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearing.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearing.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearing.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearing.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearing.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasprun.xml'"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearing.check", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearing.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have <code>check</code> functions that do one\nof the following:</p>\n\n<ol>\n<li>returns True when the error is there and False otherwise</li>\n<li>the ErrorHandler includes variations of a particular error, where\nit returns a label such as \"Scenario 2\" that .correct() can use.\nAnd in cases where there's no error, either False or None is returned.</li>\n</ol>\n\n<p>This method can be overwritten, but we have a \"default\" function that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearing.correct", "modulename": "simmate.calculators.vasp.error_handlers.incorrect_smearing", "qualname": "IncorrectSmearing.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands", "type": "class", "doc": "<p>If the calculation has too few bands, we increase the number of bands by\n10% and try again.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.__init__", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['TOO FEW BANDS']"}, {"fullname": "simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands.correct", "modulename": "simmate.calculators.vasp.error_handlers.insufficient_bands", "qualname": "InsufficientBands.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigma", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigma", "type": "class", "doc": "<p>When ISMEAR &gt;= 0 (Gaussian or Methfessel-Paxton), we need to monitor the\nmagnitude of the entropy term T*S. If the entropy term is larger than\n1 meV/atom, then we reduce value of SIGMA. See VASP documentation for ISMEAR.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigma.__init__", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigma.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, entropy_per_atom_threshold=0.001)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigma.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigma.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigma.check", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigma.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have <code>check</code> functions that do one\nof the following:</p>\n\n<ol>\n<li>returns True when the error is there and False otherwise</li>\n<li>the ErrorHandler includes variations of a particular error, where\nit returns a label such as \"Scenario 2\" that .correct() can use.\nAnd in cases where there's no error, either False or None is returned.</li>\n</ol>\n\n<p>This method can be overwritten, but we have a \"default\" function that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.large_sigma.LargeSigma.correct", "modulename": "simmate.calculators.vasp.error_handlers.large_sigma", "qualname": "LargeSigma.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector", "type": "class", "doc": "<p>This a simple error handler that is active when VASP finds an issue with the\nrotation matrix.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.__init__", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['One of the lattice vectors is very long (>50 A), but AMIN']"}, {"fullname": "simmate.calculators.vasp.error_handlers.long_vector.LongVector.correct", "modulename": "simmate.calculators.vasp.error_handlers.long_vector", "qualname": "LongVector.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetry", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetry", "type": "class", "doc": "<p>Corrects the mesh symmetry error in VASP. This error is sometimes\nnon-fatal and the job can complete successfully. So this error handler\nonly checks at the end of the run, and if the run has converged, no error\nis recorded. We can also ignore this error if symmetry is turned off or if\nautomatic k-mesh has been used.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetry.__init__", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetry.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetry.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetry.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetry.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetry.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetry.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetry.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['Reciprocal lattice and k-lattice belong to different class of']"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetry.check", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetry.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have <code>check</code> functions that do one\nof the following:</p>\n\n<ol>\n<li>returns True when the error is there and False otherwise</li>\n<li>the ErrorHandler includes variations of a particular error, where\nit returns a label such as \"Scenario 2\" that .correct() can use.\nAnd in cases where there's no error, either False or None is returned.</li>\n</ol>\n\n<p>This method can be overwritten, but we have a \"default\" function that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetry.correct", "modulename": "simmate.calculators.vasp.error_handlers.mesh_symmetry", "qualname": "MeshSymmetry.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConverging", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConverging", "type": "class", "doc": "<p>If a run is hitting the maximum number of electronic steps for a significant\nnumber of ionic steps (i.e. 10), then we consider the job to be nonconverging\nand in error. To try fixing this, we switch the ALGO to Normal.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConverging.__init__", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConverging.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, min_ionic_steps: int = 10)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConverging.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConverging.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConverging.check", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConverging.check", "type": "function", "doc": "<p>Check for error in the specified directory. Note, we assume that we are\nchecking the OSZICAR file. If that file is not present, we say that there\nis no error because another handler will address this.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.nonconverging.NonConverging.correct", "modulename": "simmate.calculators.vasp.error_handlers.nonconverging", "qualname": "NonConverging.correct", "type": "function", "doc": "<p>Perform corrections based on the INCAR.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup", "type": "class", "doc": "<p>Fixes an error where VASP does not have the symmetry group operations\navailable. To fix this, we simply need to turn symmetry off.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.__init__", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['group operation missing']"}, {"fullname": "simmate.calculators.vasp.error_handlers.point_group.PointGroup.correct", "modulename": "simmate.calculators.vasp.error_handlers.point_group", "qualname": "PointGroup.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergy", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergy", "type": "class", "doc": "<p>Check if a run has positive absolute energy.\nIf so, we trying changeing ALGO to Normal or alternatively halve the POTIM.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergy.__init__", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergy.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergy.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergy.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergy.check", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergy.check", "type": "function", "doc": "<p>Check for error in the specified directory. Note, we assume that we are\nchecking the OSZICAR file. If that file is not present, we say that there\nis no error because another handler will address this.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergy.correct", "modulename": "simmate.calculators.vasp.error_handlers.positive_energy", "qualname": "PositiveEnergy.correct", "type": "function", "doc": "<p>Perform corrections based on the INCAR.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap", "type": "class", "doc": "<p>Abstract base class for an ErrorHandler. These handlers should be used in\ncombination with S3Tasks.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.__init__", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['POSMAP']"}, {"fullname": "simmate.calculators.vasp.error_handlers.posmap.Posmap.correct", "modulename": "simmate.calculators.vasp.error_handlers.posmap", "qualname": "Posmap.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim", "modulename": "simmate.calculators.vasp.error_handlers.potim", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.Potim", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "Potim", "type": "class", "doc": "<p>This handler checks if a run has excessively large positive energy changes,\nwhere it's typically caused by too large of a POTIM. Runs will end up crashing\nwith some other error (e.g. BRMIX) as the geometry gets progressively worse.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.Potim.__init__", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "Potim.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, dE_per_atom_threshold: float = 1)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.Potim.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "Potim.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.Potim.check", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "Potim.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have <code>check</code> functions that do one\nof the following:</p>\n\n<ol>\n<li>returns True when the error is there and False otherwise</li>\n<li>the ErrorHandler includes variations of a particular error, where\nit returns a label such as \"Scenario 2\" that .correct() can use.\nAnd in cases where there's no error, either False or None is returned.</li>\n</ol>\n\n<p>This method can be overwritten, but we have a \"default\" function that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.potim.Potim.correct", "modulename": "simmate.calculators.vasp.error_handlers.potim", "qualname": "Potim.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel", "type": "class", "doc": "<p>This fixes an internal VASP error by turning off symmetry.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.__init__", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['internal error in subroutine PRICEL']"}, {"fullname": "simmate.calculators.vasp.error_handlers.pricel.Pricel.correct", "modulename": "simmate.calculators.vasp.error_handlers.pricel", "qualname": "Pricel.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx", "type": "class", "doc": "<p>This fixes subspace rotation error by switching ALGO to Normal</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.__init__", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['ERROR in subspace rotation PSSYEVX']"}, {"fullname": "simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx.correct", "modulename": "simmate.calculators.vasp.error_handlers.pssyevx", "qualname": "Pssyevx.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay", "type": "class", "doc": "<p>This handler addresses a series of warning messages that each have the same\nattempted fixes. There are a series of fixes that can be attempted, so we\nkeep a running log of how many times this handler is called.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.__init__", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['ERROR RSPHER', 'REAL_OPTLAY: internal error', 'REAL_OPT: internal ERROR', 'ERROR: SBESSELITER : nicht konvergent']"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.natoms_large_cell", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.natoms_large_cell", "type": "variable", "doc": "<p></p>\n", "default_value": " = 100"}, {"fullname": "simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay.correct", "modulename": "simmate.calculators.vasp.error_handlers.real_optlay", "qualname": "RealOptlay.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg", "type": "class", "doc": "<p>Abstract base class for an ErrorHandler. These handlers should be used in\ncombination with S3Tasks.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.__init__", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['RHOSYG']"}, {"fullname": "simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg.correct", "modulename": "simmate.calculators.vasp.error_handlers.rhosyg", "qualname": "Rhosyg.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix", "type": "class", "doc": "<p>This a simple error handler that is active when VASP struggles to find the\nrotation matrix. VASP gives us the suggested fix directly, which is to\nsimply increase the symmetry precision.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.__init__", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['rotation matrix was not found (increase SYMPREC)']"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix.correct", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix", "qualname": "RotationMatrix.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationNonIntMatrix", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationNonIntMatrix", "type": "class", "doc": "<p>This a simple error handler that is active when VASP finds an issue with the\nrotation matrix.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationNonIntMatrix.__init__", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationNonIntMatrix.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationNonIntMatrix.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationNonIntMatrix.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationNonIntMatrix.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationNonIntMatrix.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationNonIntMatrix.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationNonIntMatrix.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['Found some non-integer element in rotation matrix', 'SGRCON']"}, {"fullname": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationNonIntMatrix.correct", "modulename": "simmate.calculators.vasp.error_handlers.rotation_matrix_nonint", "qualname": "RotationNonIntMatrix.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix", "type": "class", "doc": "<p>This handler fixes when the sub-space-matrix is not hermitian. On the first\nattempt, we switch evaluation of projection operators to reciprocal space.\nIf that doesn't work, the calculation precision is switched to \"Accurate\".</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.__init__", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['WARNING: Sub-Space-Matrix is not hermitian in DAV']"}, {"fullname": "simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix.correct", "modulename": "simmate.calculators.vasp.error_handlers.subspace_matrix", "qualname": "SubspaceMatrix.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise", "type": "class", "doc": "<p>Fixes determination of symmetry in problematic structures.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.__init__", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['determination of the symmetry of your systems shows a strong']"}, {"fullname": "simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise.correct", "modulename": "simmate.calculators.vasp.error_handlers.symprec_noise", "qualname": "SymprecNoise.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetirr", "modulename": "simmate.calculators.vasp.error_handlers.tetirr", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetirr.Tetirr", "modulename": "simmate.calculators.vasp.error_handlers.tetirr", "qualname": "Tetirr", "type": "class", "doc": "<p>This handler addresses an issue that is a combination of the TetrahedronMesh\nand IncorrectShift errors.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetirr.Tetirr.__init__", "modulename": "simmate.calculators.vasp.error_handlers.tetirr", "qualname": "Tetirr.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetirr.Tetirr.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.tetirr", "qualname": "Tetirr.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetirr.Tetirr.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.tetirr", "qualname": "Tetirr.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetirr.Tetirr.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.tetirr", "qualname": "Tetirr.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['Routine TETIRR needs special values']"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetirr.Tetirr.correct", "modulename": "simmate.calculators.vasp.error_handlers.tetirr", "qualname": "Tetirr.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh", "type": "class", "doc": "<p>This handler addresses a series of error messages that are all caused by\nhaving incompatible tetrahedral mesh. In some cases, increasing the k-point\nmesh will fix the issue, and in other cases, we'll simply turn off the\ntetrahedron method.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.__init__", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['Tetrahedron method fails', 'Fatal error detecting k-mesh', 'Fatal error: unable to match k-point', 'Routine TETIRR needs special values', 'Tetrahedron method fails (number of k-points < 4)', 'BZINTS', 'DENTET']"}, {"fullname": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh.correct", "modulename": "simmate.calculators.vasp.error_handlers.tetrahedron_mesh", "qualname": "TetrahedronMesh.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct", "type": "class", "doc": "<p>This error handler swaps the b and c lattice vectors when VASP fails to handle\nits basis vectors properly.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.__init__", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['ERROR: the triple product of the basis vectors']"}, {"fullname": "simmate.calculators.vasp.error_handlers.triple_product.TripleProduct.correct", "modulename": "simmate.calculators.vasp.error_handlers.triple_product", "qualname": "TripleProduct.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.Unconverged", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "Unconverged", "type": "class", "doc": "<p>Check if a calculation converged successfully. If not, the fix depends on\nwhether its the ionic steps or electronic steps are struggling to converge.</p>\n\n<p>NOTE: This can be confusing when used along with the Nonconverging error handler\nbecause both attempt to fix failures in electronic convergence. These handlers\nare converted directly from Custodian, so it's not clear to me why they\nseparated them. In the future, I need to clean this up.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.Unconverged.__init__", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "Unconverged.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.Unconverged.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "Unconverged.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.Unconverged.check", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "Unconverged.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have <code>check</code> functions that do one\nof the following:</p>\n\n<ol>\n<li>returns True when the error is there and False otherwise</li>\n<li>the ErrorHandler includes variations of a particular error, where\nit returns a label such as \"Scenario 2\" that .correct() can use.\nAnd in cases where there's no error, either False or None is returned.</li>\n</ol>\n\n<p>This method can be overwritten, but we have a \"default\" function that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.unconverged.Unconverged.correct", "modulename": "simmate.calculators.vasp.error_handlers.unconverged", "qualname": "Unconverged.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent", "type": "class", "doc": "<p>Calculation is simply restarted using the most recent structure (CONTCAR)</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.__init__", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['ZBRENT: fatal internal in', 'ZBRENT: fatal error in bracketing']"}, {"fullname": "simmate.calculators.vasp.error_handlers.zbrent.Zbrent.correct", "modulename": "simmate.calculators.vasp.error_handlers.zbrent", "qualname": "Zbrent.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev", "type": "class", "doc": "<p>Abstract base class for an ErrorHandler. These handlers should be used in\ncombination with S3Tasks.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.__init__", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['ERROR EDDIAG: Call to routine ZHEEV failed!']"}, {"fullname": "simmate.calculators.vasp.error_handlers.zheev.Zheev.correct", "modulename": "simmate.calculators.vasp.error_handlers.zheev", "qualname": "Zheev.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf", "type": "class", "doc": "<p>This handler attempts to fix a routine failure associated with LAPACK. The\nfix depends on the state of the calculation, so we check the OSZICAR to\ndecide what to do.</p>\n", "bases": "simmate.workflow_engine.error_handler.ErrorHandler"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.__init__", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.is_monitor", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.filename_to_check", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = 'vasp.out'"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.possible_error_messages", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = ['LAPACK: Routine ZPOTRF failed']"}, {"fullname": "simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf.correct", "modulename": "simmate.calculators.vasp.error_handlers.zpotrf", "qualname": "Zpotrf.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs", "modulename": "simmate.calculators.vasp.inputs", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.incar", "modulename": "simmate.calculators.vasp.inputs.incar", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar", "type": "class", "doc": "<p>INCAR object for reading and writing INCAR files. This behaves exactly like\na python dictionary, but has a few extra checks and methods attached to it.\nYou can pass it a dictionary or initialize it just like you would dict(kwargs).\nYou can consider the dict(kwargs) as equivalent to Incar(parameters).</p>\n\n<p>If you want a given setting to be dependent on the structure or dynamically\ndetermined, then we implement these modifiers. This would enable us to\ndo things like ENCUT__per_atom or NGZF__density. We can even have more complex\nmodifiers like multiple_keywords__smart_ldau which signals that our\n\"smart_ldau\" modifier introduces more than one new setting to the INCAR, such\nas LDAUJ, LDAUU, LDAUL, LDAUTYPE, and LDAUPRINT.</p>\n\n<p>TODO: In the future, I want to allow modifiers like __relative_to_previous\nand __use_previous to string settings accross tasks.</p>\n", "bases": "builtins.dict"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.__init__", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.to_evaluated_str", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.to_evaluated_str", "type": "function", "doc": "<p></p>\n", "signature": "(self, structure=None)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.to_file", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.to_file", "type": "function", "doc": "<p>Write Incar to a file.\nArgs:\n    filename (str): filename to write to.</p>\n", "signature": "(self, filename='INCAR', structure=None)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.from_file", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.from_file", "type": "function", "doc": "<p>Reads an Incar object from a file.\nArgs:\n    filename (str): Filename for file\nReturns:\n    Incar object</p>\n", "signature": "(filename='INCAR')", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.compare_incars", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.compare_incars", "type": "function", "doc": "<p>Compares two Incars and indicates which parameters are the same and\nwhich are not. Useful for checking whether two runs were done using\nthe same parameters.\nArgs:\n    other (Incar): The other Incar object to compare to.\nReturns:\n    Dict of the following format:\n    {\"Same\" : parameters_that_are_the_same,\n    \"Different\": parameters_that_are_different}\n    The value of the other_incar is returned for the paramters that\n    are different are returned as {Parameter: (incar_value, other_incar_value)}\n    where None is used as a placeholder. For the same parameters, the\n    dictionary is returned as {Parameter: shared_value}</p>\n", "signature": "(self, other_incar)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_density", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_density", "type": "function", "doc": "<p>The __density modifier means the user wants a specific density. They\nprovide this density in per-angstrom^3 units and we return the\nstructure-specific count that gives this density.\nFor example, density=10 and a structure lattice that volume of 5,\nthen this returns value=10*5=50.</p>\n", "signature": "(structure, density)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_density_a", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_density_a", "type": "function", "doc": "<p>The __density_a modifier means the user wants a specific density along\nthe A lattice vector. They provide this density in per-angstrom units\nand we return the structure-specific count that gives this density.\nFor example, density=10 and a structure lattice that A vector of 5,\nthen this returns value=10*5=50.</p>\n", "signature": "(structure, density)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_density_b", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_density_b", "type": "function", "doc": "<p></p>\n", "signature": "(structure, density)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_density_c", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_density_c", "type": "function", "doc": "<p></p>\n", "signature": "(structure, density)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_per_atom", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_per_atom", "type": "function", "doc": "<p>The __per_atom modifier means the user wants a specific value per atom\nin the unit cell. For example, EDIFF__per_atom=1e-5 and a structure\nwith 50 sites in it would return a value of 1e-5*50=50.</p>\n", "signature": "(structure, per_atom_value)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_smart_magmom", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_smart_magmom", "type": "function", "doc": "<p>The __smart_magmom modifier goes through a series of checks to decide\nwhat to set the MAGMOM as for VASP. In order of priority they are...\n    (1) the magmom property attached to each site in the structure object\n    (2) the spin property attached to the site's specie\n    (3) a value provided explicitly (e.g. {\"Co\": 0.5})\n    (4) a value of 0.6</p>\n", "signature": "(structure, override_values)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_smart_lmaxmix", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_smart_lmaxmix", "type": "function", "doc": "<p>This modifier sets LMAXMIX if there are any d or f electrons present\nin the structure.</p>\n", "signature": "(structure, lmaxmix_config)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_smart_ldau", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_smart_ldau", "type": "function", "doc": "<p>This modifier handles a series of keyword arguments that are associated\nwith LDAU, including LDAUJ, LDAUL, LDAUTYPE, LDAUU, LDAUPRINT, and LMAXMIX.\nTherefore, a complex dictionary is passed to this. The format looks like this...\n    LDAU__multiple_keywords__smart_ldau = dict(\n        LDAU__auto=True,\n        LDAUTYPE=2,\n        LDAUPRINT=1,\n        LDAUJ={...},\n        LDAUL={...},\n        LDAUU={...},\n        LMAXMIX__auto=True,\n        )\nThe LDAUJ, LDAUL, and LDAUU values can be a dictionary of elements to\nvalue, or (most commonly) a nested dictionary. For example...\n    LDAUJ = {\"F\":{\"Co\":0}}\nThis would mean if the structure is a fluoride, set the LDAUJ for Co to 0.\nIf there are multiple options here (e.g. for fluorides and oxides), then\npriority is placed on the most electronegative element. This would mean\nsome thing like yttrium oxide fluoride would be treated as a fluoride over\nan oxide.</p>\n", "signature": "(structure, ldau_config)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.incar.Incar.keyword_modifier_smart_ismear", "modulename": "simmate.calculators.vasp.inputs.incar", "qualname": "Incar.keyword_modifier_smart_ismear", "type": "function", "doc": "<p>The smearing value used here depends on if we have a semiconductor,\ninsulator, or metal. This modifier makes a \"best-guess\" on what the\nmaterial is and uses the proper smearing type. Note that if this\nguess is wrong, it is useful to have the IncorrectSmearing error\nhandler to fix this as VASP runs.</p>\n\n<p>Read more about the VASP recommended ISMEAR settings here:\n    https://www.vasp.at/wiki/index.php/ISMEAR</p>\n", "signature": "(structure, ismear_config)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.kpoints", "modulename": "simmate.calculators.vasp.inputs.kpoints", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.kpoints.Kpoints", "modulename": "simmate.calculators.vasp.inputs.kpoints", "qualname": "Kpoints", "type": "class", "doc": "<p>This class takes a structure along with a KptGrid or KptPath object and\nthen generates a VASP formatted KPOINTS file for you. Alternatively,\nyou can provide a structre and a KPOINTS file to get back a KptGrid or\nKptPath object. This behaves as a converter class, just like the POSCAR class.</p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.kpoints.Kpoints.__init__", "modulename": "simmate.calculators.vasp.inputs.kpoints", "qualname": "Kpoints.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.kpoints.Kpoints.write_file", "modulename": "simmate.calculators.vasp.inputs.kpoints", "qualname": "Kpoints.write_file", "type": "function", "doc": "<p></p>\n", "signature": "(structure, kpoint_method, filename='KPOINTS', comment=None)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.poscar", "modulename": "simmate.calculators.vasp.inputs.poscar", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.poscar.Poscar", "modulename": "simmate.calculators.vasp.inputs.poscar", "qualname": "Poscar", "type": "class", "doc": "<p>This is format converter class for loading and writing POSCAR or CONTCAR\nfiles, which are VASP's version of structure files (as oppossed to a cif\nfile for example). When you initialize this class, you're only setting generic\nsettings. You will either load a POSCAR file by doing...\n    my_structure = Poscar.from_file(my_poscar_filename)\nOr you will write a POSCAR file using your Simmate Structure by doing...\n    Poscar.write_file(my_structure, my_poscar_filename)\nIf you have a ton of files to write, you can do use this method in parallel too...\n    Poscar.write_many_files([struct1, struct2, ...], [filename1, filename2, ...])</p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.poscar.Poscar.__init__", "modulename": "simmate.calculators.vasp.inputs.poscar", "qualname": "Poscar.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.poscar.Poscar.from_file", "modulename": "simmate.calculators.vasp.inputs.poscar", "qualname": "Poscar.from_file", "type": "function", "doc": "<p>Reads a Poscar from a file.\nThe code will attempt to determine the elements in the POSCAR\nin the following order of priority:\n    1. If element symbols are at the end of each coordinate, then this\n    is the prefferred method and the most explicit in VASP.\n    2. Look for element symbols on the 6th line and match them with the\n    nsites on the 7th line. This is 2nd in priority because we do not\n    enforce that the structure's sites are sorted in the poscar.\nArgs:\n    filename (str): File name containing Poscar data.\n    read_velocities (bool): Whether to read or not velocities if they\n        are present in the POSCAR. Default is True.\nReturns:\n    Structure object.</p>\n", "signature": "(filename='POSCAR', read_velocities=False)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.poscar.Poscar.to_file", "modulename": "simmate.calculators.vasp.inputs.poscar", "qualname": "Poscar.to_file", "type": "function", "doc": "<p>Returns a string to be written as a POSCAR file. By default, site\nsymbols are written, which means compatibility is for vasp &gt;= 5.\nArgs:\n    direct (bool): Whether coordinates are output in direct or\n        cartesian. Defaults to True.\n    vasp4_compatible (bool): Set to True to omit site symbols on 6th\n        line to maintain backward vasp 4.x compatibility. Defaults\n        to False.\n    significant_figures (int): No. of significant figures to\n        output all quantities. Defaults to 6. Note that positions are\n        output in fixed point, while velocities are output in\n        scientific format.\nReturns:\n    String representation of POSCAR.</p>\n", "signature": "(\n    structure,\n    filename='POSCAR',\n    comment=None,\n    add_selective_dynamics=False,\n    add_velocities=False,\n    significant_figures=6\n)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.potcar", "modulename": "simmate.calculators.vasp.inputs.potcar", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.potcar.Potcar", "modulename": "simmate.calculators.vasp.inputs.potcar", "qualname": "Potcar", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.inputs.potcar.Potcar.__init__", "modulename": "simmate.calculators.vasp.inputs.potcar", "qualname": "Potcar.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.potcar.Potcar.to_file_from_type", "modulename": "simmate.calculators.vasp.inputs.potcar", "qualname": "Potcar.to_file_from_type", "type": "function", "doc": "<p></p>\n", "signature": "(elements, functional, filename='POTCAR', element_mappings=None)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.inputs.potcar_mappings", "modulename": "simmate.calculators.vasp.inputs.potcar_mappings", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.outputs", "modulename": "simmate.calculators.vasp.outputs", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar", "modulename": "simmate.calculators.vasp.outputs.oszicar", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar", "type": "class", "doc": "<p>Reads all data from an OSZICAR file. This includes data on each electronic\nand ionic step of the calculation.</p>\n\n<p>Note that this class is only used when the speed of file-reading is important.\nIf you are trying to analyze your VASP run, you should instead use the VaspXML\noutput, which gives all of the information already in the OSZICAR and more!</p>\n\n<p>To help with understanding the OSZICAR file, you can also look here:\n    https://www.vasp.at/wiki/index.php/OSZICAR</p>\n"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar.__init__", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, filename='OSZICAR')", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar.all_electronic_step_energies", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar.all_electronic_step_energies", "type": "function", "doc": "<p></p>\n", "signature": "(self, ionic_step_number)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar.all_ionic_step_energies", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar.all_ionic_step_energies", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.outputs.oszicar.Oszicar.energy_final", "modulename": "simmate.calculators.vasp.outputs.oszicar", "qualname": "Oszicar.energy_final", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks", "modulename": "simmate.calculators.vasp.tasks", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.band_structure", "modulename": "simmate.calculators.vasp.tasks.band_structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.band_structure.MatProjBandStructure", "modulename": "simmate.calculators.vasp.tasks.band_structure", "qualname": "MatProjBandStructure", "type": "class", "doc": "<p>Calculates the band structure using Materials Project settings.</p>\n\n<p>Your stucture will be converted to the standardized-primitive unitcell so\nthat the high-symmetry K-point path can be used.</p>\n\n<p>This is also a non self-consistent field (non-SCF) calculation and thus uses\nthe a fixed charge density from a previous static energy calculation.</p>\n\n<p>We do NOT recommend running this calculation on its own. Instead, you should\nuse the full workflow, which handles the preliminary relaxation and SCF\nenergy calculation for you. This S3Task is only the final step of that workflow.</p>\n\n<p>See <code>vasp.workflows.band_structure</code>.</p>\n", "bases": "simmate.calculators.vasp.tasks.energy.materials_project.MatProjStaticEnergy"}, {"fullname": "simmate.calculators.vasp.tasks.band_structure.MatProjBandStructure.incar", "modulename": "simmate.calculators.vasp.tasks.band_structure", "qualname": "MatProjBandStructure.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'EDIFF__per_atom': 5e-05, 'ENCUT': 520, 'IBRION': -1, 'ISIF': 3, 'ISMEAR': 0, 'ISPIN': 2, 'ISYM': 0, 'KSPACING': 0.4, 'LASPH': True, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 100, 'NSW': 0, 'PREC': 'Accurate', 'SIGMA': 0.01, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'multiple_keywords__smart_ldau': {'LDAU__auto': True, 'LDAUTYPE': 2, 'LDAUPRINT': 1, 'LMAXMIX__auto': True, 'LDAUJ': {}, 'LDAUL': {'F': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}, 'O': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}}, 'LDAUU': {'F': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}, 'O': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}}}, 'ICHARGE': 11}"}, {"fullname": "simmate.calculators.vasp.tasks.band_structure.MatProjBandStructure.kpoints", "modulename": "simmate.calculators.vasp.tasks.band_structure", "qualname": "MatProjBandStructure.kpoints", "type": "variable", "doc": "<p>(experimental feature)\nThe KptGrid or KptPath generator used to create the KPOINTS file. Note,\nthis attribute is optional becuase VASP supports setting Kpts by adding\nKSPACING to the INCAR. If KSPACING is set in the INCAR, we ignore whatever \nis set here.</p>\n", "default_value": " = None"}, {"fullname": "simmate.calculators.vasp.tasks.band_structure.MatProjBandStructure.kpoints_line_density", "modulename": "simmate.calculators.vasp.tasks.band_structure", "qualname": "MatProjBandStructure.kpoints_line_density", "type": "variable", "doc": "<p></p>\n", "default_value": " = 20"}, {"fullname": "simmate.calculators.vasp.tasks.band_structure.MatProjBandStructure.setup", "modulename": "simmate.calculators.vasp.tasks.band_structure", "qualname": "MatProjBandStructure.setup", "type": "function", "doc": "<p>Writes input files for this calculation. This differs from the normal\nVaspTask setup because it converts the structure to the standard primative\nfirst and then writes a KPOINT file with using a highsym path.</p>\n", "signature": "(self, structure, directory)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.band_structure.check_for_standardization_bugs", "modulename": "simmate.calculators.vasp.tasks.band_structure", "qualname": "check_for_standardization_bugs", "type": "function", "doc": "<p></p>\n", "signature": "(structure_original, structure_new)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.base", "modulename": "simmate.calculators.vasp.tasks.base", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.base.get_default_parallel_settings", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "get_default_parallel_settings", "type": "function", "doc": "<p>We load the user's default parallel settings from\n    ~/simmate/vasp/INCAR_parallel_settings\nIf this file doesn't exist, then we just use an empty dictionary.</p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask", "type": "class", "doc": "<h2 id=\"the-supervised-staged-shell-task-aka-s3task\">The Supervised-Staged-Shell Task (aka \"S3Task\")</h2>\n\n<p>This class contains the core functionality to <strong>supervise</strong> a <strong>staged</strong> task\ninvolving some <strong>shell</strong> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<ul>\n<li>setup = writing any input files required for the program</li>\n<li>execution = actually calling the command and running our program</li>\n<li>workup = loading data from output files back into python</li>\n</ul>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<!--\nTODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...\n\n- Write Input Files based on custom+defualt settings\n- Run the calculation by calling the program\n- Load ouput files\n- check for errors\n- [correct them, rerun]\n- postprocess/analysis\n-->\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>   <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculator.example.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleTask</span>\n\n   <span class=\"n\">my_task</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTask</span><span class=\"p\">()</span>\n   <span class=\"n\">my_result</span> <span class=\"o\">=</span> <span class=\"n\">my_task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, and Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules, so you\nwill likely want to subclass this. Here is a basic example of inheriting\nand then running a task:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflow_engine</span> <span class=\"kn\">import</span> <span class=\"n\">S3Task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">example.error_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">PossibleError1</span><span class=\"p\">,</span> <span class=\"n\">PossibleError2</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleTask</span><span class=\"p\">(</span><span class=\"n\">SSSTask</span><span class=\"p\">):</span>\n\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;echo example&quot;</span>  <span class=\"c1\"># just prints out &quot;example&quot;</span>\n    <span class=\"n\">max_corrections</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n    <span class=\"n\">error_handlers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">PossibleError1</span><span class=\"p\">,</span> <span class=\"n\">PossibleError2</span><span class=\"p\">]</span>\n    <span class=\"n\">polling_timestep</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n    <span class=\"n\">monitor_freq</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">some_new_setting</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"p\">,</span> <span class=\"n\">directory</span><span class=\"p\">):</span>  <span class=\"c1\"># &lt;-- MUST have these two args</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I&#39;m setting things up!&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;My new setting is </span><span class=\"si\">{</span><span class=\"n\">some_new_setting</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">workup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">directory</span><span class=\"p\">):</span>  <span class=\"c1\"># &lt;-- MUST have this arg</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I&#39;m working things up!&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTask</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n\n<p>For a full (and advanced) example, of a subclass take a look at\n<code>simmate.calculators.vasp.tasks.base.VaspTask</code>.</p>\n", "bases": "simmate.workflow_engine.supervised_staged_shell_task.S3Task"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.requires_structure", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.requires_structure", "type": "variable", "doc": "<p>Vasp calculations always need an input structure, so this is always True.</p>\n", "annotation": ": bool", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.command", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.command", "type": "variable", "doc": "<p>The command to call vasp, which is typically vasp_std. To ensure error\nhandlers work properly, make sure your command has \"> vasp.out\" at the end.</p>\n", "annotation": ": str", "default_value": " = 'vasp_std > vasp.out'"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.incar", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = None"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.incar_parallel_settings", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.incar_parallel_settings", "type": "variable", "doc": "<p>The parallel settings to add on to the base incar. These should not effect \nthe calculation result in any way (only how fast it completes), but they \nare still selected based on the computer specs and what runs fastest on it.\nTherefore, these settings are loaded from ~/simmate/vasp/INCAR_parallel_settings\nby default and adding to this file should be the preferred method for updating\nthese settings.</p>\n", "annotation": ": dict", "default_value": " = {}"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.kpoints", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.kpoints", "type": "variable", "doc": "<p>(experimental feature)\nThe KptGrid or KptPath generator used to create the KPOINTS file. Note,\nthis attribute is optional becuase VASP supports setting Kpts by adding\nKSPACING to the INCAR. If KSPACING is set in the INCAR, we ignore whatever \nis set here.</p>\n", "default_value": " = None"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.functional", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.functional", "type": "variable", "doc": "<p>This directs which Potcar files to grab. You would set this to a string\nof what you want, such as \"PBE\", \"PBE_GW\", or \"LDA\".</p>\n", "annotation": ": str", "default_value": " = None"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.potcar_mappings", "type": "variable", "doc": "<p>This is an optional parameter to override Simmate's default selection of\npotentials based off of the functional chosen. The defaults are located\nin simmate.calculators.vasp.inputs.potcar_mappings. You can supply your\nown mapping dictionary or update the specific potentials you'd like. \nFor example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.inputs.potcar_mappings</span> <span class=\"kn\">import</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span>\n  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c1\"># don&#39;t forget to copy!</span>\n  <span class=\"n\">element_mappings</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># if you wish to update any</span>\n</code></pre></div>\n\n<p>or if you only use Carbon and don't care about other elements...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Read more on this inside the Potcar class and be careful with updating!</p>\n", "annotation": ": dict", "default_value": " = None"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.confirm_convergence", "type": "variable", "doc": "<p>This flag controls whether or not we raise an error when the calculation \nfailed to converge. In somecases we still want results from calculations \nthat did NOT converge successfully.</p>\n", "annotation": ": bool", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.pre_sanitize_structure", "type": "variable", "doc": "<p>In some cases, we may want to sanitize the structure during our setup().\nThis means converting to the LLL-reduced primitive cell. This simply does:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">structure_sanitzed</span> <span class=\"o\">=</span> <span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">santize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.pre_standardize_structure", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.pre_standardize_structure", "type": "variable", "doc": "<p>(experimental feature)\nIn some cases, we may want to convert the structure to the standard primitive\nof a structure. For example, this is required when calculating band structures\nand ensuring we have a standardized high-symmetry path.</p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.setup", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.setup", "type": "function", "doc": "<p>This abstract method is ran before the command is actually executed. This\nallows for some pre-processing, such as writing input files or any other\nanalysis.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase setup() is normally called within the run() method.</p>\n\n<p>Some tasks don't require a setup() method, so by default, this method\ndoesn't nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>structure</code>:\nThe structure to use for the task, if one is required.</li>\n<li><code>directory</code>:\nThe directory to run everything in. Must exist already.</li>\n<li><code>**kwargs</code>:\nExtra kwargs that may be passed to some function within. Because\nSimmate prefers fixed settings for their workflows, this is typically\nnot used, but instead, keywords should be explicitly defined when\nwriting a setup method.</li>\n</ul>\n", "signature": "(\n    self,\n    structure: simmate.toolkit.base_data_types.structure.Structure,\n    directory: str\n)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.workup", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.workup", "type": "function", "doc": "<p>This is the most basic VASP workup where I simply load the final structure,\nfinal energy, and (if requested) confirm convergence. I will likely make\nthis a common function for this vasp module down the road.</p>\n", "signature": "(self, directory: str)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.base.VaspTask.get_config", "modulename": "simmate.calculators.vasp.tasks.base", "qualname": "VaspTask.get_config", "type": "function", "doc": "<p>Grabs the overall settings from the class. This is useful for printing out\nsettings for users to inspect.</p>\n", "signature": "(cls)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.density_of_states", "modulename": "simmate.calculators.vasp.tasks.density_of_states", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.density_of_states.MatProjDensityOfStates", "modulename": "simmate.calculators.vasp.tasks.density_of_states", "qualname": "MatProjDensityOfStates", "type": "class", "doc": "<p>Calculates the density of states using Materials Project settings.</p>\n\n<p>This is a non self-consistent field (non-SCF) calculation and thus uses\nthe a fixed charge density from a previous static energy calculation.</p>\n\n<p>We do NOT recommend running this calculation on its own. Instead, you should\nuse the full workflow, which handles the preliminary relaxation and SCF\nenergy calculation for you. This S3Task is only the final step of that workflow.</p>\n\n<p>See <code>vasp.workflows.density_of_states</code>.</p>\n", "bases": "simmate.calculators.vasp.tasks.energy.materials_project.MatProjStaticEnergy"}, {"fullname": "simmate.calculators.vasp.tasks.density_of_states.MatProjDensityOfStates.incar", "modulename": "simmate.calculators.vasp.tasks.density_of_states", "qualname": "MatProjDensityOfStates.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'EDIFF__per_atom': 5e-05, 'ENCUT': 520, 'IBRION': -1, 'ISIF': 3, 'ISMEAR': -5, 'ISPIN': 2, 'ISYM': 2, 'KSPACING': 0.4, 'LASPH': True, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 100, 'NSW': 0, 'PREC': 'Accurate', 'SIGMA': 0.05, 'multiple_keywords__smart_ldau': {'LDAU__auto': True, 'LDAUTYPE': 2, 'LDAUPRINT': 1, 'LMAXMIX__auto': True, 'LDAUJ': {}, 'LDAUL': {'F': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}, 'O': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}}, 'LDAUU': {'F': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}, 'O': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}}}, 'ICHARGE': 11, 'NEDOS': 2001}"}, {"fullname": "simmate.calculators.vasp.tasks.dynamics", "modulename": "simmate.calculators.vasp.tasks.dynamics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.dynamics.MITDynamicsTask", "modulename": "simmate.calculators.vasp.tasks.dynamics", "qualname": "MITDynamicsTask", "type": "class", "doc": "<p>Runs a molecular dynamics simulation using MIT Project settings. The lattice\nwill remain fixed during the run.</p>\n\n<p>By default, this will run from 300-1200 Kelvin over 10,000 steps of 2\nfemtoseconds, but start/end temperatures as well as step size/number can\nbe adjusted when initializing this class. Note, setting parameters in the\ninit is atypical for Simmate tasks, but we allow it for MD run because it\ndoes not affect the interopability of results -- that is, results can\nbe compared accross runs regardless of temp/time.</p>\n\n<p>Provide your structure as the desired supercell, as the setup of this\ncalculation does not modify your input structure.</p>\n", "bases": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation"}, {"fullname": "simmate.calculators.vasp.tasks.dynamics.MITDynamicsTask.incar", "modulename": "simmate.calculators.vasp.tasks.dynamics", "qualname": "MITDynamicsTask.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'ENCUT': 520, 'IBRION': 0, 'ICHARG': 1, 'ISIF': 0, 'ISPIN': 2, 'ISYM': 0, 'LORBIT': 11, 'LREAL': True, 'LWAVE': True, 'NELM': 500, 'NELMIN': 4, 'NSW': 'Defaults to 10,000 but can be set by the user', 'PREC': 'Low', 'KSPACING': 0.5, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'LMAXMIX__smart_lmaxmix': True, 'TEBEG': 'Defaults to 300 but can be set by the user', 'TEEND': 'Defaults to 1200 but can be set by the user', 'POTIM': 'Defaults to 2 but can be set by the user', 'EDIFF__per_atom': 1e-06, 'LSCALU': False, 'LCHARG': False, 'LPLANE': False, 'ISMEAR': 0, 'BMIX': 1, 'MAXMIX': 20, 'KBLOCK': 100, 'SMASS': 0}"}, {"fullname": "simmate.calculators.vasp.tasks.dynamics.MITDynamicsTask.error_handlers", "modulename": "simmate.calculators.vasp.tasks.dynamics", "qualname": "MITDynamicsTask.error_handlers", "type": "variable", "doc": "<p>A list of ErrorHandler objects to use in order of priority (that is, highest\npriority is first). If one handler is triggered, the correction will be \napplied and none of the following handlers will be checked.</p>\n", "annotation": ": List[simmate.workflow_engine.error_handler.ErrorHandler]", "default_value": " = []"}, {"fullname": "simmate.calculators.vasp.tasks.dynamics.MITDynamicsTask.setup", "modulename": "simmate.calculators.vasp.tasks.dynamics", "qualname": "MITDynamicsTask.setup", "type": "function", "doc": "<p>This abstract method is ran before the command is actually executed. This\nallows for some pre-processing, such as writing input files or any other\nanalysis.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase setup() is normally called within the run() method.</p>\n\n<p>Some tasks don't require a setup() method, so by default, this method\ndoesn't nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>structure</code>:\nThe structure to use for the task, if one is required.</li>\n<li><code>directory</code>:\nThe directory to run everything in. Must exist already.</li>\n<li><code>**kwargs</code>:\nExtra kwargs that may be passed to some function within. Because\nSimmate prefers fixed settings for their workflows, this is typically\nnot used, but instead, keywords should be explicitly defined when\nwriting a setup method.</li>\n</ul>\n", "signature": "(\n    self,\n    structure: simmate.toolkit.base_data_types.structure.Structure,\n    directory: str,\n    temperature_start: int = 300,\n    temperature_end: int = 1200,\n    time_step: float = 2,\n    nsteps: int = 10000\n)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.energy", "modulename": "simmate.calculators.vasp.tasks.energy", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.materials_project", "modulename": "simmate.calculators.vasp.tasks.energy.materials_project", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.materials_project.MatProjStaticEnergy", "modulename": "simmate.calculators.vasp.tasks.energy.materials_project", "qualname": "MatProjStaticEnergy", "type": "class", "doc": "<p>Runs a VASP static energy calculation using Materials Project settings.</p>\n\n<p>This is identical to relaxation/matproj, but just a single ionic step.</p>\n", "bases": "simmate.calculators.vasp.tasks.relaxation.materials_project.MatProjRelaxation"}, {"fullname": "simmate.calculators.vasp.tasks.energy.materials_project.MatProjStaticEnergy.incar", "modulename": "simmate.calculators.vasp.tasks.energy.materials_project", "qualname": "MatProjStaticEnergy.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'EDIFF__per_atom': 5e-05, 'ENCUT': 520, 'IBRION': -1, 'ISIF': 3, 'ISMEAR': -5, 'ISPIN': 2, 'ISYM': 0, 'KSPACING': 0.4, 'LASPH': True, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 100, 'NSW': 0, 'PREC': 'Accurate', 'SIGMA': 0.05, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'multiple_keywords__smart_ldau': {'LDAU__auto': True, 'LDAUTYPE': 2, 'LDAUPRINT': 1, 'LMAXMIX__auto': True, 'LDAUJ': {}, 'LDAUL': {'F': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}, 'O': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}}, 'LDAUU': {'F': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}, 'O': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}}}}"}, {"fullname": "simmate.calculators.vasp.tasks.energy.materials_project.MatProjStaticEnergy.error_handlers", "modulename": "simmate.calculators.vasp.tasks.energy.materials_project", "qualname": "MatProjStaticEnergy.error_handlers", "type": "variable", "doc": "<p>A list of ErrorHandler objects to use in order of priority (that is, highest\npriority is first). If one handler is triggered, the correction will be \napplied and none of the following handlers will be checked.</p>\n", "annotation": ": List[simmate.workflow_engine.error_handler.ErrorHandler]", "default_value": " = [<simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh object>, <simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm object>, <simmate.calculators.vasp.error_handlers.nonconverging.NonConverging object>]"}, {"fullname": "simmate.calculators.vasp.tasks.energy.mit", "modulename": "simmate.calculators.vasp.tasks.energy.mit", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.mit.MITStaticEnergy", "modulename": "simmate.calculators.vasp.tasks.energy.mit", "qualname": "MITStaticEnergy", "type": "class", "doc": "<p>Runs a VASP static energy calculation using MIT Project settings.</p>\n\n<p>This is identical to relaxation/mit, but just a single ionic step.</p>\n", "bases": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation"}, {"fullname": "simmate.calculators.vasp.tasks.energy.mit.MITStaticEnergy.incar", "modulename": "simmate.calculators.vasp.tasks.energy.mit", "qualname": "MITStaticEnergy.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Normal', 'EDIFF': 1e-05, 'ENCUT': 520, 'IBRION': -1, 'ICHARG': 1, 'ISIF': 3, 'ISPIN': 2, 'ISYM': 0, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 200, 'NELMIN': 6, 'NSW': 0, 'PREC': 'Accurate', 'KSPACING': 0.4, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'LMAXMIX__smart_lmaxmix': True, 'multiple_keywords__smart_ldau': {'LDAU__auto': True, 'LDAUTYPE': 2, 'LDAUPRINT': 1, 'LDAUJ': {}, 'LDAUL': {'F': {'Ag': 2, 'Co': 2, 'Cr': 2, 'Cu': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Nb': 2, 'Ni': 2, 'Re': 2, 'Ta': 2, 'V': 2, 'W': 2}, 'O': {'Ag': 2, 'Co': 2, 'Cr': 2, 'Cu': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Nb': 2, 'Ni': 2, 'Re': 2, 'Ta': 2, 'V': 2, 'W': 2}, 'S': {'Fe': 2, 'Mn': 2.5}}, 'LDAUU': {'F': {'Ag': 1.5, 'Co': 3.4, 'Cr': 3.5, 'Cu': 4, 'Fe': 4.0, 'Mn': 3.9, 'Mo': 4.38, 'Nb': 1.5, 'Ni': 6, 'Re': 2, 'Ta': 2, 'V': 3.1, 'W': 4.0}, 'O': {'Ag': 1.5, 'Co': 3.4, 'Cr': 3.5, 'Cu': 4, 'Fe': 4.0, 'Mn': 3.9, 'Mo': 4.38, 'Nb': 1.5, 'Ni': 6, 'Re': 2, 'Ta': 2, 'V': 3.1, 'W': 4.0}, 'S': {'Fe': 1.9, 'Mn': 2.5}}}, 'ISMEAR': -5, 'SIGMA': 0.05}"}, {"fullname": "simmate.calculators.vasp.tasks.energy.mit.MITStaticEnergy.error_handlers", "modulename": "simmate.calculators.vasp.tasks.energy.mit", "qualname": "MITStaticEnergy.error_handlers", "type": "variable", "doc": "<p>A list of ErrorHandler objects to use in order of priority (that is, highest\npriority is first). If one handler is triggered, the correction will be \napplied and none of the following handlers will be checked.</p>\n", "annotation": ": List[simmate.workflow_engine.error_handler.ErrorHandler]", "default_value": " = [<simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh object>, <simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm object>, <simmate.calculators.vasp.error_handlers.nonconverging.NonConverging object>]"}, {"fullname": "simmate.calculators.vasp.tasks.energy.neb_endpoint", "modulename": "simmate.calculators.vasp.tasks.energy.neb_endpoint", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.neb_endpoint.NEBEndpointStaticEnergy", "modulename": "simmate.calculators.vasp.tasks.energy.neb_endpoint", "qualname": "NEBEndpointStaticEnergy", "type": "class", "doc": "<p>Runs a VASP energy calculation using MIT Project settings, where some\nsettings are adjusted to accomodate large supercells with defects.</p>\n\n<p>This is identical to relaxation/neb_endpoint, but just a single ionic step.</p>\n\n<p>You typically shouldn't use this workflow directly, but instead use the\nhigher-level NEB workflows (e.g. diffusion/neb_all_paths or\ndiffusion/neb_from_endpoints), which call this workflow for you.</p>\n", "bases": "simmate.calculators.vasp.tasks.relaxation.neb_endpoint.NEBEndpointRelaxation"}, {"fullname": "simmate.calculators.vasp.tasks.energy.neb_endpoint.NEBEndpointStaticEnergy.incar", "modulename": "simmate.calculators.vasp.tasks.energy.neb_endpoint", "qualname": "NEBEndpointStaticEnergy.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'EDIFF': 1e-05, 'ENCUT': 520, 'IBRION': -1, 'ICHARG': 1, 'ISIF': 2, 'ISPIN': 2, 'ISYM': 0, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 200, 'NELMIN': 4, 'NSW': 0, 'PREC': 'Accurate', 'KSPACING': 0.5, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'LMAXMIX__smart_lmaxmix': True, 'EDIFFG': -0.02, 'ISMEAR': 0, 'LDAU': False}"}, {"fullname": "simmate.calculators.vasp.tasks.energy.neb_endpoint.NEBEndpointStaticEnergy.error_handlers", "modulename": "simmate.calculators.vasp.tasks.energy.neb_endpoint", "qualname": "NEBEndpointStaticEnergy.error_handlers", "type": "variable", "doc": "<p>A list of ErrorHandler objects to use in order of priority (that is, highest\npriority is first). If one handler is triggered, the correction will be \napplied and none of the following handlers will be checked.</p>\n", "annotation": ": List[simmate.workflow_engine.error_handler.ErrorHandler]", "default_value": " = [<simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh object>, <simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm object>, <simmate.calculators.vasp.error_handlers.nonconverging.NonConverging object>]"}, {"fullname": "simmate.calculators.vasp.tasks.energy.quality_04", "modulename": "simmate.calculators.vasp.tasks.energy.quality_04", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.energy.quality_04.Quality04Energy", "modulename": "simmate.calculators.vasp.tasks.energy.quality_04", "qualname": "Quality04Energy", "type": "class", "doc": "<p>Runs a rough VASP static energy calculation.</p>\n\n<p><code>Quality 04</code> relates to our ranking of relaxation qualities, where this\ncalculation uses the same settings as the Quality04Relaxation.</p>\n\n<p>Note, even though this is currently our highest quality preset, these\nsettings are still only suitable for high-throughput calculations or massive\nsupercells. Settings are still below MIT and Materials Project quality.</p>\n\n<p>Most commonly, this is used in evolutionary searches (for structure\nprediction). We recommend instead using the relaxation/staged workflow,\nwhich uses this calculation as the sixth and final step -- after a series\nof rough relaxations are done.</p>\n", "bases": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation"}, {"fullname": "simmate.calculators.vasp.tasks.energy.quality_04.Quality04Energy.incar", "modulename": "simmate.calculators.vasp.tasks.energy.quality_04", "qualname": "Quality04Energy.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'PREC': 'Normal', 'EDIFF': 1e-05, 'ENCUT': 450, 'ISIF': 3, 'NSW': 0, 'IBRION': -1, 'POTIM': 0.02, 'LCHARG': False, 'LWAVE': False, 'KSPACING': 0.4, 'ALGO': 'Normal', 'ISMEAR': -5, 'SIGMA': 0.05}"}, {"fullname": "simmate.calculators.vasp.tasks.nudged_elastic_band", "modulename": "simmate.calculators.vasp.tasks.nudged_elastic_band", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.nudged_elastic_band.MITNudgedElasticBand", "modulename": "simmate.calculators.vasp.tasks.nudged_elastic_band", "qualname": "MITNudgedElasticBand", "type": "class", "doc": "<p>Runs a NEB relaxation on a list of structures (aka images) using MIT Project\nsettings. The lattice remains fixed and symmetry is turned off for this\nrelaxation.</p>\n\n<p>You shouldn't use this workflow directly, but instead use the higher-level\nNEB workflows (e.g. diffusion/neb_all_paths or diffusion/neb_from_endpoints),\nwhich call this workflow for you.</p>\n\n<h2 id=\"developer-notes\">Developer Notes</h2>\n\n<p>This NEB task is very different from all other VASP tasks!</p>\n\n<p>The first big difference is that it takes a list of structures instead of\njust one structure. This means that instead of \"structure=...\", you should\nactually do \"structures=[structure1, structure2, structure3, ...]\", where\nthe list of structures is your list of images.</p>\n\n<p>The second big difference is that VASP uses a different folder setup when\nrunning these calculations. It has a series of folders named 00, 01, 02, ... N,\nwhere 00 is the starting image, N is the endpoint image, and 01 to (N-1) are\nthe midpoint images. Simmate handles this inside the task, but knowing this\nmay be useful if you'd like to make your own variation of this class.</p>\n", "bases": "simmate.calculators.vasp.tasks.relaxation.neb_endpoint.NEBEndpointRelaxation"}, {"fullname": "simmate.calculators.vasp.tasks.nudged_elastic_band.MITNudgedElasticBand.incar", "modulename": "simmate.calculators.vasp.tasks.nudged_elastic_band", "qualname": "MITNudgedElasticBand.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'EDIFF': 1e-05, 'ENCUT': 520, 'IBRION': 1, 'ICHARG': 1, 'ISIF': 2, 'ISPIN': 2, 'ISYM': 0, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 200, 'NELMIN': 4, 'NSW': 99, 'PREC': 'Accurate', 'KSPACING': 0.5, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'LMAXMIX__smart_lmaxmix': True, 'EDIFFG': -0.02, 'ISMEAR': 0, 'LDAU': False, 'IMAGES__auto': True}"}, {"fullname": "simmate.calculators.vasp.tasks.nudged_elastic_band.MITNudgedElasticBand.requires_structure", "modulename": "simmate.calculators.vasp.tasks.nudged_elastic_band", "qualname": "MITNudgedElasticBand.requires_structure", "type": "variable", "doc": "<p>This is a unique case for VASP calculations because the input is NOT a \nsingle structure, but instead a list of structures -- spefically a list\nsupercell images along the diffusion pathway.</p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.tasks.nudged_elastic_band.MITNudgedElasticBand.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.nudged_elastic_band", "qualname": "MITNudgedElasticBand.confirm_convergence", "type": "variable", "doc": "<p>This flag controls whether or not we raise an error when the calculation \nfailed to converge. In somecases we still want results from calculations \nthat did NOT converge successfully.</p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.tasks.nudged_elastic_band.MITNudgedElasticBand.setup", "modulename": "simmate.calculators.vasp.tasks.nudged_elastic_band", "qualname": "MITNudgedElasticBand.setup", "type": "function", "doc": "<p>Writes input files for a NEB calculation. Each structure image recieves\nit's own folder within the parent directory.</p>\n\n<p>This method is typically not called directly. Instead, users should\nuse the <code>run</code> method which calls setup within it.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>structure</code>:\nThis parameter does NOTHING! NEB is a special-case workflow that\naccepts a list of structures instead of a single one. Therefore, it\nis strictly for compatibility with the core S3Task. Leave this\nvalue at None.</p></li>\n<li><p><code>directory</code>:\nThe name of the directory to write all input files in. This directory\nshould exists before calling. (see utilities.get_directory)</p></li>\n<li><p><code>structures</code>:\nThe list of structures to use as a MigrationImages object.</p></li>\n</ul>\n", "signature": "(\n    self,\n    structure: None,\n    directory: str,\n    structures: simmate.toolkit.diffusion.MigrationImages\n)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.nudged_elastic_band.MITNudgedElasticBand.workup", "modulename": "simmate.calculators.vasp.tasks.nudged_elastic_band", "qualname": "MITNudgedElasticBand.workup", "type": "function", "doc": "<p>Works up data from a NEB run, including confirming convergence and\nwriting summary output files (structures, data, and plots).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>directory</code>:\nName of the base folder where all results are located.</li>\n</ul>\n", "signature": "(self, directory: str)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.tasks.pre_bader", "modulename": "simmate.calculators.vasp.tasks.pre_bader", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.pre_bader.MatProjPreBaderTask", "modulename": "simmate.calculators.vasp.tasks.pre_bader", "qualname": "MatProjPreBaderTask", "type": "class", "doc": "<p>Runs a static energy calculation with a high-density FFT grid under settings\nfrom the Materials Project. Results can be used for Bader analysis.</p>\n\n<p>We do NOT recommend running this calculation on its own. Instead, you should\nuse the full workflow, which runs this calculation AND the following bader\nanalysis for you. This S3Task is only the first step of that workflow.</p>\n\n<p>See <code>bader.workflows.materials_project</code>.</p>\n", "bases": "simmate.calculators.vasp.tasks.energy.materials_project.MatProjStaticEnergy"}, {"fullname": "simmate.calculators.vasp.tasks.pre_bader.MatProjPreBaderTask.incar", "modulename": "simmate.calculators.vasp.tasks.pre_bader", "qualname": "MatProjPreBaderTask.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'EDIFF__per_atom': 5e-05, 'ENCUT': 520, 'IBRION': -1, 'ISIF': 3, 'ISMEAR': -5, 'ISPIN': 2, 'ISYM': 0, 'KSPACING': 0.4, 'LASPH': True, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 100, 'NSW': 0, 'PREC': 'Accurate', 'SIGMA': 0.05, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'multiple_keywords__smart_ldau': {'LDAU__auto': True, 'LDAUTYPE': 2, 'LDAUPRINT': 1, 'LMAXMIX__auto': True, 'LDAUJ': {}, 'LDAUL': {'F': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}, 'O': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}}, 'LDAUU': {'F': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}, 'O': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}}}, 'NGXF__density_a': 20, 'NGYF__density_b': 20, 'NGZF__density_c': 20}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.materials_project", "modulename": "simmate.calculators.vasp.tasks.relaxation.materials_project", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.materials_project.MatProjRelaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.materials_project", "qualname": "MatProjRelaxation", "type": "class", "doc": "<p>Runs a VASP geometry optimization using Materials Project settings.</p>\n\n<p>This is currently the highest-quality preset of all of Simmate's relaxations.</p>\n\n<p>Materials Project settings are often considered the minimum-required\nquality for publication and is sufficient for most applications. If you are\nlooking at one structure in detail (for electronic, vibrational, and other\nproperties), you should still test for convergence using higher-quality\nsettings.</p>\n", "bases": "simmate.calculators.vasp.tasks.base.VaspTask"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.materials_project.MatProjRelaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.materials_project", "qualname": "MatProjRelaxation.functional", "type": "variable", "doc": "<p>This directs which Potcar files to grab. You would set this to a string\nof what you want, such as \"PBE\", \"PBE_GW\", or \"LDA\".</p>\n", "annotation": ": str", "default_value": " = 'PBE'"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.materials_project.MatProjRelaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.materials_project", "qualname": "MatProjRelaxation.potcar_mappings", "type": "variable", "doc": "<p>This is an optional parameter to override Simmate's default selection of\npotentials based off of the functional chosen. The defaults are located\nin simmate.calculators.vasp.inputs.potcar_mappings. You can supply your\nown mapping dictionary or update the specific potentials you'd like. \nFor example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.inputs.potcar_mappings</span> <span class=\"kn\">import</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span>\n  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c1\"># don&#39;t forget to copy!</span>\n  <span class=\"n\">element_mappings</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># if you wish to update any</span>\n</code></pre></div>\n\n<p>or if you only use Carbon and don't care about other elements...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Read more on this inside the Potcar class and be careful with updating!</p>\n", "annotation": ": dict", "default_value": " = {'Ac': 'Ac', 'Ag': 'Ag', 'Al': 'Al', 'Ar': 'Ar', 'As': 'As', 'Au': 'Au', 'B': 'B', 'Ba': 'Ba_sv', 'Be': 'Be_sv', 'Bi': 'Bi', 'Br': 'Br', 'C': 'C', 'Ca': 'Ca_sv', 'Cd': 'Cd', 'Ce': 'Ce', 'Cl': 'Cl', 'Co': 'Co', 'Cr': 'Cr_pv', 'Cs': 'Cs_sv', 'Cu': 'Cu_pv', 'Dy': 'Dy_3', 'Er': 'Er_3', 'Eu': 'Eu', 'F': 'F', 'Fe': 'Fe_pv', 'Ga': 'Ga_d', 'Gd': 'Gd', 'Ge': 'Ge_d', 'H': 'H', 'He': 'He', 'Hf': 'Hf_pv', 'Hg': 'Hg', 'Ho': 'Ho_3', 'I': 'I', 'In': 'In_d', 'Ir': 'Ir', 'K': 'K_sv', 'Kr': 'Kr', 'La': 'La', 'Li': 'Li_sv', 'Lu': 'Lu_3', 'Mg': 'Mg_pv', 'Mn': 'Mn_pv', 'Mo': 'Mo_pv', 'N': 'N', 'Na': 'Na_pv', 'Nb': 'Nb_pv', 'Nd': 'Nd_3', 'Ne': 'Ne', 'Ni': 'Ni_pv', 'Np': 'Np', 'O': 'O', 'Os': 'Os_pv', 'P': 'P', 'Pa': 'Pa', 'Pb': 'Pb_d', 'Pd': 'Pd', 'Pm': 'Pm_3', 'Pr': 'Pr_3', 'Pt': 'Pt', 'Pu': 'Pu', 'Rb': 'Rb_sv', 'Re': 'Re_pv', 'Rh': 'Rh_pv', 'Ru': 'Ru_pv', 'S': 'S', 'Sb': 'Sb', 'Sc': 'Sc_sv', 'Se': 'Se', 'Si': 'Si', 'Sm': 'Sm_3', 'Sn': 'Sn_d', 'Sr': 'Sr_sv', 'Ta': 'Ta_pv', 'Tb': 'Tb_3', 'Tc': 'Tc_pv', 'Te': 'Te', 'Th': 'Th', 'Ti': 'Ti_pv', 'Tl': 'Tl_d', 'Tm': 'Tm_3', 'U': 'U', 'V': 'V_pv', 'W': 'W_pv', 'Xe': 'Xe', 'Y': 'Y_sv', 'Yb': 'Yb_2', 'Zn': 'Zn', 'Zr': 'Zr_sv'}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.materials_project.MatProjRelaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.materials_project", "qualname": "MatProjRelaxation.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'EDIFF__per_atom': 5e-05, 'ENCUT': 520, 'IBRION': 2, 'ISIF': 3, 'ISMEAR': -5, 'ISPIN': 2, 'ISYM': 0, 'KSPACING': 0.4, 'LASPH': True, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 100, 'NSW': 99, 'PREC': 'Accurate', 'SIGMA': 0.05, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'multiple_keywords__smart_ldau': {'LDAU__auto': True, 'LDAUTYPE': 2, 'LDAUPRINT': 1, 'LMAXMIX__auto': True, 'LDAUJ': {}, 'LDAUL': {'F': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}, 'O': {'Co': 2, 'Cr': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Ni': 2, 'V': 2, 'W': 2}}, 'LDAUU': {'F': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}, 'O': {'Co': 3.32, 'Cr': 3.7, 'Fe': 5.3, 'Mn': 3.9, 'Mo': 4.38, 'Ni': 6.2, 'V': 3.25, 'W': 6.2}}}}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.materials_project.MatProjRelaxation.error_handlers", "modulename": "simmate.calculators.vasp.tasks.relaxation.materials_project", "qualname": "MatProjRelaxation.error_handlers", "type": "variable", "doc": "<p>A list of ErrorHandler objects to use in order of priority (that is, highest\npriority is first). If one handler is triggered, the correction will be \napplied and none of the following handlers will be checked.</p>\n", "annotation": ": List[simmate.workflow_engine.error_handler.ErrorHandler]", "default_value": " = [<simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh object>, <simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix object>, <simmate.calculators.vasp.error_handlers.brmix.Brmix object>, <simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf object>, <simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix object>, <simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift object>, <simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay object>, <simmate.calculators.vasp.error_handlers.tetirr.Tetirr object>, <simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationNonIntMatrix object>, <simmate.calculators.vasp.error_handlers.long_vector.LongVector object>, <simmate.calculators.vasp.error_handlers.triple_product.TripleProduct object>, <simmate.calculators.vasp.error_handlers.pricel.Pricel object>, <simmate.calculators.vasp.error_handlers.brions.Brions object>, <simmate.calculators.vasp.error_handlers.zbrent.Zbrent object>, <simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands object>, <simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx object>, <simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm object>, <simmate.calculators.vasp.error_handlers.edddav.Edddav object>, <simmate.calculators.vasp.error_handlers.edwav.Edwav object>, <simmate.calculators.vasp.error_handlers.zheev.Zheev object>, <simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar object>, <simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg object>, <simmate.calculators.vasp.error_handlers.posmap.Posmap object>, <simmate.calculators.vasp.error_handlers.point_group.PointGroup object>, <simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise object>, <simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearing object>, <simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetry object>, <simmate.calculators.vasp.error_handlers.unconverged.Unconverged object>, <simmate.calculators.vasp.error_handlers.nonconverging.NonConverging object>, <simmate.calculators.vasp.error_handlers.potim.Potim object>, <simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergy object>, <simmate.calculators.vasp.error_handlers.frozen.Frozen object>, <simmate.calculators.vasp.error_handlers.large_sigma.LargeSigma object>]"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation", "type": "class", "doc": "<p>Runs a VASP geometry optimization using MIT Project settings.</p>\n\n<p>The MIT Project is the precursor to the Materials Project.</p>\n\n<p>From their documention in pymatgen:</p>\n\n<pre><code>\"Default VASP settings for calculations in the pre-cursor MIT project to\nthe Materials Project. Reasonably robust, but selected PSP are generally the\nones with fewer electrons and convergence criteria is less tight. This was\nused in an era whether computational power is more limited.\nNevertheless, this is still a good starting point for extremely expensive\nmethods.\"\n</code></pre>\n", "bases": "simmate.calculators.vasp.tasks.base.VaspTask"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation.functional", "type": "variable", "doc": "<p>This directs which Potcar files to grab. You would set this to a string\nof what you want, such as \"PBE\", \"PBE_GW\", or \"LDA\".</p>\n", "annotation": ": str", "default_value": " = 'PBE'"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation.potcar_mappings", "type": "variable", "doc": "<p>This is an optional parameter to override Simmate's default selection of\npotentials based off of the functional chosen. The defaults are located\nin simmate.calculators.vasp.inputs.potcar_mappings. You can supply your\nown mapping dictionary or update the specific potentials you'd like. \nFor example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.inputs.potcar_mappings</span> <span class=\"kn\">import</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span>\n  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c1\"># don&#39;t forget to copy!</span>\n  <span class=\"n\">element_mappings</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># if you wish to update any</span>\n</code></pre></div>\n\n<p>or if you only use Carbon and don't care about other elements...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Read more on this inside the Potcar class and be careful with updating!</p>\n", "annotation": ": dict", "default_value": " = {'Ac': 'Ac', 'Ag': 'Ag', 'Al': 'Al', 'Ar': 'Ar', 'As': 'As', 'Au': 'Au', 'B': 'B', 'Ba': 'Ba_sv', 'Be': 'Be', 'Bi': 'Bi', 'Br': 'Br', 'C': 'C', 'Ca': 'Ca_sv', 'Cd': 'Cd', 'Ce': 'Ce', 'Cl': 'Cl', 'Co': 'Co', 'Cr': 'Cr', 'Cs': 'Cs_sv', 'Cu': 'Cu', 'Dy': 'Dy_3', 'Er': 'Er_3', 'Eu': 'Eu', 'F': 'F', 'Fe': 'Fe', 'Ga': 'Ga', 'Gd': 'Gd', 'Ge': 'Ge', 'H': 'H', 'He': 'He', 'Hf': 'Hf', 'Hg': 'Hg', 'Ho': 'Ho_3', 'I': 'I', 'In': 'In', 'Ir': 'Ir', 'K': 'K_sv', 'Kr': 'Kr', 'La': 'La', 'Li': 'Li', 'Lu': 'Lu_3', 'Mg': 'Mg', 'Mn': 'Mn', 'Mo': 'Mo_pv', 'N': 'N', 'Na': 'Na', 'Nb': 'Nb_pv', 'Nd': 'Nd', 'Ne': 'Ne', 'Ni': 'Ni', 'Np': 'Np', 'O': 'O', 'Os': 'Os', 'P': 'P', 'Pa': 'Pa', 'Pb': 'Pb', 'Pd': 'Pd', 'Pm': 'Pm', 'Pr': 'Pr', 'Pt': 'Pt', 'Pu': 'Pu', 'Rb': 'Rb_pv', 'Re': 'Re', 'Rh': 'Rh', 'Ru': 'Ru_pv', 'S': 'S', 'Sb': 'Sb', 'Sc': 'Sc_sv', 'Se': 'Se', 'Si': 'Si', 'Sm': 'Sm_3', 'Sn': 'Sn_d', 'Sr': 'Sr_sv', 'Ta': 'Ta', 'Tb': 'Tb_3', 'Tc': 'Tc', 'Te': 'Te', 'Th': 'Th', 'Ti': 'Ti', 'Tl': 'Tl', 'Tm': 'Tm_3', 'U': 'U', 'V': 'V_pv', 'W': 'W_pv', 'Xe': 'Xe', 'Y': 'Y_sv', 'Yb': 'Yb', 'Zn': 'Zn', 'Zr': 'Zr'}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'EDIFF': 1e-05, 'ENCUT': 520, 'IBRION': 2, 'ICHARG': 1, 'ISIF': 3, 'ISPIN': 2, 'ISYM': 0, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 200, 'NELMIN': 6, 'NSW': 99, 'PREC': 'Accurate', 'KSPACING': 0.5, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'multiple_keywords__smart_ismear': {'metal': {'ISMEAR': 2, 'SIGMA': 0.2}, 'non-metal': {'ISMEAR': -5, 'SIGMA': 0.05}}, 'LMAXMIX__smart_lmaxmix': True, 'multiple_keywords__smart_ldau': {'LDAU__auto': True, 'LDAUTYPE': 2, 'LDAUPRINT': 1, 'LDAUJ': {}, 'LDAUL': {'F': {'Ag': 2, 'Co': 2, 'Cr': 2, 'Cu': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Nb': 2, 'Ni': 2, 'Re': 2, 'Ta': 2, 'V': 2, 'W': 2}, 'O': {'Ag': 2, 'Co': 2, 'Cr': 2, 'Cu': 2, 'Fe': 2, 'Mn': 2, 'Mo': 2, 'Nb': 2, 'Ni': 2, 'Re': 2, 'Ta': 2, 'V': 2, 'W': 2}, 'S': {'Fe': 2, 'Mn': 2.5}}, 'LDAUU': {'F': {'Ag': 1.5, 'Co': 3.4, 'Cr': 3.5, 'Cu': 4, 'Fe': 4.0, 'Mn': 3.9, 'Mo': 4.38, 'Nb': 1.5, 'Ni': 6, 'Re': 2, 'Ta': 2, 'V': 3.1, 'W': 4.0}, 'O': {'Ag': 1.5, 'Co': 3.4, 'Cr': 3.5, 'Cu': 4, 'Fe': 4.0, 'Mn': 3.9, 'Mo': 4.38, 'Nb': 1.5, 'Ni': 6, 'Re': 2, 'Ta': 2, 'V': 3.1, 'W': 4.0}, 'S': {'Fe': 1.9, 'Mn': 2.5}}}}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation.error_handlers", "modulename": "simmate.calculators.vasp.tasks.relaxation.mit", "qualname": "MITRelaxation.error_handlers", "type": "variable", "doc": "<p>A list of ErrorHandler objects to use in order of priority (that is, highest\npriority is first). If one handler is triggered, the correction will be \napplied and none of the following handlers will be checked.</p>\n", "annotation": ": List[simmate.workflow_engine.error_handler.ErrorHandler]", "default_value": " = [<simmate.calculators.vasp.error_handlers.tetrahedron_mesh.TetrahedronMesh object>, <simmate.calculators.vasp.error_handlers.rotation_matrix.RotationMatrix object>, <simmate.calculators.vasp.error_handlers.brmix.Brmix object>, <simmate.calculators.vasp.error_handlers.zpotrf.Zpotrf object>, <simmate.calculators.vasp.error_handlers.subspace_matrix.SubspaceMatrix object>, <simmate.calculators.vasp.error_handlers.incorrect_shift.IncorrectShift object>, <simmate.calculators.vasp.error_handlers.real_optlay.RealOptlay object>, <simmate.calculators.vasp.error_handlers.tetirr.Tetirr object>, <simmate.calculators.vasp.error_handlers.rotation_matrix_nonint.RotationNonIntMatrix object>, <simmate.calculators.vasp.error_handlers.long_vector.LongVector object>, <simmate.calculators.vasp.error_handlers.triple_product.TripleProduct object>, <simmate.calculators.vasp.error_handlers.pricel.Pricel object>, <simmate.calculators.vasp.error_handlers.brions.Brions object>, <simmate.calculators.vasp.error_handlers.zbrent.Zbrent object>, <simmate.calculators.vasp.error_handlers.insufficient_bands.InsufficientBands object>, <simmate.calculators.vasp.error_handlers.pssyevx.Pssyevx object>, <simmate.calculators.vasp.error_handlers.eddrmm.Eddrmm object>, <simmate.calculators.vasp.error_handlers.edddav.Edddav object>, <simmate.calculators.vasp.error_handlers.edwav.Edwav object>, <simmate.calculators.vasp.error_handlers.zheev.Zheev object>, <simmate.calculators.vasp.error_handlers.elf_kpar.ElfKpar object>, <simmate.calculators.vasp.error_handlers.rhosyg.Rhosyg object>, <simmate.calculators.vasp.error_handlers.posmap.Posmap object>, <simmate.calculators.vasp.error_handlers.point_group.PointGroup object>, <simmate.calculators.vasp.error_handlers.symprec_noise.SymprecNoise object>, <simmate.calculators.vasp.error_handlers.incorrect_smearing.IncorrectSmearing object>, <simmate.calculators.vasp.error_handlers.mesh_symmetry.MeshSymmetry object>, <simmate.calculators.vasp.error_handlers.unconverged.Unconverged object>, <simmate.calculators.vasp.error_handlers.nonconverging.NonConverging object>, <simmate.calculators.vasp.error_handlers.potim.Potim object>, <simmate.calculators.vasp.error_handlers.positive_energy.PositiveEnergy object>, <simmate.calculators.vasp.error_handlers.frozen.Frozen object>, <simmate.calculators.vasp.error_handlers.large_sigma.LargeSigma object>]"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.neb_endpoint", "modulename": "simmate.calculators.vasp.tasks.relaxation.neb_endpoint", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.neb_endpoint.NEBEndpointRelaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.neb_endpoint", "qualname": "NEBEndpointRelaxation", "type": "class", "doc": "<p>Runs a VASP relaxation calculation using MIT Project settings, where some\nsettings are adjusted to accomodate large supercells with defects. Most\nnotably, the lattice remains fixed and symmetry is turned off for this\nrelaxation.</p>\n\n<p>These settings are closely related to relaxation/mit, but only meant to be\nused on start/end supercell structures of a NEB calculation.</p>\n\n<p>You typically shouldn't use this workflow directly, but instead use the\nhigher-level NEB workflows (e.g. diffusion/neb_all_paths or\ndiffusion/neb_from_endpoints), which call this workflow for you.</p>\n", "bases": "simmate.calculators.vasp.tasks.relaxation.mit.MITRelaxation"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.neb_endpoint.NEBEndpointRelaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.neb_endpoint", "qualname": "NEBEndpointRelaxation.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'ALGO': 'Fast', 'EDIFF': 1e-05, 'ENCUT': 520, 'IBRION': 2, 'ICHARG': 1, 'ISIF': 2, 'ISPIN': 2, 'ISYM': 0, 'LORBIT': 11, 'LREAL': 'Auto', 'LWAVE': False, 'NELM': 200, 'NELMIN': 4, 'NSW': 99, 'PREC': 'Accurate', 'KSPACING': 0.5, 'MAGMOM__smart_magmom': {'default': 0.6, 'Ce': 5, 'Ce3+': 1, 'Co': 0.6, 'Co3+': 0.6, 'Co4+': 1, 'Cr': 5, 'Dy3+': 5, 'Er3+': 3, 'Eu': 10, 'Eu2+': 7, 'Eu3+': 6, 'Fe': 5, 'Gd3+': 7, 'Ho3+': 4, 'La3+': 0.6, 'Lu3+': 0.6, 'Mn': 5, 'Mn3+': 4, 'Mn4+': 3, 'Mo': 5, 'Nd3+': 3, 'Ni': 5, 'Pm3+': 4, 'Pr3+': 2, 'Sm3+': 5, 'Tb3+': 6, 'Tm3+': 2, 'V': 5, 'W': 5, 'Yb3+': 1}, 'LMAXMIX__smart_lmaxmix': True, 'EDIFFG': -0.02, 'ISMEAR': 0, 'LDAU': False}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation", "type": "class", "doc": "<p>Runs a very rough VASP geometry optimization with fixed lattice volume.\n<code>Quality 00</code> indicates these are absolute lowest quality settings used in\nour available presets.</p>\n\n<p>Typically, you'd only want to run this relaxation on structures that were\nrandomly created (and thus likely very unreasonable). More precise relaxations\nshould be done afterwards. Therefore, instead of using this calculation,\nwe recommend only using the relaxation/staged workflow, which uses this\ncalculation as a first step.</p>\n", "bases": "simmate.calculators.vasp.tasks.base.VaspTask"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.functional", "type": "variable", "doc": "<p>This directs which Potcar files to grab. You would set this to a string\nof what you want, such as \"PBE\", \"PBE_GW\", or \"LDA\".</p>\n", "annotation": ": str", "default_value": " = 'PBE'"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.potcar_mappings", "type": "variable", "doc": "<p>This is an optional parameter to override Simmate's default selection of\npotentials based off of the functional chosen. The defaults are located\nin simmate.calculators.vasp.inputs.potcar_mappings. You can supply your\nown mapping dictionary or update the specific potentials you'd like. \nFor example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.inputs.potcar_mappings</span> <span class=\"kn\">import</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span>\n  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c1\"># don&#39;t forget to copy!</span>\n  <span class=\"n\">element_mappings</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># if you wish to update any</span>\n</code></pre></div>\n\n<p>or if you only use Carbon and don't care about other elements...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Read more on this inside the Potcar class and be careful with updating!</p>\n", "annotation": ": dict", "default_value": " = {'Ac': 'Ac', 'Ag': 'Ag', 'Al': 'Al', 'Ar': 'Ar', 'As': 'As', 'Au': 'Au', 'B': 'B', 'Ba': 'Ba_sv', 'Be': 'Be', 'Bi': 'Bi', 'Br': 'Br', 'C': 'C', 'Ca': 'Ca_sv', 'Cd': 'Cd', 'Ce': 'Ce', 'Cl': 'Cl', 'Co': 'Co', 'Cr': 'Cr', 'Cs': 'Cs_sv', 'Cu': 'Cu', 'Dy': 'Dy_3', 'Er': 'Er_3', 'Eu': 'Eu', 'F': 'F', 'Fe': 'Fe', 'Ga': 'Ga', 'Gd': 'Gd', 'Ge': 'Ge', 'H': 'H', 'He': 'He', 'Hf': 'Hf', 'Hg': 'Hg', 'Ho': 'Ho_3', 'I': 'I', 'In': 'In', 'Ir': 'Ir', 'K': 'K_sv', 'Kr': 'Kr', 'La': 'La', 'Li': 'Li', 'Lu': 'Lu_3', 'Mg': 'Mg', 'Mn': 'Mn', 'Mo': 'Mo_pv', 'N': 'N', 'Na': 'Na', 'Nb': 'Nb_pv', 'Nd': 'Nd', 'Ne': 'Ne', 'Ni': 'Ni', 'Np': 'Np', 'O': 'O', 'Os': 'Os', 'P': 'P', 'Pa': 'Pa', 'Pb': 'Pb', 'Pd': 'Pd', 'Pm': 'Pm', 'Pr': 'Pr', 'Pt': 'Pt', 'Pu': 'Pu', 'Rb': 'Rb_pv', 'Re': 'Re', 'Rh': 'Rh', 'Ru': 'Ru_pv', 'S': 'S', 'Sb': 'Sb', 'Sc': 'Sc_sv', 'Se': 'Se', 'Si': 'Si', 'Sm': 'Sm_3', 'Sn': 'Sn_d', 'Sr': 'Sr_sv', 'Ta': 'Ta', 'Tb': 'Tb_3', 'Tc': 'Tc', 'Te': 'Te', 'Th': 'Th', 'Ti': 'Ti', 'Tl': 'Tl', 'Tm': 'Tm_3', 'U': 'U', 'V': 'V_pv', 'W': 'W_pv', 'Xe': 'Xe', 'Y': 'Y_sv', 'Yb': 'Yb', 'Zn': 'Zn', 'Zr': 'Zr'}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.confirm_convergence", "type": "variable", "doc": "<p>This flag controls whether or not we raise an error when the calculation \nfailed to converge. In somecases we still want results from calculations \nthat did NOT converge successfully.</p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p>In some cases, we may want to sanitize the structure during our setup().\nThis means converting to the LLL-reduced primitive cell. This simply does:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">structure_sanitzed</span> <span class=\"o\">=</span> <span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">santize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": bool", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_00.Quality00Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_00", "qualname": "Quality00Relaxation.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'PREC': 'Low', 'EDIFF': 0.002, 'EDIFFG': -0.2, 'ISIF': 4, 'NSW': 75, 'IBRION': 2, 'POTIM': 0.02, 'LCHARG': False, 'LWAVE': False, 'KSPACING': 0.75, 'multiple_keywords__smart_ismear': {'metal': {'ISMEAR': 1, 'SIGMA': 0.1}, 'non-metal': {'ISMEAR': 0, 'SIGMA': 0.05}}}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation", "type": "class", "doc": "<p>Runs a VERY rough VASP geometry optimization.</p>\n\n<p><code>Quality 01</code> indicates that on a scale from 00 to 04, these are ranked 01 in\nquality (with 04 being the highest quality).</p>\n\n<p>Typically, you'd only want to run this relaxation on structures that were\nrandomly created (and thus likely very unreasonable). More precise relaxations\nshould be done afterwards. Therefore, instead of using this calculation,\nwe recommend only using the relaxation/staged workflow, which uses this\ncalculation as a second step.</p>\n", "bases": "simmate.calculators.vasp.tasks.base.VaspTask"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.functional", "type": "variable", "doc": "<p>This directs which Potcar files to grab. You would set this to a string\nof what you want, such as \"PBE\", \"PBE_GW\", or \"LDA\".</p>\n", "annotation": ": str", "default_value": " = 'PBE'"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.potcar_mappings", "type": "variable", "doc": "<p>This is an optional parameter to override Simmate's default selection of\npotentials based off of the functional chosen. The defaults are located\nin simmate.calculators.vasp.inputs.potcar_mappings. You can supply your\nown mapping dictionary or update the specific potentials you'd like. \nFor example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.inputs.potcar_mappings</span> <span class=\"kn\">import</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span>\n  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c1\"># don&#39;t forget to copy!</span>\n  <span class=\"n\">element_mappings</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># if you wish to update any</span>\n</code></pre></div>\n\n<p>or if you only use Carbon and don't care about other elements...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Read more on this inside the Potcar class and be careful with updating!</p>\n", "annotation": ": dict", "default_value": " = {'Ac': 'Ac', 'Ag': 'Ag', 'Al': 'Al', 'Ar': 'Ar', 'As': 'As', 'Au': 'Au', 'B': 'B', 'Ba': 'Ba_sv', 'Be': 'Be', 'Bi': 'Bi', 'Br': 'Br', 'C': 'C', 'Ca': 'Ca_sv', 'Cd': 'Cd', 'Ce': 'Ce', 'Cl': 'Cl', 'Co': 'Co', 'Cr': 'Cr', 'Cs': 'Cs_sv', 'Cu': 'Cu', 'Dy': 'Dy_3', 'Er': 'Er_3', 'Eu': 'Eu', 'F': 'F', 'Fe': 'Fe', 'Ga': 'Ga', 'Gd': 'Gd', 'Ge': 'Ge', 'H': 'H', 'He': 'He', 'Hf': 'Hf', 'Hg': 'Hg', 'Ho': 'Ho_3', 'I': 'I', 'In': 'In', 'Ir': 'Ir', 'K': 'K_sv', 'Kr': 'Kr', 'La': 'La', 'Li': 'Li', 'Lu': 'Lu_3', 'Mg': 'Mg', 'Mn': 'Mn', 'Mo': 'Mo_pv', 'N': 'N', 'Na': 'Na', 'Nb': 'Nb_pv', 'Nd': 'Nd', 'Ne': 'Ne', 'Ni': 'Ni', 'Np': 'Np', 'O': 'O', 'Os': 'Os', 'P': 'P', 'Pa': 'Pa', 'Pb': 'Pb', 'Pd': 'Pd', 'Pm': 'Pm', 'Pr': 'Pr', 'Pt': 'Pt', 'Pu': 'Pu', 'Rb': 'Rb_pv', 'Re': 'Re', 'Rh': 'Rh', 'Ru': 'Ru_pv', 'S': 'S', 'Sb': 'Sb', 'Sc': 'Sc_sv', 'Se': 'Se', 'Si': 'Si', 'Sm': 'Sm_3', 'Sn': 'Sn_d', 'Sr': 'Sr_sv', 'Ta': 'Ta', 'Tb': 'Tb_3', 'Tc': 'Tc', 'Te': 'Te', 'Th': 'Th', 'Ti': 'Ti', 'Tl': 'Tl', 'Tm': 'Tm_3', 'U': 'U', 'V': 'V_pv', 'W': 'W_pv', 'Xe': 'Xe', 'Y': 'Y_sv', 'Yb': 'Yb', 'Zn': 'Zn', 'Zr': 'Zr'}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.confirm_convergence", "type": "variable", "doc": "<p>This flag controls whether or not we raise an error when the calculation \nfailed to converge. In somecases we still want results from calculations \nthat did NOT converge successfully.</p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p>In some cases, we may want to sanitize the structure during our setup().\nThis means converting to the LLL-reduced primitive cell. This simply does:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">structure_sanitzed</span> <span class=\"o\">=</span> <span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">santize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": bool", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_01.Quality01Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_01", "qualname": "Quality01Relaxation.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'PREC': 'Normal', 'EDIFF': 0.001, 'EDIFFG': 0.01, 'ISIF': 4, 'NSW': 75, 'IBRION': 2, 'POTIM': 0.2, 'LCHARG': False, 'LWAVE': False, 'KSPACING': 0.6, 'multiple_keywords__smart_ismear': {'metal': {'ISMEAR': 1, 'SIGMA': 0.08}, 'non-metal': {'ISMEAR': 0, 'SIGMA': 0.05}}}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation", "type": "class", "doc": "<p>Runs a rough VASP geometry optimization.</p>\n\n<p><code>Quality 02</code> indicates that on a scale from 00 to 04, these are ranked 02 in\nquality (with 04 being the highest quality).</p>\n\n<p>Typically, you'd only want to run this relaxation on structures that were\nrandomly created (and thus likely very unreasonable). More precise relaxations\nshould be done afterwards. Therefore, instead of using this calculation,\nwe recommend only using the relaxation/staged workflow, which uses this\ncalculation as a third step.</p>\n", "bases": "simmate.calculators.vasp.tasks.base.VaspTask"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.functional", "type": "variable", "doc": "<p>This directs which Potcar files to grab. You would set this to a string\nof what you want, such as \"PBE\", \"PBE_GW\", or \"LDA\".</p>\n", "annotation": ": str", "default_value": " = 'PBE'"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.potcar_mappings", "type": "variable", "doc": "<p>This is an optional parameter to override Simmate's default selection of\npotentials based off of the functional chosen. The defaults are located\nin simmate.calculators.vasp.inputs.potcar_mappings. You can supply your\nown mapping dictionary or update the specific potentials you'd like. \nFor example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.inputs.potcar_mappings</span> <span class=\"kn\">import</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span>\n  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c1\"># don&#39;t forget to copy!</span>\n  <span class=\"n\">element_mappings</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># if you wish to update any</span>\n</code></pre></div>\n\n<p>or if you only use Carbon and don't care about other elements...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Read more on this inside the Potcar class and be careful with updating!</p>\n", "annotation": ": dict", "default_value": " = {'Ac': 'Ac', 'Ag': 'Ag', 'Al': 'Al', 'Ar': 'Ar', 'As': 'As', 'Au': 'Au', 'B': 'B', 'Ba': 'Ba_sv', 'Be': 'Be', 'Bi': 'Bi', 'Br': 'Br', 'C': 'C', 'Ca': 'Ca_sv', 'Cd': 'Cd', 'Ce': 'Ce', 'Cl': 'Cl', 'Co': 'Co', 'Cr': 'Cr', 'Cs': 'Cs_sv', 'Cu': 'Cu', 'Dy': 'Dy_3', 'Er': 'Er_3', 'Eu': 'Eu', 'F': 'F', 'Fe': 'Fe', 'Ga': 'Ga', 'Gd': 'Gd', 'Ge': 'Ge', 'H': 'H', 'He': 'He', 'Hf': 'Hf', 'Hg': 'Hg', 'Ho': 'Ho_3', 'I': 'I', 'In': 'In', 'Ir': 'Ir', 'K': 'K_sv', 'Kr': 'Kr', 'La': 'La', 'Li': 'Li', 'Lu': 'Lu_3', 'Mg': 'Mg', 'Mn': 'Mn', 'Mo': 'Mo_pv', 'N': 'N', 'Na': 'Na', 'Nb': 'Nb_pv', 'Nd': 'Nd', 'Ne': 'Ne', 'Ni': 'Ni', 'Np': 'Np', 'O': 'O', 'Os': 'Os', 'P': 'P', 'Pa': 'Pa', 'Pb': 'Pb', 'Pd': 'Pd', 'Pm': 'Pm', 'Pr': 'Pr', 'Pt': 'Pt', 'Pu': 'Pu', 'Rb': 'Rb_pv', 'Re': 'Re', 'Rh': 'Rh', 'Ru': 'Ru_pv', 'S': 'S', 'Sb': 'Sb', 'Sc': 'Sc_sv', 'Se': 'Se', 'Si': 'Si', 'Sm': 'Sm_3', 'Sn': 'Sn_d', 'Sr': 'Sr_sv', 'Ta': 'Ta', 'Tb': 'Tb_3', 'Tc': 'Tc', 'Te': 'Te', 'Th': 'Th', 'Ti': 'Ti', 'Tl': 'Tl', 'Tm': 'Tm_3', 'U': 'U', 'V': 'V_pv', 'W': 'W_pv', 'Xe': 'Xe', 'Y': 'Y_sv', 'Yb': 'Yb', 'Zn': 'Zn', 'Zr': 'Zr'}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.confirm_convergence", "type": "variable", "doc": "<p>This flag controls whether or not we raise an error when the calculation \nfailed to converge. In somecases we still want results from calculations \nthat did NOT converge successfully.</p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p>In some cases, we may want to sanitize the structure during our setup().\nThis means converting to the LLL-reduced primitive cell. This simply does:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">structure_sanitzed</span> <span class=\"o\">=</span> <span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">santize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": bool", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_02.Quality02Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_02", "qualname": "Quality02Relaxation.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'PREC': 'Normal', 'EDIFF': 0.001, 'EDIFFG': 0.01, 'ENCUT': 375, 'ISIF': 3, 'NSW': 100, 'IBRION': 2, 'POTIM': 0.02, 'LCHARG': False, 'LWAVE': False, 'KSPACING': 0.5, 'multiple_keywords__smart_ismear': {'metal': {'ISMEAR': 1, 'SIGMA': 0.06}, 'non-metal': {'ISMEAR': 0, 'SIGMA': 0.05}}}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation", "type": "class", "doc": "<p>Runs a rough VASP geometry optimization.</p>\n\n<p><code>Quality 03</code> indicates that on a scale from 00 to 04, these are ranked 03 in\nquality (with 04 being the highest quality).</p>\n\n<p>Typically, you'd only want to run this relaxation on structures that were\nrandomly created (and thus likely very unreasonable). More precise relaxations\nshould be done afterwards. Therefore, instead of using this calculation,\nwe recommend only using the relaxation/staged workflow, which uses this\ncalculation as a fourth step.</p>\n", "bases": "simmate.calculators.vasp.tasks.base.VaspTask"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.functional", "type": "variable", "doc": "<p>This directs which Potcar files to grab. You would set this to a string\nof what you want, such as \"PBE\", \"PBE_GW\", or \"LDA\".</p>\n", "annotation": ": str", "default_value": " = 'PBE'"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.potcar_mappings", "type": "variable", "doc": "<p>This is an optional parameter to override Simmate's default selection of\npotentials based off of the functional chosen. The defaults are located\nin simmate.calculators.vasp.inputs.potcar_mappings. You can supply your\nown mapping dictionary or update the specific potentials you'd like. \nFor example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.inputs.potcar_mappings</span> <span class=\"kn\">import</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span>\n  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c1\"># don&#39;t forget to copy!</span>\n  <span class=\"n\">element_mappings</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># if you wish to update any</span>\n</code></pre></div>\n\n<p>or if you only use Carbon and don't care about other elements...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Read more on this inside the Potcar class and be careful with updating!</p>\n", "annotation": ": dict", "default_value": " = {'Ac': 'Ac', 'Ag': 'Ag', 'Al': 'Al', 'Ar': 'Ar', 'As': 'As', 'Au': 'Au', 'B': 'B', 'Ba': 'Ba_sv', 'Be': 'Be', 'Bi': 'Bi', 'Br': 'Br', 'C': 'C', 'Ca': 'Ca_sv', 'Cd': 'Cd', 'Ce': 'Ce', 'Cl': 'Cl', 'Co': 'Co', 'Cr': 'Cr', 'Cs': 'Cs_sv', 'Cu': 'Cu', 'Dy': 'Dy_3', 'Er': 'Er_3', 'Eu': 'Eu', 'F': 'F', 'Fe': 'Fe', 'Ga': 'Ga', 'Gd': 'Gd', 'Ge': 'Ge', 'H': 'H', 'He': 'He', 'Hf': 'Hf', 'Hg': 'Hg', 'Ho': 'Ho_3', 'I': 'I', 'In': 'In', 'Ir': 'Ir', 'K': 'K_sv', 'Kr': 'Kr', 'La': 'La', 'Li': 'Li', 'Lu': 'Lu_3', 'Mg': 'Mg', 'Mn': 'Mn', 'Mo': 'Mo_pv', 'N': 'N', 'Na': 'Na', 'Nb': 'Nb_pv', 'Nd': 'Nd', 'Ne': 'Ne', 'Ni': 'Ni', 'Np': 'Np', 'O': 'O', 'Os': 'Os', 'P': 'P', 'Pa': 'Pa', 'Pb': 'Pb', 'Pd': 'Pd', 'Pm': 'Pm', 'Pr': 'Pr', 'Pt': 'Pt', 'Pu': 'Pu', 'Rb': 'Rb_pv', 'Re': 'Re', 'Rh': 'Rh', 'Ru': 'Ru_pv', 'S': 'S', 'Sb': 'Sb', 'Sc': 'Sc_sv', 'Se': 'Se', 'Si': 'Si', 'Sm': 'Sm_3', 'Sn': 'Sn_d', 'Sr': 'Sr_sv', 'Ta': 'Ta', 'Tb': 'Tb_3', 'Tc': 'Tc', 'Te': 'Te', 'Th': 'Th', 'Ti': 'Ti', 'Tl': 'Tl', 'Tm': 'Tm_3', 'U': 'U', 'V': 'V_pv', 'W': 'W_pv', 'Xe': 'Xe', 'Y': 'Y_sv', 'Yb': 'Yb', 'Zn': 'Zn', 'Zr': 'Zr'}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.confirm_convergence", "type": "variable", "doc": "<p>This flag controls whether or not we raise an error when the calculation \nfailed to converge. In somecases we still want results from calculations \nthat did NOT converge successfully.</p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p>In some cases, we may want to sanitize the structure during our setup().\nThis means converting to the LLL-reduced primitive cell. This simply does:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">structure_sanitzed</span> <span class=\"o\">=</span> <span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">santize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": bool", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_03.Quality03Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_03", "qualname": "Quality03Relaxation.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'PREC': 'Normal', 'EDIFF': 0.0001, 'ENCUT': 425, 'ISIF': 3, 'NSW': 100, 'IBRION': 1, 'POTIM': 0.25, 'LCHARG': False, 'LWAVE': False, 'KSPACING': 0.5, 'multiple_keywords__smart_ismear': {'metal': {'ISMEAR': 1, 'SIGMA': 0.06}, 'non-metal': {'ISMEAR': 0, 'SIGMA': 0.05}}}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation", "type": "class", "doc": "<p>Runs a rough VASP geometry optimization.</p>\n\n<p><code>Quality 04</code> indicates that on a scale from 00 to 04, these are ranked 04 in\nquality (with 04 being the highest quality).</p>\n\n<p>Note, even though this is currently our highest quality preset, these\nsettings are still only suitable for high-throughput calculations or massive\nsupercells. Settings are still below MIT and Materials Project quality.</p>\n\n<p>Typically, you'd only want to run this relaxation on structures that were\nrandomly created (and thus likely very unreasonable). Therefore, instead of\nusing this calculation, we recommend only using the relaxation/staged\nworkflow, which uses this calculation as a fifth step (and final relaxation).</p>\n", "bases": "simmate.calculators.vasp.tasks.base.VaspTask"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.functional", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.functional", "type": "variable", "doc": "<p>This directs which Potcar files to grab. You would set this to a string\nof what you want, such as \"PBE\", \"PBE_GW\", or \"LDA\".</p>\n", "annotation": ": str", "default_value": " = 'PBE'"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.potcar_mappings", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.potcar_mappings", "type": "variable", "doc": "<p>This is an optional parameter to override Simmate's default selection of\npotentials based off of the functional chosen. The defaults are located\nin simmate.calculators.vasp.inputs.potcar_mappings. You can supply your\nown mapping dictionary or update the specific potentials you'd like. \nFor example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.inputs.potcar_mappings</span> <span class=\"kn\">import</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span>\n  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"n\">PBE_ELEMENT_MAPPINGS</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c1\"># don&#39;t forget to copy!</span>\n  <span class=\"n\">element_mappings</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># if you wish to update any</span>\n</code></pre></div>\n\n<p>or if you only use Carbon and don't care about other elements...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">element_mappings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;C_h&quot;</span><span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Read more on this inside the Potcar class and be careful with updating!</p>\n", "annotation": ": dict", "default_value": " = {'Ac': 'Ac', 'Ag': 'Ag', 'Al': 'Al', 'Ar': 'Ar', 'As': 'As', 'Au': 'Au', 'B': 'B', 'Ba': 'Ba_sv', 'Be': 'Be', 'Bi': 'Bi', 'Br': 'Br', 'C': 'C', 'Ca': 'Ca_sv', 'Cd': 'Cd', 'Ce': 'Ce', 'Cl': 'Cl', 'Co': 'Co', 'Cr': 'Cr', 'Cs': 'Cs_sv', 'Cu': 'Cu', 'Dy': 'Dy_3', 'Er': 'Er_3', 'Eu': 'Eu', 'F': 'F', 'Fe': 'Fe', 'Ga': 'Ga', 'Gd': 'Gd', 'Ge': 'Ge', 'H': 'H', 'He': 'He', 'Hf': 'Hf', 'Hg': 'Hg', 'Ho': 'Ho_3', 'I': 'I', 'In': 'In', 'Ir': 'Ir', 'K': 'K_sv', 'Kr': 'Kr', 'La': 'La', 'Li': 'Li', 'Lu': 'Lu_3', 'Mg': 'Mg', 'Mn': 'Mn', 'Mo': 'Mo_pv', 'N': 'N', 'Na': 'Na', 'Nb': 'Nb_pv', 'Nd': 'Nd', 'Ne': 'Ne', 'Ni': 'Ni', 'Np': 'Np', 'O': 'O', 'Os': 'Os', 'P': 'P', 'Pa': 'Pa', 'Pb': 'Pb', 'Pd': 'Pd', 'Pm': 'Pm', 'Pr': 'Pr', 'Pt': 'Pt', 'Pu': 'Pu', 'Rb': 'Rb_pv', 'Re': 'Re', 'Rh': 'Rh', 'Ru': 'Ru_pv', 'S': 'S', 'Sb': 'Sb', 'Sc': 'Sc_sv', 'Se': 'Se', 'Si': 'Si', 'Sm': 'Sm_3', 'Sn': 'Sn_d', 'Sr': 'Sr_sv', 'Ta': 'Ta', 'Tb': 'Tb_3', 'Tc': 'Tc', 'Te': 'Te', 'Th': 'Th', 'Ti': 'Ti', 'Tl': 'Tl', 'Tm': 'Tm_3', 'U': 'U', 'V': 'V_pv', 'W': 'W_pv', 'Xe': 'Xe', 'Y': 'Y_sv', 'Yb': 'Yb', 'Zn': 'Zn', 'Zr': 'Zr'}"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.confirm_convergence", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.confirm_convergence", "type": "variable", "doc": "<p>This flag controls whether or not we raise an error when the calculation \nfailed to converge. In somecases we still want results from calculations \nthat did NOT converge successfully.</p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.pre_sanitize_structure", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.pre_sanitize_structure", "type": "variable", "doc": "<p>In some cases, we may want to sanitize the structure during our setup().\nThis means converting to the LLL-reduced primitive cell. This simply does:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">structure_sanitzed</span> <span class=\"o\">=</span> <span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">santize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": bool", "default_value": " = True"}, {"fullname": "simmate.calculators.vasp.tasks.relaxation.quality_04.Quality04Relaxation.incar", "modulename": "simmate.calculators.vasp.tasks.relaxation.quality_04", "qualname": "Quality04Relaxation.incar", "type": "variable", "doc": "<p>This sets the default vasp settings from a dictionary. This is the one thing\nyou <em>must</em> set when subclassing VaspTask. An example is:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>  <span class=\"n\">incar</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">NSW</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PREC</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accurate&quot;</span><span class=\"p\">,</span> <span class=\"n\">KSPACING</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div>\n", "annotation": ": dict", "default_value": " = {'PREC': 'Normal', 'EDIFF': 1e-05, 'ENCUT': 450, 'ISIF': 3, 'NSW': 100, 'IBRION': 1, 'POTIM': 0.02, 'LCHARG': False, 'LWAVE': False, 'KSPACING': 0.4, 'multiple_keywords__smart_ismear': {'metal': {'ISMEAR': 1, 'SIGMA': 0.06}, 'non-metal': {'ISMEAR': 0, 'SIGMA': 0.05}}}"}, {"fullname": "simmate.calculators.vasp.workflows", "modulename": "simmate.calculators.vasp.workflows", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.band_structure", "modulename": "simmate.calculators.vasp.workflows.band_structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.density_of_states", "modulename": "simmate.calculators.vasp.workflows.density_of_states", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.dynamics", "modulename": "simmate.calculators.vasp.workflows.dynamics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.energy", "modulename": "simmate.calculators.vasp.workflows.energy", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.energy.materials_project", "modulename": "simmate.calculators.vasp.workflows.energy.materials_project", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.energy.mit", "modulename": "simmate.calculators.vasp.workflows.energy.mit", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.energy.neb_endpoint", "modulename": "simmate.calculators.vasp.workflows.energy.neb_endpoint", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.energy.quality_04", "modulename": "simmate.calculators.vasp.workflows.energy.quality_04", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.all_paths", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.all_paths", "type": "module", "doc": "<p>Runs a NEB on all unique pathways within a structure. </p>\n\n<p>The folder tree looks like...</p>\n\n<pre><code>simmate-task-12345/  # determined by simmate.utilities.get_directory\n    \u251c\u2500\u2500 bulk_relaxation\n    \u251c\u2500\u2500 bulk_static_energy\n    \u251c\u2500\u2500 migration_hop_00\n    \u251c\u2500\u2500 migration_hop_01\n    ...\n    \u2514\u2500\u2500 migration_hop_N  # all migration_hop folders have the same structure\n        \u251c\u2500\u2500 endpoint_relaxation_start\n        \u251c\u2500\u2500 endpoint_relaxation_end\n        \u251c\u2500\u2500 01\n        \u251c\u2500\u2500 02\n        \u251c\u2500\u2500 03\n        ...\n        \u2514\u2500\u2500 N  # corresponds to image number\n</code></pre>\n"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.all_paths.get_dir_name", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.all_paths", "qualname": "get_dir_name", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Task: get_dir_name>"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.all_paths.map_neb", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.all_paths", "qualname": "map_neb", "type": "function", "doc": "<p></p>\n", "signature": "(migration_hop_id: int, directory: str, subcommands: dict)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.from_endpoints", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.from_endpoints", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.from_images", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.from_images", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.single_path", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.single_path", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities.BuildDiffusionAnalysisTask", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "qualname": "BuildDiffusionAnalysisTask", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n", "bases": "prefect.core.task.Task"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities.BuildDiffusionAnalysisTask.__init__", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "qualname": "BuildDiffusionAnalysisTask.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    diffusion_analyis: simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities.BuildDiffusionAnalysisTask.run", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "qualname": "BuildDiffusionAnalysisTask.run", "type": "function", "doc": "<p>Given a bulk crystal structure, returns all symmetrically unique pathways\nfor the migrating specie (up until the path is percolating). This\nalso create all relevent database entries for this struture and its\nmigration hops.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>structure</code>:\nbulk crystal structure to be analyzed. Can be in any format supported\nby Structure.from_dynamic method.</p></li>\n<li><p><code>migrating_specie</code>:\nElement or ion symbol of the diffusion specie (e.g. \"Li\")</p></li>\n<li><p><code>directory</code>:\nwhere to write the CIF file visualizing all migration hops. If no\ndirectory is provided, it will be written in the working directory.</p></li>\n<li><p><code>**kwargs</code>:\nAny parameter normally accepted by DistinctPathFinder</p></li>\n</ul>\n", "signature": "(\n    self,\n    structure: simmate.toolkit.base_data_types.structure.Structure,\n    migrating_specie: str,\n    vacancy_mode: bool,\n    directory: str = '',\n    **kwargs\n) -> List[simmate.toolkit.diffusion.MigrationHop]", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities.get_endpoint_structures", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "qualname": "get_endpoint_structures", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Task: get_endpoint_structures>"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities.get_migration_images_from_endpoints", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "qualname": "get_migration_images_from_endpoints", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Task: get_migration_images_from_endpoints>"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities.SaveNEBOutputTask", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "qualname": "SaveNEBOutputTask", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n", "bases": "prefect.core.task.Task"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities.SaveNEBOutputTask.__init__", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "qualname": "SaveNEBOutputTask.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    diffusion_analyis_table: simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis,\n    migration_hop_table: simmate.database.base_data_types.nudged_elastic_band.MigrationHop,\n    migration_image_table: simmate.database.base_data_types.nudged_elastic_band.MigrationImage,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities.SaveNEBOutputTask.run", "modulename": "simmate.calculators.vasp.workflows.nudged_elastic_band.utilities", "qualname": "SaveNEBOutputTask.run", "type": "function", "doc": "<p>The <code>run()</code> method is called (with arguments, if appropriate) to run a task.</p>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>If a task has arguments in its <code>run()</code> method, these can be bound either by using the\nfunctional API and _calling_ the task instance, or by using <code>self.bind</code> directly.</p>\n\n<p>In addition to running arbitrary functions, tasks can interact with Prefect in a few ways:</p>\n\n<ul><li> Return an optional result. When this function runs successfully,\n    the task is considered successful and the result (if any) can be\n    made available to downstream tasks. </li>\n<li> Raise an error. Errors are interpreted as failure. </li>\n<li> Raise a [signal](../engine/signals.html). Signals can include `FAIL`, `SUCCESS`,\n    `RETRY`, `SKIP`, etc. and indicate that the task should be put in the indicated state.\n        <ul>\n        <li> `FAIL` will lead to retries if appropriate </li>\n        <li> `SUCCESS` will cause the task to be marked successful </li>\n        <li> `RETRY` will cause the task to be marked for retry, even if `max_retries`\n            has been exceeded </li>\n        <li> `SKIP` will skip the task and possibly propogate the skip state through the\n            flow, depending on whether downstream tasks have `skip_on_upstream_skip=True`.\n        </li></ul>\n\n<p></li></ul></p>\n", "signature": "(\n    self,\n    output,\n    diffusion_analysis_id: int = None,\n    migration_hop_id: int = None\n)", "funcdef": "def"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation", "modulename": "simmate.calculators.vasp.workflows.relaxation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.materials_project", "modulename": "simmate.calculators.vasp.workflows.relaxation.materials_project", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.mit", "modulename": "simmate.calculators.vasp.workflows.relaxation.mit", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.neb_endpoint", "modulename": "simmate.calculators.vasp.workflows.relaxation.neb_endpoint", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_00", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_00", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_01", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_01", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_02", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_02", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_03", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_03", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.quality_04", "modulename": "simmate.calculators.vasp.workflows.relaxation.quality_04", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.calculators.vasp.workflows.relaxation.staged", "modulename": "simmate.calculators.vasp.workflows.relaxation.staged", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line", "modulename": "simmate.command_line", "type": "module", "doc": "<h2 id=\"the-simmate-command-line-interface\">The Simmate Command-line Interface</h2>\n\n<p>This module defines the <code>simmate</code> command and all of it's sub-commands. </p>\n\n<p>Note, nearly all of the commands in this module wrap a lower-level function, so little code is located here. For example, the <code>simmate database reset</code> command is just a wrapper for the following python code:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.configuration.django.database</span> <span class=\"kn\">import</span> <span class=\"n\">reset_database</span>\n\n<span class=\"n\">reset_database</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Our command-line is build using <a href=\"https://click.palletsprojects.com/en/8.0.x/\">Click</a> instead of Argparse. Be sure to read their documentation before contributing to this module.</p>\n"}, {"fullname": "simmate.command_line.base_command", "modulename": "simmate.command_line.base_command", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.database", "modulename": "simmate.command_line.database", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.run_server", "modulename": "simmate.command_line.run_server", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.start_project", "modulename": "simmate.command_line.start_project", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.workflow_engine", "modulename": "simmate.command_line.workflow_engine", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.workflows", "modulename": "simmate.command_line.workflows", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.command_line.workflows.list_options", "modulename": "simmate.command_line.workflows", "qualname": "list_options", "type": "function", "doc": "<p>This is a utility for click (cli) that prints of list of items as a numbered\nlist. It prompts users to select an option from the list.</p>\n\n<p>For example, <code>[\"item1\", \"item2\", \"item3\"]</code> would print...</p>\n\n<pre><code>    (01) item1\n    (02) item2\n    (03) item3\n</code></pre>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>options</code>:\na list of strings to choose from</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>selected_index</code>:\nThe integer value of the choice selected. This will follw python indexing\nso the index of the options list. (e.g. if item1 was selected, 0 would be\nreturned)</li>\n</ul>\n", "signature": "(options: List) -> int", "funcdef": "def"}, {"fullname": "simmate.command_line.workflows.parse_parameters", "modulename": "simmate.command_line.workflows", "qualname": "parse_parameters", "type": "function", "doc": "<p>This is a utility for click (cli) that formats input parameters for workflow\nruns. It is a small wrapper around\n<code>simmate.workflow_engine.utilities.parse_parameters</code> that accounts for\nrecieving a <code>click.Context</code> object.</p>\n\n<p>In order to provide a context, make sure the click command has the following:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"nd\">@click</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span>\n    <span class=\"n\">context_settings</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">ignore_unknown_options</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">allow_extra_args</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@click</span><span class=\"o\">.</span><span class=\"n\">pass_context</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div>\n\n<p>These context settings let us pass extra kwargs, as some workflows have unique\ninputs (e.g. structures, migration_hop, etc. instead of a structure input).\nThis is also why we have pass_context and then the kwarg context.</p>\n", "signature": "(\n    context: click.core.Context,\n    structure: str = None,\n    command: str = None,\n    directory: str = None\n) -> dict", "funcdef": "def"}, {"fullname": "simmate.configuration", "modulename": "simmate.configuration", "type": "module", "doc": "<h2 id=\"simmate-configuration\">Simmate Configuration</h2>\n\n<p>This module sets up Simmate and other programs it depends on. It also includes an example config directory and example custom project.</p>\n"}, {"fullname": "simmate.configuration.blender", "modulename": "simmate.configuration.blender", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.blender.setup", "modulename": "simmate.configuration.blender.setup", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.blender.setup.get_blender_command", "modulename": "simmate.configuration.blender.setup", "qualname": "get_blender_command", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.configuration.blender.setup.find_blender_installation", "modulename": "simmate.configuration.blender.setup", "qualname": "find_blender_installation", "type": "function", "doc": "<p>Finds the full path to the Blender installation so that we can call blender\nfrom the command-line. This also adds it's location to the simmate\nconfiguration folder so that we don't need to search for it every time.</p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.configuration.blender.setup.test_blender_command", "modulename": "simmate.configuration.blender.setup", "qualname": "test_blender_command", "type": "function", "doc": "<p></p>\n", "signature": "(blender_command)", "funcdef": "def"}, {"fullname": "simmate.configuration.dask", "modulename": "simmate.configuration.dask", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.dask.connect_to_database", "modulename": "simmate.configuration.dask.connect_to_database", "type": "module", "doc": "<p>To prevent database-connection leaks, we want to setup django upfront when\na worker is started -- rather than have each task connect separately.</p>\n\n<p>You can use this script like so...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>    <span class=\"kn\">from</span> <span class=\"nn\">dask.distributed</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">preload</span><span class=\"o\">=</span><span class=\"s2\">&quot;simmate.configuration.dask.connect_to_database&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Note, there is also a high-level utility for this, which can be easier to\nremember:</p>\n\n<p>``` python\nfrom simmate.utilities import get_dask_client\nclient = get_dask_client()</p>\n"}, {"fullname": "simmate.configuration.django", "modulename": "simmate.configuration.django", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.django.database", "modulename": "simmate.configuration.django.database", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.django.database.update_database", "modulename": "simmate.configuration.django.database", "qualname": "update_database", "type": "function", "doc": "<p></p>\n", "signature": "(\n    apps_to_migrate=['accounts', 'third_parties', 'workflows', 'workflow_execution', 'prototypes', 'structure_viewer', 'admin', 'auth', 'contenttypes', 'sessions', 'messages', 'staticfiles', 'crispy_forms', 'rest_framework', 'django_filters', 'django_extensions', 'test_app']\n)", "funcdef": "def"}, {"fullname": "simmate.configuration.django.database.reset_database", "modulename": "simmate.configuration.django.database", "qualname": "reset_database", "type": "function", "doc": "<p></p>\n", "signature": "(\n    apps_to_migrate=['accounts', 'third_parties', 'workflows', 'workflow_execution', 'prototypes', 'structure_viewer', 'admin', 'auth', 'contenttypes', 'sessions', 'messages', 'staticfiles', 'crispy_forms', 'rest_framework', 'django_filters', 'django_extensions', 'test_app']\n)", "funcdef": "def"}, {"fullname": "simmate.configuration.django.database.dump_database_to_json", "modulename": "simmate.configuration.django.database", "qualname": "dump_database_to_json", "type": "function", "doc": "<p></p>\n", "signature": "(filename='database_dump.json', exclude=[])", "funcdef": "def"}, {"fullname": "simmate.configuration.django.database.load_database_from_json", "modulename": "simmate.configuration.django.database", "qualname": "load_database_from_json", "type": "function", "doc": "<p></p>\n", "signature": "(filename='database_dump.json')", "funcdef": "def"}, {"fullname": "simmate.configuration.django.settings", "modulename": "simmate.configuration.django.settings", "type": "module", "doc": "<p>Django settings for project.</p>\n\n<p>Generated by 'django-admin startproject' using Django 3.0.5.</p>\n\n<p>For more information on this file, see\nhttps://docs.djangoproject.com/en/3.0/topics/settings/</p>\n\n<p>For the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/3.0/ref/settings/</p>\n"}, {"fullname": "simmate.configuration.django.settings_test", "modulename": "simmate.configuration.django.settings_test", "type": "module", "doc": "<p>This settings file is only for running Simmate's test suite with pytest.</p>\n\n<p>It contain's a little \"hack\" so devs don't have to manually edit their django\nsettings. This hack simply adds <code>simmate.website.test_app</code> to our INSTALLED_APPS\nsetting. This app is required for testing abstract models as it creates some\ntest tables for us -- ones that we don't want outside of testing.</p>\n"}, {"fullname": "simmate.configuration.django.setup_full", "modulename": "simmate.configuration.django.setup_full", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.django.setup_full.setup_full", "modulename": "simmate.configuration.django.setup_full", "qualname": "setup_full", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.configuration.django.setup_mini", "modulename": "simmate.configuration.django.setup_mini", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.django.setup_mini.connect_database_only", "modulename": "simmate.configuration.django.setup_mini", "qualname": "connect_database_only", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.configuration.prefect", "modulename": "simmate.configuration.prefect", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.prefect.connect_to_dask", "modulename": "simmate.configuration.prefect.connect_to_dask", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.prefect.connect_to_dask.set_default_executor", "modulename": "simmate.configuration.prefect.connect_to_dask", "qualname": "set_default_executor", "type": "function", "doc": "<p>If you want to start a Prefect Agent that uses a specific Dask Cluster for\nall workflow runs, you can run this function before starting your Prefect\nAgent.</p>\n\n<p>What it does is set two enviornment variables that tell Prefect to default\nall workflows to using a default executor. So this saves us from having to\nrepeatedly use this line below when setting ups workflows...\n    from prefect.executors import DaskExecutor\n    workflow.executor = DaskExecutor(address=\"tcp://152.2.172.72:8786\")</p>\n\n<p>After you run this command, you can start your Prefect Agent as usual...\n    from prefect.agent.local import LocalAgent\n    agent = LocalAgent(name=\"ExampleAgent\")\n    agent.start()</p>\n", "signature": "(dask_scheduler_address)", "funcdef": "def"}, {"fullname": "simmate.configuration.prefect.projects", "modulename": "simmate.configuration.prefect.projects", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.prefect.projects.build", "modulename": "simmate.configuration.prefect.projects", "qualname": "build", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.configuration.prefect.projects.delete", "modulename": "simmate.configuration.prefect.projects", "qualname": "delete", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.configuration.prefect.setup_resources", "modulename": "simmate.configuration.prefect.setup_resources", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.prefect.setup_resources.load_agent_settings", "modulename": "simmate.configuration.prefect.setup_resources", "qualname": "load_agent_settings", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.configuration.prefect.setup_resources.run_cluster_and_agent", "modulename": "simmate.configuration.prefect.setup_resources", "qualname": "run_cluster_and_agent", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cluster_type='Local',\n    agent_name='LabDesktop',\n    agent_labels=['DESKTOP-PVN50G5'],\n    njobs=None,\n    job_cpu=None,\n    job_mem=None,\n    walltime=None\n)", "funcdef": "def"}, {"fullname": "simmate.configuration.ssh", "modulename": "simmate.configuration.ssh", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.configuration.ssh.SSHConnection", "modulename": "simmate.configuration.ssh", "qualname": "SSHConnection", "type": "class", "doc": "<p>This is a utility for running python code through a remote ssh terminal and\na PBS/SLURM job queue. It was designed specifically to make Spyder's remote\nkernal connection easier for beginners.</p>\n\n<p>Read more here:\n    http://docs.spyder-ide.org/current/panes/ipythonconsole.html?highlight=ssh#connect-to-a-remote-kernel</p>\n\n<h2 id=\"usage-guide\">Usage Guide</h2>\n\n<p>This class's use is comprised of the following steps:</p>\n\n<pre><code>1. set up your ssh host, username, and password settings\n2. call setup_remote_kernal and wait for resources to be granted\n3. start a new terminal in Spyder with the connection json file supplied\n</code></pre>\n\n<p>Steps 1-2 are completed with the following code, which includes example\nSSH connection settings and SLURM submission command (so be sure to update these):</p>\n\n<p>.. code-block:: python\n    from simmate.configuration.ssh import SSHConnection</p>\n\n<pre><code># Example here uses SLURM (sbatch) to submit a job limted to 1 hour.\n# We HIGHLY recommend setting a time limit below 3 hrs to avoid hogging\n# resources outside of your interactive session.\n# This command below is the same as submitting a script with...\n#\n# #SBATCH --nodes=1\n# #SBATCH --ntasks=2\n# #SBATCH --cpus-per-task 1\n# #SBATCH --mem=4GB\n# #SBATCH --partition=p1\n# #SBATCH --time=03:00:00\n#\n\n# set up the connection\nconnection = SSHConnection(\n    host=\"warwulf.net\",\n    user=\"WarrenLab\",\n    connect_kwargs={\"password\": \"xxxxxx\"},\n    conda_env=\"test\",\n    working_directory=\"/media/synology/user/jack/debug\",  # no ending slash!\n    submit_command=\"sbatch -N 1 -n 2 -c 1 --mem=4GB -p p1 -t 03:00:00\",\n)\n\n# Submit your SLURM job, which creates the remote python kernal for you.\n# It will also wait for the job to start, and copy the connection file\n# over to your computer\nconnection.setup_remote_kernel()\n</code></pre>\n\n<p>Make note of the connection file that is printed out. Once you have this,\nyou're all done with this terminal and can close it!</p>\n\n<p>You can then start a new terminal by selecting \"Connect to an existing kernal\"\nin Spyder and use the file that is printed out above. This will connect to the\nremote process that you started. To confirm everything is set up and working,\nrun the following in your new terminal:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code># makes sure you're running code remotely. The output should be the\n# working directory of your remote computer\nimport os\nos.getcwd()\n\n# makes sure you have simmate installed on your remote computer\n# if this fails, you need to make sure an environment with Simmate install\n# on your remote computer in addition to your local computer.\nimport simmate\n</code></pre>\n\n<p>One important thing to remember is that your submitted job will NOT be\ncanceled automatically when you close Spyder or your python terminal. Be\nsure to cancel the job when you're done. This is done by typing \"exit\" in\nyour new python terminal.</p>\n", "bases": "fabric.connection.Connection"}, {"fullname": "simmate.configuration.ssh.SSHConnection.__init__", "modulename": "simmate.configuration.ssh", "qualname": "SSHConnection.__init__", "type": "function", "doc": "<p>Creates a fabric.Connection where a remote python kernal can be easily\nset up and connected to through SLURM.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>conda_env : str\n    The conda environment to start with python kernal with. Note, this\n    environment is only used within start_remote_kernel() and will not\n    be used by the run() method.\nsubmit_command : str\n    The command used to submit to a SLURM or PBS queue system. This should\n    be something like \"sbatch -N 1 -n 2 -c 2 -p p1 -t 03:00:00\" for SLURM.\n    PBS is also supported (although not tested in production).\nworking_directory : str, optional\n    The directory to start the python kernal in. Note, this\n    directory is only used within start_remote_kernel() and will not\n    be used by the run() method. The default is \".\" which is the home\n    directory.\nport: int\n    the remote port. Defaults to 22, which is an SSH connection.\n**kwargs :\n    Any arguments passed to fabric.Connection.</p>\n", "signature": "(\n    self,\n    conda_env: str,\n    submit_command: str,\n    working_directory: str = '.',\n    port: int = 22,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.configuration.ssh.SSHConnection.start_remote_kernel", "modulename": "simmate.configuration.ssh", "qualname": "SSHConnection.start_remote_kernel", "type": "function", "doc": "<p>Completes the following steps:\n    1. Submit job to cluster which will create a python kernel\n    2. Waits for the SLURM/PBS job to start\n    3. Loads the connection filename from the batch job output file\n    4. Copies the connection file to the local computer</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>sleep_step : int, optional\n    Time to wait between checking if the batch job started. The default\n    is 3 seconds.</p>\n", "signature": "(self, sleep_step: int = 3)", "funcdef": "def"}, {"fullname": "simmate.conftest", "modulename": "simmate.conftest", "type": "module", "doc": "<p>This module is for Simmate's test suite. You'll only use this if you are\ncontributing to the source code and making new tests.</p>\n\n<p>Nearly all of Simmate's tests stem from toolkit objects, so this file loads sample\nobjects using the <code>toolkit.base_data_types</code> module. These Structures and \nCompositions can be used in any test.</p>\n\n<p>Read more on pytest fixtures <a href=\"https://docs.pytest.org/en/6.2.x/fixture.html\">here</a>.\nThis file helps share fixtures accross files as described \n<a href=\"https://docs.pytest.org/en/6.2.x/fixture.html#conftest-py-sharing-fixtures-across-multiple-files\">here</a>.</p>\n"}, {"fullname": "simmate.conftest.get_structure_files", "modulename": "simmate.conftest", "qualname": "get_structure_files", "type": "function", "doc": "<p>Lists the full filename paths all of the files in the following directory:</p>\n\n<ul>\n<li>toolkit/base_data_types/test/test_structures</li>\n</ul>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.conftest.composition", "modulename": "simmate.conftest", "qualname": "composition", "type": "function", "doc": "<p>Gives a iteratible parameter of example compositions, where the compositions\nare given as ToolkitComposition objects.</p>\n\n<p>Use this fixture when you want to run a test on all of these compositions\none at a time. For example, you would run a test like...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># This function will be ran once for each composition</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_example</span><span class=\"p\">(</span><span class=\"n\">composition</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Do something with your composition.</span>\n    <span class=\"c1\"># We use a dummy example line here.</span>\n    <span class=\"k\">assert</span> <span class=\"n\">composition</span>\n</code></pre></div>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.conftest.sample_compositions", "modulename": "simmate.conftest", "qualname": "sample_compositions", "type": "function", "doc": "<p>Gives a dictionary of example compositions to use, where the compositions\nare given as ToolkitComposition objects.</p>\n\n<p>Use this fixture when you want to a specific compositions within a test.\nFor example, you would run a test like...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">test_example</span><span class=\"p\">(</span><span class=\"n\">sample_compositions</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># grab your desired composition</span>\n    <span class=\"n\">composition</span> <span class=\"o\">=</span> <span class=\"n\">sample_compositions</span><span class=\"p\">[</span><span class=\"s2\">&quot;Si2&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># now run any test you&#39;d like with the object.</span>\n    <span class=\"c1\"># We use a dummy example line here.</span>\n    <span class=\"k\">assert</span> <span class=\"n\">composition</span> <span class=\"o\">==</span> <span class=\"n\">Composition</span><span class=\"p\">(</span><span class=\"s2\">&quot;Si2&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.conftest.structure", "modulename": "simmate.conftest", "qualname": "structure", "type": "function", "doc": "<p>Gives a iteratible parameter of example structures, where the structures\nare given as ToolkitStructure objects.</p>\n\n<p>Use this fixture when you want to run a test on all of these structures\none at a time. For example, you would run a test like...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># This function will be ran once for each structure</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_example</span><span class=\"p\">(</span><span class=\"n\">structure</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Do something with your structure.</span>\n    <span class=\"c1\"># We use a dummy example line here.</span>\n    <span class=\"k\">assert</span> <span class=\"n\">structure</span>\n</code></pre></div>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.conftest.sample_structures", "modulename": "simmate.conftest", "qualname": "sample_structures", "type": "function", "doc": "<p>Gives a dictionary of example structures to use.</p>\n\n<p>All of these structures are loaded from files located in...\n    simmate/toolkit/base_data_types/test/test_structures</p>\n\n<p>The structures are given as ToolkitStructure objects and the key are the\nfilenames they came from (excluding filename extensions)</p>\n\n<p>Use this fixture when you want to a specific structures within a test.\nFor example, you would run a test like...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">test_example</span><span class=\"p\">(</span><span class=\"n\">sample_structures</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># grab your desired composition</span>\n    <span class=\"n\">structure</span> <span class=\"o\">=</span> <span class=\"n\">sample_structures</span><span class=\"p\">[</span><span class=\"s2\">&quot;C_mp-48_primitive&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># now run any test you&#39;d like with the object.</span>\n    <span class=\"c1\"># We use a dummy example line here.</span>\n    <span class=\"k\">assert</span> <span class=\"n\">structure</span>\n</code></pre></div>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.conftest.django_db_setup", "modulename": "simmate.conftest", "qualname": "django_db_setup", "type": "function", "doc": "<p>This fixture loads test data into the database that can be queried accross\nall other tests. For now, we only add Spacegroups and 10 sample structures.</p>\n", "signature": "(django_db_setup, django_db_blocker, sample_structures)", "funcdef": "def"}, {"fullname": "simmate.conftest.copy_test_files", "modulename": "simmate.conftest", "qualname": "copy_test_files", "type": "function", "doc": "<p>This is a test utility that takes a given directory and copies it's content\nover to a temporary directory. You'll often use this when you want to modify\nfiles within the test directory (which is often the case with ErrorHandlers).</p>\n\n<p>Here is an example use-case:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">somewhere</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleHandler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.conftest</span> <span class=\"kn\">import</span> <span class=\"n\">copy_test_files</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_example</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Make our temporary directory with copied files</span>\n    <span class=\"n\">copy_test_files</span><span class=\"p\">(</span>\n        <span class=\"n\">tmpdir</span><span class=\"p\">,</span>\n        <span class=\"n\">test_directory</span><span class=\"o\">=</span><span class=\"vm\">__file__</span><span class=\"p\">,</span>\n        <span class=\"n\">test_folder</span><span class=\"o\">=</span><span class=\"s2\">&quot;test_example&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># then you can do things like...</span>\n    <span class=\"n\">error_handler</span> <span class=\"o\">=</span> <span class=\"n\">ExampleHandler</span><span class=\"p\">()</span>\n    <span class=\"n\">error_handler</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">)</span>\n</code></pre></div>\n", "signature": "(tmpdir, test_directory: str, test_folder: str)", "funcdef": "def"}, {"fullname": "simmate.conftest.make_dummy_files", "modulename": "simmate.conftest", "qualname": "make_dummy_files", "type": "function", "doc": "<p>This is a utility that creates files. The content of these files are not\nimportant -- but they are created because sometimes ErrorHanlders may simply\ncheck to see that a file exists.</p>\n", "signature": "(*filenames: str)", "funcdef": "def"}, {"fullname": "simmate.conftest.command_line_runner", "modulename": "simmate.conftest", "qualname": "command_line_runner", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database", "modulename": "simmate.database", "type": "module", "doc": "<h1 id=\"the-simmate-database\">The Simmate Database</h1>\n\n<p>This module hosts everything for defining and interacting with your database.</p>\n\n<p>For beginners, make sure you have completed <a href=\"https://github.com/jacksund/simmate/blob/main/tutorials/05_Search_the_database.md\">our database tutorial</a>.</p>\n\n<p>Submodules include...</p>\n\n<ul>\n<li><code>base_data_types</code> : fundamental mixins for creating new tables</li>\n<li><code>workflow_results</code> : collection of result tables for <code>simmate.workflows</code></li>\n<li><code>prototypes</code> : tables of prototype structures</li>\n<li><code>third_parties</code> : loads data from external providers (such as Materials Project)</li>\n</ul>\n\n<h1 id=\"usage-notes\">Usage Notes</h1>\n\n<p>Accessing and analyzing data typically involves the following steps:</p>\n\n<ol>\n<li>Connecting to your database</li>\n<li>Loading your database table class</li>\n<li>Querying and filtering data</li>\n<li>Converting data to desired format</li>\n<li>Modifying data via <code>simmate.toolkit</code> or <a href=\"https://pandas.pydata.org/\">pandas.Dataframe</a></li>\n</ol>\n\n<h2 id=\"configuring-settings\">Configuring settings</h2>\n\n<p>For interactive use, Django settings must be configured before any of these submodules can be imported. This can be done with...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>  <span class=\"c1\"># configures Django</span>\n\n<span class=\"c1\"># and now you can import tables in this module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.database.workflow_results</span> <span class=\"kn\">import</span> <span class=\"n\">MITStaticEnergy</span>\n</code></pre></div>\n\n<p>If this is not done, you will recieve the following error:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">ImproperlyConfigured</span><span class=\"p\">:</span> <span class=\"n\">Requested</span> <span class=\"n\">setting</span> <span class=\"n\">INSTALLED_APPS</span><span class=\"p\">,</span> <span class=\"n\">but</span> <span class=\"n\">settings</span> <span class=\"n\">are</span> <span class=\"ow\">not</span>\n<span class=\"n\">configured</span><span class=\"o\">.</span> <span class=\"n\">You</span> <span class=\"n\">must</span> <span class=\"n\">either</span> <span class=\"n\">define</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">variable</span> <span class=\"n\">DJANGO_SETTINGS_MODULE</span> \n<span class=\"ow\">or</span> <span class=\"n\">call</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span> <span class=\"n\">before</span> <span class=\"n\">accessing</span> <span class=\"n\">settings</span><span class=\"o\">.</span>\n</code></pre></div>\n\n<h2 id=\"querying-data\">Querying data</h2>\n\n<p>Simmate uses Django ORM under the hood, so it follows <a href=\"https://docs.djangoproject.com/en/4.0/topics/db/queries/\">the same API for making queries</a>. Below we reiterate the most basic functionality, but full features are discussed in the <a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Django's Model-layer documentation</a>.</p>\n\n<p>All rows of the database table are available via the <code>objects</code> attribute:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">MITStaticEnergy</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>All columns of the database table can be printed via the <code>show_columns</code> methods:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">MITStaticEnergy</span><span class=\"o\">.</span><span class=\"n\">show_columns</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>To filter rows with exact-value matches in a column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">MITStaticEnergy</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n    <span class=\"n\">nsites</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">is_gap_direct</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">spacegroup</span><span class=\"o\">=</span><span class=\"mi\">166</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>To filter rows based on conditions, chain the column name with two underscores. Conditions supported are listed <a href=\"https://docs.djangoproject.com/en/4.0/ref/models/querysets/#field-lookups\">here</a>, but the most commonly used ones are:</p>\n\n<ul>\n<li><code>contains</code>, <code>in</code>, <code>gt</code>, <code>gte</code>, <code>lt</code>, <code>lte</code>, <code>range</code>, <code>isnull</code></li>\n</ul>\n\n<p>An example query with conditional filters:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">MITStaticEnergy</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n    <span class=\"n\">nsites__gte</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>  <span class=\"c1\"># greater or equal to 3 sites</span>\n    <span class=\"n\">energy__isnull</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>  <span class=\"c1\"># the structure DOES have a energy</span>\n    <span class=\"n\">density__range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">),</span>  <span class=\"c1\"># density is between 1 and 5</span>\n    <span class=\"n\">elements__contains</span><span class=\"o\">=</span><span class=\"s1\">&#39;&quot;C&quot;&#39;</span><span class=\"p\">,</span>  <span class=\"c1\"># the structure includes the element Carbon</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Note, for the final filtering condition (<code>elements__contains</code>), we used some odd quotations: we wrote '\"C\"' usingquotes inside single quotes. This is not a typo! The quotes ensure we don't accidentally grab Ca, Cs, Ce, Cl, and so on. This is an issue with our filtering logic that we are currently working to fix.</p>\n\n<h2 id=\"converting-data-to-desired-format\">Converting data to desired format</h2>\n\n<p>By default, Django returns your query results as a <code>queryset</code> (or <code>SearchResults</code> in simmate). This is a list of database objects. It is more useful to convert them to a pandas dataframe or to toolkit objects.</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Gives a pandas dataframe</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">MITStaticEnergy</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Gives a list of toolkit Structure objects</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">MITStaticEnergy</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_toolkit</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>To modify each of these, see the <a href=\"https://pandas.pydata.org/docs/\">pandas</a> and <code>simmate.toolkit</code> documentation for more info.</p>\n"}, {"fullname": "simmate.database.base_data_types", "modulename": "simmate.database.base_data_types", "type": "module", "doc": "<h1 id=\"the-base-data-types\">The Base Data Types</h1>\n\n<p>This module defines the fundamental building blocks for storing data. When building new and custom tables, you should inherit from one or more of these classes.</p>\n\n<h1 id=\"hierarchy-of-types\">Hierarchy of Types</h1>\n\n<p>There are different \"levels\" of data types define here -- as some types inherit functionality from others.</p>\n\n<p>At the lowest level...</p>\n\n<ul>\n<li><code>base.DatabaseTable</code> : all tables inherit from this one and it is where common functionality (like the <code>show_columns</code> method) is defined</li>\n</ul>\n\n<p>Next are a series of mixins defined in each of these modules...</p>\n\n<ul>\n<li><code>calculation</code> : holds information about a flow run (corrections, timestamps, etc.)</li>\n<li><code>structure</code> : holds a periodic crystal structure</li>\n<li><code>symmetry</code> : NOT a mixin. Defines symmetry info for <code>structure</code> to reference</li>\n<li><code>forces</code> : holds site forces and lattice stress information</li>\n<li><code>thermodynamics</code> : holds energy and stability information</li>\n<li><code>density_of_states</code>: holds results of a density of states calculation</li>\n<li><code>band_structure</code>: holds results of a band structure calculation</li>\n</ul>\n\n<p>These mixins are frequently combined in for types of calculations. We define some of those common classes here too:</p>\n\n<ul>\n<li><code>static_energy</code> : holds results of single point energy calculation</li>\n<li><code>relaxation</code> : holds all steps of a structure geometry optimization</li>\n<li><code>nudged_elastic_band</code> : holds all results from trajectory calculations</li>\n<li><code>dynamics</code> : holds all steps of a molecular dynamics simmulation</li>\n<li><code>calculation_nested</code> : a special type of calculation that involves running a workflow made of smaller workflows</li>\n</ul>\n\n<h1 id=\"usage-guide\">Usage Guide</h1>\n\n<p>Creating a custom table involves the following steps:</p>\n\n<ol>\n<li>defining your new table's inheritance and custom columns</li>\n<li>making sure your table is registerd to your database</li>\n<li>saving data to your new table</li>\n</ol>\n\n<p>All classes in this module are abstract and largely ment to be used as mix-ins. Each class will contain details on it's specific use, but when combining multiple types, you can do the following:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">table_column</span><span class=\"p\">,</span>\n    <span class=\"n\">Structure</span><span class=\"p\">,</span>\n    <span class=\"n\">Thermodynamics</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Inherit from all the types you&#39;d like to store data on. All of the columns</span>\n<span class=\"c1\"># define in each of these types will be incorporated into your table.</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyCustomTable</span><span class=\"p\">(</span><span class=\"n\">Structure</span><span class=\"p\">,</span> <span class=\"n\">Thermodynamics</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># If you are not using the `Calculation` mix-in, you&#39;ll have to specify</span>\n    <span class=\"c1\"># which app this table is associated with. To determine what you set here,</span>\n    <span class=\"c1\"># you should have completed the advanced simmate tutorials (08-09).</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my_custom_app&quot;</span>\n\n    <span class=\"c1\"># Define the &quot;raw data&quot; for your table. This is required if you&#39;d like to</span>\n    <span class=\"c1\"># use the to_archive method.</span>\n    <span class=\"n\">base_info</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;custom_column_01&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;custom_column_02&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"o\">+</span> <span class=\"n\">Structure</span><span class=\"o\">.</span><span class=\"n\">base_info</span>\n        <span class=\"o\">+</span> <span class=\"n\">Thermodynamics</span><span class=\"o\">.</span><span class=\"n\">base_info</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Add any custom columns you&#39;d like</span>\n    <span class=\"c1\"># These follow the types supported by Django.</span>\n\n    <span class=\"c1\"># This custom field will be required and must be supplied at creation</span>\n    <span class=\"n\">custom_column_01</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># This column we say is allowed to be empty. This is often needed if you</span>\n    <span class=\"c1\"># create an entry to start a calculation and then fill in data after a</span>\n    <span class=\"c1\"># it completes.</span>\n    <span class=\"n\">custom_column_02</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">(</span><span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p><strong>NOTE:</strong> Unless you are contributing to Simmate's source code, defining a new table does <em>NOT</em> automatically register it to your database. To do this, you must follow along with <a href=\"https://github.com/jacksund/simmate/blob/main/tutorials/09_Add_custom_workflows.md\">our tutorial on adding custom workflows</a>.</p>\n\n<p>Once your table is created and registered, you can use the <code>from_toolkit</code> method to create and save your data to the database. Note, the information you pass to this method is entirely dependent on what you inherit from and define above.</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">my.example.project</span> <span class=\"kn\">import</span> <span class=\"n\">MyCustomTable</span>\n\n<span class=\"n\">new_row</span> <span class=\"o\">=</span> <span class=\"n\">MyCustomTable</span><span class=\"o\">.</span><span class=\"n\">from_toolkit</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Because we inherited from Structure, we must provide structure</span>\n    <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">new_structure</span><span class=\"p\">,</span>  <span class=\"c1\"># provide a ToolkitStructure here</span>\n    <span class=\"c1\"># </span>\n    <span class=\"c1\"># All tables can optionally include a source too.</span>\n    <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">&quot;made by jacksund&quot;</span><span class=\"p\">,</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Because we inherited from Thermodynamics, we must provide energy</span>\n    <span class=\"n\">energy</span><span class=\"o\">=-</span><span class=\"mf\">5.432</span><span class=\"p\">,</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Our custom fields can also be added</span>\n    <span class=\"n\">custom_column_01</span><span class=\"o\">=</span><span class=\"mi\">1234</span><span class=\"p\">,</span>\n    <span class=\"n\">custom_column_02</span><span class=\"o\">=</span><span class=\"mf\">3.14159</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">new_row</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>To modify a row, you can load it from your database, update the column, and then resave. Note, there are may more ways to do this, so consult the Django documentation for advanced usage.</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">my.example.project</span> <span class=\"kn\">import</span> <span class=\"n\">MyCustomTable</span>\n\n<span class=\"n\">my_row</span> <span class=\"o\">=</span> <span class=\"n\">MyCustomTable</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_row</span><span class=\"o\">.</span><span class=\"n\">custom_column_01</span> <span class=\"o\">=</span> <span class=\"mi\">4321</span>\n\n<span class=\"n\">my_row</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<h1 id=\"dev-notes\">Dev Notes</h1>\n\n<p>Every base model class has its attributes and methods separated (separated only by comments) into sections. These are simply to organize the code and make it easier to read:</p>\n\n<ul>\n<li><p><code>Base Info</code> :\nThese fields are the absolute minimum required for the object and can be\nconsidered the object's raw data.</p></li>\n<li><p><code>Query-helper Info</code> :\nThese fields aren't required but exist simply to help with common query\nfunctions. For example, a structure's volume can be calculated using the\nbase info fields, but it helps to have this data in a separate column to\nimprove common query efficiencies at the cost of a larger database.</p></li>\n<li><p><code>Relationships</code> :\nThese fields point to other models that contain related data. For example,\na single structure may be linked to calculations in several other tables.\nThe relationship between a structure and it's calculations can be described\nin this section. Note that the code establishing the relationship only exists\nin one of the models -- so we simply add a comment in the other's section.\nTYPES OF RELATIONSHIPS:\n    ManyToMany - place field in either but not both\n    ManyToOne (ForeignKey) - place field in the many\n    OneToOne - place field in the one that has extra features</p></li>\n<li><p><code>Properties</code> :\nIn a few cases, you may want to add a convience attribute to a model. However,\nin the majority of cases, you'll want to convert the model to some other\nclass first which has all of the properties you need. We separate classes\nin this way for performance and clarity. This also allows our core and\ndatabase to be separate and thus modular.</p></li>\n<li><p><code>Model Methods</code> :\nThese are convience functions added onto the model. For example, it's useful\nto have a method to quickly convert a model Structure (so an object representing\na row in a database) to a pymatgen Structure (a really powerful python object)</p></li>\n</ul>\n"}, {"fullname": "simmate.database.base_data_types.band_structure", "modulename": "simmate.database.base_data_types.band_structure", "type": "module", "doc": "<p>This module is experimental and subject to change.</p>\n"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.Meta", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.Meta.__init__", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.Meta.abstract", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.base_info", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['band_structure_data']"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.band_structure_data", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.band_structure_data", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.nbands", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.nbands", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.band_gap", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.is_gap_direct", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.band_gap_direct", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.band_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.energy_fermi", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.conduction_band_minimum", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.valence_band_maximum", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.is_metal", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.is_metal", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.to_toolkit_band_structure", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.to_toolkit_band_structure", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructure.source", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructure.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, BandStructure, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.Meta", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.Meta.__init__", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.Meta.abstract", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.Meta.app_label", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.base_info", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['band_structure_data', 'directory', 'prefect_flow_run_id', 'created_at', 'updated_at', 'corrections']"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.update_from_vasp_run", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.update_from_vasp_run", "type": "function", "doc": "<p></p>\n", "signature": "(self, vasprun, corrections, directory)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.from_directory", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.from_directory", "type": "function", "doc": "<p></p>\n", "signature": "(cls, directory: str)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.structure_string", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.nsites", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.nelements", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.elements", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.chemical_system", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.density", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.density_atomic", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.volume", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.volume_molar", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.formula_full", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.formula_reduced", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.formula_anonymous", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.spacegroup", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.band_structure_data", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.band_structure_data", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.nbands", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.nbands", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.band_gap", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.is_gap_direct", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.band_gap_direct", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.band_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.energy_fermi", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.conduction_band_minimum", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.valence_band_maximum", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.is_metal", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.is_metal", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.directory", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.prefect_flow_run_id", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.created_at", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.updated_at", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.corrections", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.source", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.spacegroup_id", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.get_next_by_created_at", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.band_structure.BandStructureCalc.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.band_structure", "qualname": "BandStructureCalc.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base", "modulename": "simmate.database.base_data_types.base", "type": "module", "doc": "<p>This module defines the lowest-level classes for database tables and their\nsearch results.</p>\n"}, {"fullname": "simmate.database.base_data_types.base.SearchResults", "modulename": "simmate.database.base_data_types.base", "qualname": "SearchResults", "type": "class", "doc": "<p>This class adds some extra methods to the results returned from a database\nsearch. For example, if you searched all Structures and wanted to convert\nthese to a pandas dataframe or even a list of pymatgen structures, you can\nnow do...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># for a list of database objects (django models)</span>\n<span class=\"n\">search_results</span> <span class=\"o\">=</span> <span class=\"n\">Structures</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># for a pandas dataframe (which is like an Excel table)</span>\n<span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">search_results</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># for a list of pymatgen structure objects</span>\n<span class=\"n\">structures</span> <span class=\"o\">=</span> <span class=\"n\">search_results</span><span class=\"o\">.</span><span class=\"n\">to_toolkit</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>All other functionality is inherited from\n<a href=\"https://docs.djangoproject.com/en/4.0/ref/models/querysets/\">Django QuerySets</a>.</p>\n", "bases": "django.db.models.query.QuerySet"}, {"fullname": "simmate.database.base_data_types.base.SearchResults.to_dataframe", "modulename": "simmate.database.base_data_types.base", "qualname": "SearchResults.to_dataframe", "type": "function", "doc": "<p>Returns a Pandas DataFrame of the search results</p>\n\n<p>This method is coppied from django_pandas'\n<a href=\"https://github.com/chrisdev/django-pandas/blob/master/django_pandas/managers.py\">manager.py</a></p>\n\n<h2 id=\"paramaters\">Paramaters</h2>\n\n<ul>\n<li><code>fieldnames</code>:\nThe model field names(columns) to utilise in creating the DataFrame.\nYou can span a relationships in the usual Django ORM way by using\nthe foreign key field name separated by double underscores and refer\nto a field in a related model.</li>\n<li><code>index</code>:\nspecify the field to use  for the index. If the index field is not\nin fieldnames it will be appended. This is mandatory for timeseries.</li>\n<li><code>verbose</code>:\nIf  this is <code>True</code> then populate the DataFrame with the human\nreadable versions for foreign key fields else use the actual values\nset in the model</li>\n<li><code>coerce_float</code>:\nAttempt to convert values to non-string, non-numeric objects (like\ndecimal.Decimal) to floating point.</li>\n<li><code>datetime_index</code>: bool\nspecify whether index should be converted to a DateTimeIndex.</li>\n</ul>\n", "signature": "(\n    self,\n    fieldnames: List[str] = (),\n    verbose: bool = True,\n    index: str = None,\n    coerce_float: str = False,\n    datetime_index: str = False\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.SearchResults.to_toolkit", "modulename": "simmate.database.base_data_types.base", "qualname": "SearchResults.to_toolkit", "type": "function", "doc": "<p>Converts your SearchResults to a list of pymatgen objects</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.SearchResults.to_archive", "modulename": "simmate.database.base_data_types.base", "qualname": "SearchResults.to_archive", "type": "function", "doc": "<p>Writes a compressed zip file using the table's base_info attribute.\nUnderneath, the file is written in a csv format.</p>\n\n<p>This is useful for small making archive files and reloading fixtures\nto a separate database.</p>\n\n<p>This method is attached to the table manager for scenarios to allow\nqueryset filtering before dumping data.</p>\n\n<p>To load this database dump into a new database, use the class's\n<code>from_archive</code> method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>filename</code>:\nThe filename to write the zip file to. By defualt, None will make\na filename named MyExampleTableName-2022-01-25.zip, where the date\nwill be the current day (for versioning).</li>\n</ul>\n", "signature": "(self, filename: str = None)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.Meta", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.Meta.__init__", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.Meta.abstract", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.base_info", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = []"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.source", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.source_doi", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.source_doi", "type": "variable", "doc": "<p>Source paper that must be referenced if this data is used. If this is None,\nplease refer to the <code>source</code> attribute for further details on what to \nreference.</p>\n", "annotation": ": str", "default_value": " = None"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.remote_archive_link", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.remote_archive_link", "type": "variable", "doc": "<p>The URL that is used to download the archive and then populate this table.\nMany tables, such as those in <code>simmate.database.third_parties</code>, have\npre-existing data that you can download and load into your local database,\nso if this attribute is set, you can use the <code>load_remote_archive</code> method.</p>\n", "annotation": ": str", "default_value": " = None"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.objects", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.objects", "type": "function", "doc": "<p>Accesses all of the rows in this datatable and initiates a SearchResults\nobject. Using this, you can perform complex filtering and conversions on\ndata from this table.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.show_columns", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.show_columns", "type": "function", "doc": "<p>Prints a list of all the column names for this table and indicates which\ncolumns are related to other tables. This is primarily used to help users\ninteractively view what data is available.</p>\n", "signature": "(cls)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.create_subclass", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.create_subclass", "type": "function", "doc": "<p>This method is useful for dynamically creating a subclass DatabaseTable\nfrom some abstract class.</p>\n\n<p>Let's take an example where we inherit from a Structure table. The two\nways we create a NewTable below are exactly the same:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Normal way to create a child class</span>\n<span class=\"n\">NewTable</span><span class=\"p\">(</span><span class=\"n\">Structure</span><span class=\"p\">):</span>\n    <span class=\"n\">new_field1</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">()</span>\n    <span class=\"n\">new_field2</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># How this method makes the same child class</span>\n<span class=\"n\">NewTable</span> <span class=\"o\">=</span> <span class=\"n\">Structure</span><span class=\"o\">.</span><span class=\"n\">create_subclass</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;NewTable&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">module</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"c1\"># required for serialization</span>\n    <span class=\"n\">new_field1</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">()</span>\n    <span class=\"n\">new_field2</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">()</span>\n    <span class=\"c1\"># app_label --&gt; typically not required bc the parent class sets this</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n\n<p>While this might seem silly, it helps us avoid a bunch of boilerplate\ncode when we need to redefine a bunch of relationships in every single\nchild class (and always in the same way). A great example of it's utility\nis in <code>simmate.calculators.vasp.database.relaxation</code>.</p>\n", "signature": "(cls, name: str, module: str, app_label: str = None, **new_columns)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.from_toolkit", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.from_toolkit", "type": "function", "doc": "<p>Given fundamental \"base_info\" and toolkit objects, this method will populate\nall relevant columns.</p>\n\n<p>If the table is made up of multiple mix-ins, this method iterates through\neach of the <code>_from_toolkit</code> methods of those mixins and combines the results.\nTherefore, you must view this method for each mix-ins to determine which\nkwargs must be passed.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>as_dict</code> :\nWhether to return the populated data as a dictionary or to initialize\nit as a database object. Defaults to False.</li>\n<li><code>**kwargs</code> :\nAll fields required in order to initialize the database entry. For\nexample, a Structure table would require a toolkit structure, while\na Thermodynamics table would require an energy.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>a dictionary if as_dict is True; and a database object if as_dict is False</p>\n", "signature": "(cls, as_dict=False, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.load_archive", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.load_archive", "type": "function", "doc": "<p>Reads a compressed zip file made by <code>objects.to_archive</code> and loads the data\nback into the Simmate database.</p>\n\n<p>Typically, users won't call this method directly, but instead use the\n<code>load_remote_archive</code> method, which handles downloading the archive\nfile from the Simmate website for you.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>filename</code>:\nThe filename to write the zip file to. By defualt, None will try to\nfind a file named \"MyExampleTableName-2022-01-25.zip\", where the date\ncorresponds to version/timestamp. If multiple files match this format\nthe most recent date will be used.</p></li>\n<li><p><code>delete_on_completion</code>:\nWhether to delete the archive file once all data is loaded into the\ndatabase. Defaults to False</p></li>\n<li><p><code>confirm_override</code>:\nIf the table already has data in it, the user must take particular\ncare to downloading new data. This flag makes sure the user has\nmade the proper checks to run this action. Default is False.</p></li>\n<li><p><code>parallel</code>:\nWhether to load the data in parallel. If true, this will start\na local Dask cluster and each data row will be submitted as a task\nto the cluster. This provides substansial speed-ups for loading\nlarge datasets into the dataset. Default is False.</p></li>\n<li><p><code>confirm_sqlite_parallel</code>:\nIf the database backend is sqlite, this parameter ensures the user\nknows what they are doing and know the risks of parallelization.\nDefault is False.</p></li>\n</ul>\n", "signature": "(\n    cls,\n    filename: str = None,\n    delete_on_completion: bool = False,\n    confirm_override: bool = False,\n    parallel: bool = False,\n    confirm_sqlite_parallel: bool = False\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.base.DatabaseTable.load_remote_archive", "modulename": "simmate.database.base_data_types.base", "qualname": "DatabaseTable.load_remote_archive", "type": "function", "doc": "<p>Downloads a compressed zip file made by <code>objects.to_archive</code> and loads\nthe data back into the Simmate database.</p>\n\n<p>This method should only be called once -- when you have a completely\nempty database. After this call, all data will be stored locally and\nyou don't need to call this method again (even accross python sessions).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>remote_archive_link</code>:\nThe URL for that the archive will be downloaded from. If not supplied,\nit will default to the table's remote_archive_link attribute.</p></li>\n<li><p><code>confirm_override</code>:\nIf the table already has data in it, the user must take particular\ncare to downloading new data. This flag makes sure the user has\nmade the proper checks to run this action.</p></li>\n<li><p><code>parallel</code>:\nWhether to load the data in parallel. If true, this will start\na local Dask cluster and each data row will be submitted as a task\nto the cluster. This provides substansial speed-ups for loading\nlarge datasets into the dataset. Default is False.</p></li>\n<li><p><code>confirm_sqlite_parallel</code>:\nIf the database backend is sqlite, this parameter ensures the user\nknows what they are doing and know the risks of parallelization.\nDefault is False.</p></li>\n</ul>\n", "signature": "(\n    cls,\n    remote_archive_link: str = None,\n    confirm_override: bool = False,\n    parallel: bool = False,\n    confirm_sqlite_parallel: bool = False\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation", "modulename": "simmate.database.base_data_types.calculation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.Meta", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.Meta.__init__", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.Meta.abstract", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.Meta.app_label", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.base_info", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['directory', 'prefect_flow_run_id', 'created_at', 'updated_at', 'corrections']"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.directory", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.prefect_flow_run_id", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.created_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.updated_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.corrections", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.prefect_cloud_link", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.prefect_cloud_link", "type": "variable", "doc": "<p>URL to this calculation (flow-run) in the Prefect Cloud webstite.</p>\n", "annotation": ": str"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.flow_run_view", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.flow_run_view", "type": "variable", "doc": "<p></p>\n", "annotation": ": prefect.backend.flow_run.FlowRunView"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.prefect_flow_run_name", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.prefect_flow_run_name", "type": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.prefect_state", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.prefect_state", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> str", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.from_prefect_id", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.from_prefect_id", "type": "function", "doc": "<p>Given a prefect id, this method will do one of the following...</p>\n\n<ol>\n<li>if it exists, load the database object with matching prefect_id</li>\n<li>if it doesn't exist, create a new database object using this ID and extra kwargs</li>\n</ol>\n", "signature": "(cls, id: str, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.source", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.get_next_by_created_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation.Calculation.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.calculation", "qualname": "Calculation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested", "modulename": "simmate.database.base_data_types.calculation_nested", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation", "type": "class", "doc": "<p>A nested calculation is a workflow made up of other workflows. For example,\nwe may want to run a workflow that runs a series of relaxations. Or maybe\na relaxation, then energy, then bandstrucuture calculation. This table\nis for keeping track of workflows ran in series like this.</p>\n\n<p>Typically, you'll use the <code>create_subclass_from_calcs</code> method to create a\nsubclass of this table.</p>\n", "bases": "simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.Meta", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.Meta.__init__", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.Meta.abstract", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.Meta.app_label", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.corrections", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.corrections", "type": "variable", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "default_value": " = None"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.create_subclass_from_calcs", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.create_subclass_from_calcs", "type": "function", "doc": "<p>Dynamically creates a subclass of NestedCalculation -- and handles linking\ntogether all child calculation tables.</p>\n\n<p><code>simmate.calculators.vasp.database.relaxation</code> shows an example of creating\na table from this class:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">StagedRelaxation</span> <span class=\"o\">=</span> <span class=\"n\">NestedCalculation</span><span class=\"o\">.</span><span class=\"n\">create_subclass_from_calcs</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;StagedRelaxation&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">Quality00Relaxation</span><span class=\"p\">,</span>\n        <span class=\"n\">Quality01Relaxation</span><span class=\"p\">,</span>\n        <span class=\"n\">Quality02Relaxation</span><span class=\"p\">,</span>\n        <span class=\"n\">Quality03Relaxation</span><span class=\"p\">,</span>\n        <span class=\"n\">Quality04Relaxation</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">module</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n\n<p>To add custom columns, you can do the following:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"n\">table_column</span>\n\n<span class=\"n\">StagedRelaxation</span> <span class=\"o\">=</span> <span class=\"n\">NestedCalculation</span><span class=\"o\">.</span><span class=\"n\">create_subclass_from_calcs</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span> <span class=\"c1\"># everything is the same as above</span>\n    <span class=\"n\">custom_column_01</span><span class=\"o\">=</span><span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>name</code> :\nName of the subclass that is output.</li>\n<li><code>child_calculation_tables</code> :\nlist of database tables for the nested workflows. This table links\nthese sub-tables together so results can be viewed from each step.</li>\n<li><code>module</code> :\nname of the module this subclass should be associated with. Typically,\nyou should pass __name__ to this.\n**extra_columns : TYPE\nAdditional columns to add to the table. The keyword will be the\ncolumn name and the value should match django options\n(e.g. table_column.FloatField())</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>NewClass :\n    A subclass of NestedCalculation.</p>\n", "signature": "(\n    cls,\n    name: str,\n    child_calculation_tables: List[simmate.database.base_data_types.calculation.Calculation],\n    module: str,\n    **extra_columns\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.directory", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.prefect_flow_run_id", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.created_at", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.updated_at", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.source", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.get_next_by_created_at", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.calculation_nested.NestedCalculation.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.calculation_nested", "qualname": "NestedCalculation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states", "modulename": "simmate.database.base_data_types.density_of_states", "type": "module", "doc": "<p>This module is experimental and subject to change.</p>\n"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.Meta", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.Meta.__init__", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.Meta.abstract", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.base_info", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['density_of_states_data']"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.density_of_states_data", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.density_of_states_data", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.band_gap", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.energy_fermi", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.conduction_band_minimum", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.valence_band_maximum", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.to_toolkit_density_of_states", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.to_toolkit_density_of_states", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStates.source", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStates.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, DensityofStates, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.Meta", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.Meta.__init__", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.Meta.abstract", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.Meta.app_label", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.base_info", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['density_of_states_data', 'directory', 'prefect_flow_run_id', 'created_at', 'updated_at', 'corrections']"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.update_from_vasp_run", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.update_from_vasp_run", "type": "function", "doc": "<p></p>\n", "signature": "(self, vasprun, corrections, directory)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.from_directory", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.from_directory", "type": "function", "doc": "<p></p>\n", "signature": "(cls, directory: str)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.structure_string", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.nsites", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.nelements", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.elements", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.chemical_system", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.density", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.density_atomic", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.volume", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.volume_molar", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.formula_full", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.formula_reduced", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.formula_anonymous", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.spacegroup", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.density_of_states_data", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.density_of_states_data", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.band_gap", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.energy_fermi", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.conduction_band_minimum", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.valence_band_maximum", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.directory", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.prefect_flow_run_id", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.created_at", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.updated_at", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.corrections", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.source", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.spacegroup_id", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.get_next_by_created_at", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.density_of_states.DensityofStatesCalc.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.density_of_states", "qualname": "DensityofStatesCalc.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics", "modulename": "simmate.database.base_data_types.dynamics", "type": "module", "doc": "<p>This module is experimental and subject to change.</p>\n"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.Meta", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.Meta.__init__", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.Meta.abstract", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.Meta.app_label", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.temperature_start", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.temperature_start", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.temperature_end", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.temperature_end", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.time_step", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.time_step", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.nsteps", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.nsteps", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.create_subclasses", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.create_subclasses", "type": "function", "doc": "<p>Dynamically creates a subclass of DynamicsRun as well as a separate\nDynamicsIonicStep table for it. These tables are linked together.</p>\n\n<p>Example use:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"n\">DynamicsRun</span>\n\n<span class=\"n\">ExampleDynamicsRun</span><span class=\"p\">,</span> <span class=\"n\">ExampleDynamicsIonicStep</span> <span class=\"o\">=</span> <span class=\"n\">DynamicsRun</span><span class=\"o\">.</span><span class=\"n\">create_subclasses</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Example&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">module</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>name</code> :\nThe prefix name of the subclasses that are output. \"DynamicsRun\" and\n\"DynamicsIonicStep\" will be attached to the end of this prefix.</li>\n<li><code>module</code> :\nname of the module this subclass should be associated with. Typically,\nyou should pass __name__ to this.</li>\n<li><code>**extra_columns</code> :\nAdditional columns to add to the table. The keyword will be the\ncolumn name and the value should match django options\n(e.g. table_column.FloatField())</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>NewDynamicsRunClass</code> :\nA subclass of DynamicsRun.</li>\n<li><code>NewDynamicsIonicStepClass</code>:\nA subclass of DynamicDynamicsIonicStep.</li>\n</ul>\n", "signature": "(cls, name: str, module: str, **extra_columns)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.update_from_vasp_run", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.update_from_vasp_run", "type": "function", "doc": "<p>Given a Vasprun object from a finished dynamics run, this will update the\nDynamicsRun table entry and the corresponding DynamicsIonicStep entries.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>vasprun :\n    The final Vasprun object from the dynamics run outputs.\ncorrections :\n    List of errors and corrections applied to during the relaxation.\ndirectory :\n    name of the directory that relaxation was ran in. This is only used\n    to reference the archive file if it's ever needed again.</p>\n", "signature": "(\n    self,\n    vasprun: pymatgen.io.vasp.outputs.Vasprun,\n    corrections: List,\n    directory: str\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.structure_string", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.nsites", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.nelements", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.elements", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.chemical_system", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.density", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.density_atomic", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.volume", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.volume_molar", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.formula_full", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.formula_reduced", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.formula_anonymous", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.spacegroup", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.directory", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.prefect_flow_run_id", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.created_at", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.updated_at", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.corrections", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.source", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.spacegroup_id", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.get_next_by_created_at", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsRun.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsRun.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics, simmate.database.base_data_types.forces.Forces"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.Meta", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.Meta.__init__", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.Meta.abstract", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.Meta.app_label", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.base_info", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.base_info", "type": "variable", "doc": "<p>Base Info</p>\n", "annotation": ": List[str]", "default_value": " = ['number', 'structure_string', 'energy', 'site_forces', 'lattice_stress']"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.number", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.number", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.temperature", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.temperature", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.create_subclass_from_dynamics_run", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.create_subclass_from_dynamics_run", "type": "function", "doc": "<p>Dynamically creates a subclass of DynamicsIonicStep and links it to the\nDynamicsRun table.</p>\n\n<p>This method should NOT be called directly because it is instead used by\n<code>DynamicsRun.create_subclasses</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>name</code> :\nName of the subclass that is output.</li>\n<li><code>dynamics_run</code> :\nDynamicsRun table that these ionic steps should be associated with.</li>\n<li><code>module</code> :\nname of the module this subclass should be associated with. Typically,\nyou should pass __name__ to this.</li>\n<li><code>**extra_columns</code> :\nAdditional columns to add to the table. The keyword will be the\ncolumn name and the value should match django options\n(e.g. table_column.FloatField())</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>NewClass</code> :\nA subclass of DynamicsIonicStep.</li>\n</ul>\n", "signature": "(\n    cls,\n    name: str,\n    dynamics_run: simmate.database.base_data_types.dynamics.DynamicsRun,\n    module: str,\n    **extra_columns\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.structure_string", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.nsites", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.nelements", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.elements", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.chemical_system", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.density", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.density_atomic", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.volume", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.volume_molar", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.formula_full", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.formula_reduced", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.formula_anonymous", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.spacegroup", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.energy", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.energy_per_atom", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.energy_above_hull", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.is_stable", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.decomposes_to", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.formation_energy", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.formation_energy_per_atom", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.site_forces", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.lattice_stress", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.site_force_norm_max", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.site_forces_norm", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.site_forces_norm_per_atom", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.lattice_stress_norm", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.source", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.dynamics.DynamicsIonicStep.spacegroup_id", "modulename": "simmate.database.base_data_types.dynamics", "qualname": "DynamicsIonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.forces", "modulename": "simmate.database.base_data_types.forces", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.forces.Forces", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.database.base_data_types.forces.Forces.Meta", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.forces.Forces.Meta.__init__", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.Meta.abstract", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.forces.Forces.base_info", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['site_forces', 'lattice_stress']"}, {"fullname": "simmate.database.base_data_types.forces.Forces.site_forces", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.lattice_stress", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.site_force_norm_max", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.site_forces_norm", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.site_forces_norm_per_atom", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.lattice_stress_norm", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.lattice_stress_norm_per_atom", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.forces.Forces.source", "modulename": "simmate.database.base_data_types.forces", "qualname": "Forces.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "type": "module", "doc": "<p>This module is experimental and subject to change.</p>\n"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.Meta", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.Meta.__init__", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.Meta.abstract", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.Meta.app_label", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.migrating_specie", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.migrating_specie", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.vacancy_mode", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.vacancy_mode", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.atomic_fraction", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.atomic_fraction", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.barrier_cell", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.barrier_cell", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.paths_involved", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.paths_involved", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.npaths_involved", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.npaths_involved", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.from_toolkit", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.from_toolkit", "type": "function", "doc": "<p>Given fundamental \"base_info\" and toolkit objects, this method will populate\nall relevant columns.</p>\n\n<p>If the table is made up of multiple mix-ins, this method iterates through\neach of the <code>_from_toolkit</code> methods of those mixins and combines the results.\nTherefore, you must view this method for each mix-ins to determine which\nkwargs must be passed.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>as_dict</code> :\nWhether to return the populated data as a dictionary or to initialize\nit as a database object. Defaults to False.</li>\n<li><code>**kwargs</code> :\nAll fields required in order to initialize the database entry. For\nexample, a Structure table would require a toolkit structure, while\na Thermodynamics table would require an energy.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>a dictionary if as_dict is True; and a database object if as_dict is False</p>\n", "signature": "(\n    cls,\n    migrating_specie: str = None,\n    vacancy_mode: bool = None,\n    as_dict: bool = False,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.from_directory", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.from_directory", "type": "function", "doc": "<p></p>\n", "signature": "(cls, directory: str, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.create_subclasses", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.create_subclasses", "type": "function", "doc": "<p>Dynamically creates a subclass of Relaxation as well as a separate IonicStep\ntable for it. These tables are linked together.</p>\n\n<p>Example use:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"n\">Relaxation</span>\n\n<span class=\"c1\"># note the odd formatting here is just because we are parsing three</span>\n<span class=\"c1\"># outputs from this method to three variables.</span>\n<span class=\"p\">(</span>\n    <span class=\"n\">ExampleDiffusionAnalysis</span><span class=\"p\">,</span>\n    <span class=\"n\">ExampleMigrationHop</span><span class=\"p\">,</span>\n    <span class=\"n\">ExampleMigrationImage</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">DiffusionAnalysis</span><span class=\"o\">.</span><span class=\"n\">create_subclasses</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Example&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">module</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>name</code> :\nThe prefix name of the subclasses that are output. \"Relaxation\" and\n\"IonicStep\" will be attached to the end of this prefix.</p></li>\n<li><p><code>module</code> :\nname of the module this subclass should be associated with. Typically,\nyou should pass __name__ to this.</p></li>\n<li><p><code>**extra_columns</code> :\nAdditional columns to add to the table. The keyword will be the\ncolumn name and the value should match django options\n(e.g. table_column.FloatField())</p></li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>NewDiffusionAnalysisClass</code> :\nA subclass of DiffusionAnalysis.</li>\n<li><code>NewMigrationHopClass</code>:\nA subclass of MigrationHop.</li>\n<li><code>NewMigrationHopClass</code>:\nA subclass of MigrationHop.</li>\n</ul>\n", "signature": "(cls, name: str, module: str, **extra_columns)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.structure_string", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.nsites", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.nelements", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.elements", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.chemical_system", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.density", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.density_atomic", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.volume", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.volume_molar", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.formula_full", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.formula_reduced", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.formula_anonymous", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.spacegroup", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.source", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis.spacegroup_id", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "DiffusionAnalysis.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.Meta", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.Meta.__init__", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.Meta.abstract", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.Meta.app_label", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.site_start", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.site_start", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.site_end", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.site_end", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.index_start", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.index_start", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.index_end", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.index_end", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.number", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.number", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.length", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.length", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.dimension_path", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.dimension_path", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.dimension_host_lattice", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.dimension_host_lattice", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.energy_barrier", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.energy_barrier", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.to_toolkit", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.to_toolkit", "type": "function", "doc": "<p>converts the database MigrationHop to a toolkit MigrationHop</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.from_directory", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.from_directory", "type": "function", "doc": "<p></p>\n", "signature": "(cls, directory: str, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.from_pymatgen", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.from_pymatgen", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls,\n    analysis: pymatgen.analysis.transition_state.NEBAnalysis,\n    diffusion_analysis_id: int = None,\n    migration_hop_id: int = None\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.create_subclasses_from_diffusion_analysis", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.create_subclasses_from_diffusion_analysis", "type": "function", "doc": "<p>Dynamically creates subclass of MigrationHop and MigrationImage, then\nlinks them to the DiffusionAnalysis table.</p>\n\n<p>This method should NOT be called directly because it is instead used by\n<code>DiffusionAnalysis.create_subclasses</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>name</code> :\nName of the subclass that is output.</li>\n<li><code>diffusion_analysis</code> :\nDiffusionAnalysis table that these subclasses should be associated with.</li>\n<li><code>module</code> :\nname of the module this subclass should be associated with. Typically,\nyou should pass __name__ to this.</li>\n<li><code>**extra_columns</code> :\nAdditional columns to add to the table. The keyword will be the\ncolumn name and the value should match django options\n(e.g. table_column.FloatField())</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>NewMigrationHopClass</code>:\nA subclass of MigrationHop.</li>\n<li><code>NewMigrationHopClass</code>:\nA subclass of MigrationHop.</li>\n</ul>\n", "signature": "(\n    cls,\n    name: str,\n    diffusion_analysis: simmate.database.base_data_types.nudged_elastic_band.DiffusionAnalysis,\n    module: str,\n    **extra_columns\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationHop.source", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationHop.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.Meta", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.Meta.__init__", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.Meta.abstract", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.Meta.app_label", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.base_info", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['number', 'structure_string', 'force_tangent', 'structure_distance', 'energy']"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.number", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.number", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.force_tangent", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.force_tangent", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.energy", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.energy", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.structure_distance", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.structure_distance", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.source", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.source", "type": "variable", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "default_value": " = None"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.create_subclass_from_migration_hop", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.create_subclass_from_migration_hop", "type": "function", "doc": "<p>Dynamically creates subclass of MigrationImage, then links it to the\nMigrationHop table.</p>\n\n<p>This method should NOT be called directly because it is instead used by\n<code>DiffusionAnalysis.create_subclasses</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>name</code> :\nName of the subclass that is output.</li>\n<li><code>migration_hop</code> :\nMigrationHop table that these images should be associated with.</li>\n<li><code>module</code> :\nname of the module this subclass should be associated with. Typically,\nyou should pass __name__ to this.</li>\n<li><code>**extra_columns</code> :\nAdditional columns to add to the table. The keyword will be the\ncolumn name and the value should match django options\n(e.g. table_column.FloatField())</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>NewClass</code> :\nA subclass of MigrationImage.</li>\n</ul>\n", "signature": "(\n    cls,\n    name: str,\n    migration_hop: simmate.database.base_data_types.nudged_elastic_band.MigrationHop,\n    module: str,\n    **extra_columns\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.structure_string", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.nsites", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.nelements", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.elements", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.chemical_system", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.density", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.density_atomic", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.volume", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.volume_molar", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.formula_full", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.formula_reduced", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.formula_anonymous", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.spacegroup", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.nudged_elastic_band.MigrationImage.spacegroup_id", "modulename": "simmate.database.base_data_types.nudged_elastic_band", "qualname": "MigrationImage.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation", "modulename": "simmate.database.base_data_types.relaxation", "type": "module", "doc": "<p>Structure Relaxations are made up of a series of ionic steps -- where each\nionic step can be thought of as a single energy calculation. This yields\nenergy, forces, and lattice stress for a given structure. In many cases,\nusers won't need all of this data because they're only after the final\nstructure. However, all ionic steps are useful in the case of confirming \nconvergence as well as machine learning applications. We therefore store these\nhere.</p>\n\n<p>This module helps you create tables to results from structure relaxations\n(aka geometry optimizations). This will store all ionic steps and the forces/stress\nassociated with each step.</p>\n\n<p>When creating new tables for Relaxations, you should use the <code>Relaxation.create_subclasses</code> method, which helps remove all the \nboilerplate code needed. For Django users, it may be tricky to understand what's\nhappening behind the scenes, so here's an example:</p>\n\n<p>These two lines...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"n\">Relaxation</span>\n\n<span class=\"n\">ExampleRelaxation</span><span class=\"p\">,</span> <span class=\"n\">ExampleIonicStep</span> <span class=\"o\">=</span> <span class=\"n\">Relaxation</span><span class=\"o\">.</span><span class=\"n\">create_subclasses</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Example&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">module</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n\n<p>... do exactly the same thing as all of these lines...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"n\">table_column</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"n\">IonicStep</span><span class=\"p\">,</span> <span class=\"n\">Relaxation</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleIonicStep</span><span class=\"p\">(</span><span class=\"n\">IonicStep</span><span class=\"p\">):</span>\n    <span class=\"n\">relaxation</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;ExampleRelaxation&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># in quotes becuase this is defined below</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;structures&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleRelaxation</span><span class=\"p\">(</span><span class=\"n\">Relaxation</span><span class=\"p\">):</span>\n    <span class=\"n\">structure_start</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span>\n        <span class=\"n\">ExampleIonicStep</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;relaxations_as_start&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">structure_final</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span>\n        <span class=\"n\">ExampleIonicStep</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;relaxations_as_final&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Note there are two tables involved. One stores all of the ionic steps, and the\nother connects all ionic steps to a specific calculation and result.</p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation", "type": "class", "doc": "<p>This table holds all data from a structure relaxation and also links to\nIonicStep table which holds all of the structure/energy/forces for each\nionic step.</p>\n\n<p>WARNING: The Structure stored in this table here is the source structure!\nIf you want the final structure, be sure to grab it from the\n<code>structure_final</code> attribute (which is the final IonicStep).</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.Meta", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.Meta.__init__", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.Meta.abstract", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.Meta.app_label", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.band_gap", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.is_gap_direct", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.energy_fermi", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.conduction_band_minimum", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.valence_band_maximum", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.volume_change", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.create_subclasses", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.create_subclasses", "type": "function", "doc": "<p>Dynamically creates a subclass of Relaxation as well as a separate IonicStep\ntable for it. These tables are linked together.</p>\n\n<p>Example use:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"n\">Relaxation</span>\n\n<span class=\"n\">ExampleRelaxation</span><span class=\"p\">,</span> <span class=\"n\">ExampleIonicStep</span> <span class=\"o\">=</span> <span class=\"n\">Relaxation</span><span class=\"o\">.</span><span class=\"n\">create_subclasses</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Example&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">module</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>name</code> :\nThe prefix name of the subclasses that are output. \"Relaxation\" and\n\"IonicStep\" will be attached to the end of this prefix.</li>\n<li><code>module</code> :\nname of the module this subclass should be associated with. Typically,\nyou should pass __name__ to this.</li>\n<li><code>**extra_columns</code> :\nAdditional columns to add to the table. The keyword will be the\ncolumn name and the value should match django options\n(e.g. table_column.FloatField())</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>NewRelaxationClass</code> :\nA subclass of Relaxation.</li>\n<li><code>NewIonicStepClass</code>:\nA subclass of IonicStep.</li>\n</ul>\n", "signature": "(cls, name: str, module: str, **extra_columns)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.from_directory", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.from_directory", "type": "function", "doc": "<p></p>\n", "signature": "(cls, directory: str)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.from_vasp_run", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.from_vasp_run", "type": "function", "doc": "<p></p>\n", "signature": "(cls, vasprun: pymatgen.io.vasp.outputs.Vasprun)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.update_from_vasp_run", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.update_from_vasp_run", "type": "function", "doc": "<p>Given a Vasprun object from a finished relaxation, this will update the\nRelaxation table entry and the corresponding IonicStep entries.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>vasprun :\n    The final Vasprun object from the relaxation outputs.\ncorrections :\n    List of errors and corrections applied to during the relaxation.\ndirectory :\n    name of the directory that relaxation was ran in. This is only used\n    to reference the archive file if it's ever needed again.</p>\n", "signature": "(\n    self,\n    vasprun: pymatgen.io.vasp.outputs.Vasprun,\n    corrections: List,\n    directory: str\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_convergence_plot", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_convergence_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.view_convergence_plot", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.view_convergence_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.structure_string", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.nsites", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.nelements", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.elements", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.chemical_system", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.density", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.density_atomic", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.volume", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.volume_molar", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.formula_full", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.formula_reduced", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.formula_anonymous", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.spacegroup", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.directory", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.prefect_flow_run_id", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.created_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.updated_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.corrections", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.source", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.spacegroup_id", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_next_by_created_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.Relaxation.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "Relaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep", "type": "class", "doc": "<p>This database table that holds the data for each ionic step of a relaxation.</p>\n\n<p>An ionic step can be viewed as a static energy calculation, but we keep these\nresults separate because:</p>\n\n<pre><code>1. Pulay stress can make these energies/forces inaccurate\n2. These results each have an associated Relaxation and ionic step number\n</code></pre>\n\n<p>You will likely never access this table directly. Instead, data is better\naccessed through the <code>structures</code> attribute on appropiate Relaxation table.</p>\n\n<p>For example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.database.workflow_results</span> <span class=\"kn\">import</span> <span class=\"n\">MITRelaxation</span>\n\n<span class=\"c1\"># grab your desired relaxation</span>\n<span class=\"n\">relax</span> <span class=\"o\">=</span> <span class=\"n\">MITRelaxation</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># grab the associated ionic steps</span>\n<span class=\"n\">ionic_steps</span> <span class=\"o\">=</span> <span class=\"n\">relax</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</code></pre></div>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics, simmate.database.base_data_types.forces.Forces"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.Meta", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.Meta.__init__", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.Meta.abstract", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.Meta.app_label", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.base_info", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['number', 'structure_string', 'energy', 'site_forces', 'lattice_stress']"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.number", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.create_subclass_from_relaxation", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.create_subclass_from_relaxation", "type": "function", "doc": "<p>Dynamically creates a subclass of IonicStep and links it to the Relaxation\ntable.</p>\n\n<p>This method should NOT be called directly because it is instead used by\n<code>Relaxation.create_subclasses</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>name</code> :\nName of the subclass that is output.</li>\n<li><code>relaxation</code> :\nRelaxation table that these ionic steps should be associated with.</li>\n<li><code>module</code> :\nname of the module this subclass should be associated with. Typically,\nyou should pass __name__ to this.</li>\n<li><code>**extra_columns</code> :\nAdditional columns to add to the table. The keyword will be the\ncolumn name and the value should match django options\n(e.g. table_column.FloatField())</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>NewClass</code> :\nA subclass of IonicStep.</li>\n</ul>\n", "signature": "(\n    cls,\n    name: str,\n    relaxation: simmate.database.base_data_types.relaxation.Relaxation,\n    module: str,\n    **extra_columns\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.structure_string", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.nsites", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.nelements", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.elements", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.chemical_system", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.density", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.density_atomic", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.volume", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.volume_molar", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.formula_full", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.formula_reduced", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.formula_anonymous", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.spacegroup", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.energy", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.energy_per_atom", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.energy_above_hull", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.is_stable", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.decomposes_to", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.formation_energy", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.formation_energy_per_atom", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.site_forces", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.lattice_stress", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.site_force_norm_max", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.site_forces_norm", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.site_forces_norm_per_atom", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.lattice_stress_norm", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.source", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.relaxation.IonicStep.spacegroup_id", "modulename": "simmate.database.base_data_types.relaxation", "qualname": "IonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy", "modulename": "simmate.database.base_data_types.static_energy", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics, simmate.database.base_data_types.forces.Forces, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.Meta", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.Meta.__init__", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.Meta.abstract", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.Meta.app_label", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.Meta.app_label", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'workflows'"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.base_info", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['valence_band_maximum', 'conduction_band_minimum', 'energy_fermi', 'is_gap_direct', 'structure_string', 'energy', 'site_forces', 'lattice_stress', 'directory', 'prefect_flow_run_id', 'created_at', 'updated_at', 'corrections']"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.band_gap", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.is_gap_direct", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.energy_fermi", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.conduction_band_minimum", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.valence_band_maximum", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.from_directory", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.from_directory", "type": "function", "doc": "<p></p>\n", "signature": "(cls, directory: str)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.from_vasp_run", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.from_vasp_run", "type": "function", "doc": "<p></p>\n", "signature": "(cls, vasprun: pymatgen.io.vasp.outputs.Vasprun)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.update_from_vasp_run", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.update_from_vasp_run", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    vasprun: pymatgen.io.vasp.outputs.Vasprun,\n    corrections: list,\n    directory: str\n)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.structure_string", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.nsites", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.nelements", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.elements", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.chemical_system", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.density", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.density_atomic", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.volume", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.volume_molar", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.formula_full", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.formula_reduced", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.formula_anonymous", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.spacegroup", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.energy", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.energy_per_atom", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.energy_above_hull", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.is_stable", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.decomposes_to", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.formation_energy", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.formation_energy_per_atom", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.site_forces", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.lattice_stress", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.site_force_norm_max", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.site_forces_norm", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.site_forces_norm_per_atom", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.lattice_stress_norm", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.lattice_stress_norm_per_atom", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.directory", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.prefect_flow_run_id", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.created_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.updated_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.corrections", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.source", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.spacegroup_id", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.get_next_by_created_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.get_previous_by_created_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.get_next_by_updated_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.static_energy.StaticEnergy.get_previous_by_updated_at", "modulename": "simmate.database.base_data_types.static_energy", "qualname": "StaticEnergy.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure", "modulename": "simmate.database.base_data_types.structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.structure.Structure", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.database.base_data_types.structure.Structure.Meta", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.structure.Structure.Meta.__init__", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.Meta.abstract", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.structure.Structure.base_info", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['structure_string']"}, {"fullname": "simmate.database.base_data_types.structure.Structure.structure_string", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.nsites", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.nelements", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.elements", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.chemical_system", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.density", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.density_atomic", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.volume", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.volume_molar", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.formula_full", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.formula_reduced", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.formula_anonymous", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.spacegroup", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.base_data_types.structure.Structure.to_toolkit", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.to_toolkit", "type": "function", "doc": "<p>Converts the database object to toolkit Structure object.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.source", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.structure.Structure.spacegroup_id", "modulename": "simmate.database.base_data_types.structure", "qualname": "Structure.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry", "modulename": "simmate.database.base_data_types.symmetry", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup", "type": "class", "doc": "<p>Spacegroup(number, symbol, crystal_system, point_group)</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.source", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.source", "type": "variable", "doc": "<p>The source column is disabled for this table because this is common\ninformation.</p>\n", "default_value": " = None"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.number", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.number", "type": "function", "doc": "<p>International space group number</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.symbol", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.symbol", "type": "function", "doc": "<p>Full international symbol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.crystal_system", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.crystal_system", "type": "function", "doc": "<p>The crystal system (don't confused with crystal family or lattice family)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.point_group", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.point_group", "type": "function", "doc": "<p>Point group symbol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.DoesNotExist", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.MultipleObjectsReturned", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.aflowstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.aflowstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.codstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.codstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.jarvisstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.jarvisstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.matprojstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.matprojstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.oqmdstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.oqmdstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitrelaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitrelaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.matprojrelaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.matprojrelaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.matprojionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.matprojionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.nebendpointrelaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.nebendpointrelaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.nebendpointionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.nebendpointionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality00relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality00relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality00ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality00ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality01relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality01relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality01ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality01ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality02relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality02relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality02ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality02ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality03relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality03relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality03ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality03ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality04relaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality04relaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality04ionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality04ionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitstaticenergy_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitstaticenergy_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.matprojstaticenergy_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.matprojstaticenergy_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.nebendpointstaticenergy_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.nebendpointstaticenergy_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.quality04staticenergy_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.quality04staticenergy_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.matprojbandstructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.matprojbandstructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.matprojdensityofstates_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.matprojdensityofstates_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitdiffusionanalysis_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitdiffusionanalysis_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitmigrationimage_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitmigrationimage_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitdynamicsrun_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitdynamicsrun_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.mitdynamicsionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.mitdynamicsionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.aflowprototype_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.aflowprototype_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.teststructure_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.teststructure_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.testforces_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.testforces_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.testthermodynamics_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.testthermodynamics_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.teststaticenergy_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.teststaticenergy_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.testrelaxation_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.testrelaxation_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.testionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.testionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.testdynamicsrun_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.testdynamicsrun_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.symmetry.Spacegroup.testdynamicsionicstep_set", "modulename": "simmate.database.base_data_types.symmetry", "qualname": "Spacegroup.testdynamicsionicstep_set", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.database.base_data_types.thermodynamics", "modulename": "simmate.database.base_data_types.thermodynamics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.Meta", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.Meta.__init__", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.Meta.abstract", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.Meta.abstract", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.base_info", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['energy']"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.energy", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.energy_per_atom", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.energy_above_hull", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.is_stable", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.decomposes_to", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.formation_energy", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.formation_energy_per_atom", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.update_chemical_system_stabilities", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.update_chemical_system_stabilities", "type": "function", "doc": "<p></p>\n", "signature": "(cls, chemical_system)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.update_all_stabilities", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.update_all_stabilities", "type": "function", "doc": "<p></p>\n", "signature": "(cls)", "funcdef": "def"}, {"fullname": "simmate.database.base_data_types.thermodynamics.Thermodynamics.source", "modulename": "simmate.database.base_data_types.thermodynamics", "qualname": "Thermodynamics.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes", "modulename": "simmate.database.prototypes", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.prototypes.aflow", "modulename": "simmate.database.prototypes.aflow", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype", "type": "class", "doc": "<p>Base Info</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.mineral_name", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.mineral_name", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.aflow_id", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.aflow_id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.pearson_symbol", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.pearson_symbol", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.strukturbericht", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.strukturbericht", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.nsites_wyckoff", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.nsites_wyckoff", "type": "function", "doc": "<p>Model Methods</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.name", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.name", "type": "variable", "doc": "<p>This helps piece together the name of the prototype in a user-friendly\nformat. We start by checking if there is a mineral_name to use, and we\nalso use the prototype's composition.</p>\n\n<p>An example of a structure with a mineral name is...\n    Cinnabar (HgS) Structure-type\nAnd an example of a structure without a mineral name is..\n    CaC6 Structure-type</p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.structure_string", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.nsites", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.nelements", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.elements", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.chemical_system", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.density", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.density_atomic", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.volume", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.volume_molar", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.formula_full", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.formula_reduced", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.formula_anonymous", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.spacegroup", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.source", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.DoesNotExist", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.MultipleObjectsReturned", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.spacegroup_id", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.prototypes.aflow.AflowPrototype.id", "modulename": "simmate.database.prototypes.aflow", "qualname": "AflowPrototype.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.prototypes.webscraping", "modulename": "simmate.database.prototypes.webscraping", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.prototypes.webscraping.aflow", "modulename": "simmate.database.prototypes.webscraping.aflow", "type": "module", "doc": "<p>This file is for pulling AFLOW data into the Simmate database. </p>\n\n<p>AFLOW's supported REST API can be accessed via \"AFLUX API\". This is a separate\npython package, which is maintained at https://github.com/rosenbrockc/aflow.\nNote that this not from the official AFLOW team, but it is made such that keywords\nare pulled dynamically from the AFLOW servers -- any updates in AFLOW's API should\nbe properly handled. Also structures are loaded as ASE Atom objects, which we then\nconvert to pymatgen.</p>\n"}, {"fullname": "simmate.database.prototypes.webscraping.aflow.load_all_prototypes", "modulename": "simmate.database.prototypes.webscraping.aflow", "qualname": "load_all_prototypes", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.third_parties", "modulename": "simmate.database.third_parties", "type": "module", "doc": "<h1 id=\"overview\">Overview</h1>\n\n<p>This module downloads data from third-parties and stores it to your local database.</p>\n\n<p>This data is <strong>NOT</strong> from the Simmate team. These providers are independent groups, and you should cite them appropriately. All data from these providers remain under their source's terms and conditions.</p>\n\n<p>Currently, we support the following providers:</p>\n\n<ul>\n<li><a href=\"http://www.crystallography.net/cod/\">COD (Crystallography Open Database)</a></li>\n<li><a href=\"https://jarvis.nist.gov/\">JARVIS (Joint Automated Repository for Various Integrated Simulations)</a></li>\n<li><a href=\"https://materialsproject.org/\">Materials Project</a></li>\n<li><a href=\"http://oqmd.org/\">OQMD (Open Quantum Materials Database)</a></li>\n</ul>\n\n<p>These providers are configured, but our team is waiting for permission to redistribute their data:</p>\n\n<ul>\n<li><a href=\"http://www.aflowlib.org/\">AFLOW (Automatic FLOW for Materials Discovery)</a></li>\n</ul>\n\n<h1 id=\"contributing-your-data\">Contributing your data</h1>\n\n<p>If your team would like to make data available via Simmate, please see the <code>simmate.database.third_parties.for_providers</code> module. Even if its is a single table, don't hesistate to make a contribution! We outline the benefits of contributing and how to package your data within the <code>for_providers</code> module.</p>\n\n<h1 id=\"usage\">Usage</h1>\n\n<p>Make sure you have completed <a href=\"https://github.com/jacksund/simmate/blob/main/tutorials/05_Search_the_database.md\">our introductory tutorial</a> for downloading data from these providers. Below we show example usage with <code>MatProjStructure</code>, but the same process can be done with all other tables in this module. </p>\n\n<p>WARNING: The first time you load archives of data, it can take a long time, so we recommend running some things overnight. Once completed, we also recommend backing up your database (by making a copy of your ~/simmate/my_env-database.sqlite3 file). This ensures you don't have to repeat this long process.</p>\n\n<p>To download all data into your database:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.third_parties</span> <span class=\"kn\">import</span> <span class=\"n\">MatProjStructure</span>\n\n<span class=\"c1\"># This can take &gt;1 hour for some providers. Optionally, you can</span>\n<span class=\"c1\"># add `parallel=True` to speed up this process, but use caution when </span>\n<span class=\"c1\"># parallelizing with SQLite (the default backend). We recommend </span>\n<span class=\"c1\"># avoiding the use of parallel=True, and instead running</span>\n<span class=\"c1\"># this line overnight.</span>\n<span class=\"n\">MatProjStructure</span><span class=\"o\">.</span><span class=\"n\">load_remote_archive</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># If you use this providers data, be sure to cite them!</span>\n<span class=\"n\">MatProjStructure</span><span class=\"o\">.</span><span class=\"n\">source_doi</span>\n</code></pre></div>\n\n<p>Some database providers give a calculated energy, which can be used to populate stability information:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># updates ALL chemical systems.</span>\n<span class=\"c1\"># Note, this can take over an hour for some providers. Try running </span>\n<span class=\"c1\"># this overnight along with your call to load_remote_archive.</span>\n<span class=\"n\">MatProjStructure</span><span class=\"o\">.</span><span class=\"n\">update_all_stabilities</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># updates ONE chemical system</span>\n<span class=\"c1\"># This can be used if you quickly want to update a specific system</span>\n<span class=\"n\">MatProjStructure</span><span class=\"o\">.</span><span class=\"n\">update_chemical_system_stabilities</span><span class=\"p\">(</span><span class=\"s2\">&quot;Y-C-F&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>See <code>simmate.database</code> docs for a guide on filtering results and converting to toolkit/dataframes.</p>\n\n<h1 id=\"alternatives\">Alternatives</h1>\n\n<p>This module can be viewed as an alternative to and/or an extension of the following codes:</p>\n\n<ul>\n<li><a href=\"https://matminer.readthedocs.io/en/latest/matminer.data_retrieval.html\">matminer.data_retrieval</a></li>\n<li><a href=\"https://pymatgen.org/pymatgen.ext.html\">pymatgen.ext</a></li>\n<li><a href=\"http://www.optimade.org/\">OPTIMADE APIs</a></li>\n</ul>\n\n<p>This module stores data locally and then allows rapidly loading data to memory, whereas alternatives involve querying external APIs and loading data into memory. We choose to store data locally because it allows stability (i.e. no breaking changes in your source data) and fast loading accross python sessions. This is particullary useful for high-throughput studies.</p>\n"}, {"fullname": "simmate.database.third_parties.aflow", "modulename": "simmate.database.third_parties.aflow", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure", "type": "class", "doc": "<p>Crystal structures from the <a href=\"http://aflowlib.org/\">AFLOW</a> database.</p>\n\n<p>Currently, this table only stores strucure and thermodynamic information,\nbut the AFLOW has much more data available via their\n<a href=\"http://aflowlib.duke.edu/aflowwiki/doku.php?id=documentation:start\">REST API</a>\nand website.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.base_info", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['id', 'structure_string', 'energy']"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.source", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.source", "type": "variable", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "default_value": " = 'AFLOW'"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.source_doi", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.source_doi", "type": "variable", "doc": "<p>Source paper that must be referenced if this data is used. If this is None,\nplease refer to the <code>source</code> attribute for further details on what to \nreference.</p>\n", "annotation": ": str", "default_value": " = 'https://doi.org/10.1016/j.commatsci.2012.02.005'"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.id", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.id", "type": "function", "doc": "<p>The id used to represent the structure (ex: \"aflow-12345\")</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.external_link", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.external_link", "type": "variable", "doc": "<p>URL to this structure in the AFLOW website.</p>\n", "annotation": ": str"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.structure_string", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.nsites", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.nelements", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.elements", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.chemical_system", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.density", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.density_atomic", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.volume", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.volume_molar", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.formula_full", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.formula_reduced", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.formula_anonymous", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.spacegroup", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.energy", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.energy_per_atom", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.energy_above_hull", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.is_stable", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.decomposes_to", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.formation_energy", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.formation_energy_per_atom", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.DoesNotExist", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.database.third_parties.aflow.AflowStructure.spacegroup_id", "modulename": "simmate.database.third_parties.aflow", "qualname": "AflowStructure.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.cod", "modulename": "simmate.database.third_parties.cod", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.cod.CodStructure", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure", "type": "class", "doc": "<p>Crystal structures from the <a href=\"http://www.crystallography.net/cod/\">COD</a> database.</p>\n\n<p>Currently, this table only stores the strucure, plus comments on whether the\nsturcture is ordered or has implicit hydrogens.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.base_info", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['id', 'structure_string', 'is_ordered', 'has_implicit_hydrogens']"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.source", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.source", "type": "variable", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "default_value": " = 'The Crystallography Open Database'"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.source_doi", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.source_doi", "type": "variable", "doc": "<p>Source paper that must be referenced if this data is used. If this is None,\nplease refer to the <code>source</code> attribute for further details on what to \nreference.</p>\n", "annotation": ": str", "default_value": " = 'https://doi.org/10.1107/S0021889809016690'"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.remote_archive_link", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.remote_archive_link", "type": "variable", "doc": "<p>The URL that is used to download the archive and then populate this table.\nMany tables, such as those in <code>simmate.database.third_parties</code>, have\npre-existing data that you can download and load into your local database,\nso if this attribute is set, you can use the <code>load_remote_archive</code> method.</p>\n", "annotation": ": str", "default_value": " = 'https://archives.simmate.org/CodStructure-2022-02-20.zip'"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.chemical_system", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.formula_full", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.formula_reduced", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.formula_anonymous", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.id", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.id", "type": "function", "doc": "<p>The id used to represent the structure (ex: \"cod-12345\")</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.is_ordered", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.is_ordered", "type": "function", "doc": "<p>whether the structure contains disordered sites (i.e. mixed occupancies)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.has_implicit_hydrogens", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.has_implicit_hydrogens", "type": "function", "doc": "<p>whether the structure has implicit Hydrogens. This means there should be\nHydrogens in the structure, but they weren't explicitly drawn. Note,\nimplicit hydrogens will make the chemical system and formula misleading \nbecause of the absence of hydrogens.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.external_link", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.external_link", "type": "variable", "doc": "<p>URL to this structure in the COD website.</p>\n", "annotation": ": str"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.structure_string", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.nsites", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.nelements", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.elements", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.density", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.density_atomic", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.volume", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.volume_molar", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.spacegroup", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.DoesNotExist", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.database.third_parties.cod.CodStructure.spacegroup_id", "modulename": "simmate.database.third_parties.cod", "qualname": "CodStructure.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.for_providers", "modulename": "simmate.database.third_parties.for_providers", "type": "module", "doc": "<h1 id=\"overview\">Overview</h1>\n\n<p>_<strong>WARNING:</strong>_ This module is only for the Simmate dev team or third-party contributors that want to add their own data! Users should instead use the <code>load_remote_archive</code> method to access data. See the <a href=\"https://github.com/jacksund/simmate/blob/main/tutorials/05_Search_the_database.md\">tutorial on accessing the database</a>.</p>\n\n<p>This module is for pulling data from various databases into Simmate using third-party codes. This can then be used to build archives that users may access.</p>\n\n<h1 id=\"benefits-of-adding-your-data-to-simmate\">Benefits of adding your data to Simmate</h1>\n\n<p>When deciding whether your team should use Simmate, we can break down discussion to two key questions:</p>\n\n<ol>\n<li>Can you benefit from converting data into a Simmate format?</li>\n<li>Can you benefit from distributing an archive? (private or public)</li>\n</ol>\n\n<p>We will answer these questions in the next two sections.</p>\n\n<h2 id=\"converting-data-into-a-simmate-format\">Converting data into a Simmate format</h2>\n\n<p>Whether your data is open-source or proprietary, the answer to question 1 will be the same: Providers can benefit from using Simmate's <code>database</code> module because it...</p>\n\n<ul>\n<li>automatically builds an API and ORM for your data</li>\n<li>greatly reduces the file size of your archives</li>\n</ul>\n\n<p>By providing raw data (like a structure or energy), Simmate will automatically expand your data into the most useful columns, and you can then use our ORM to query data rapidly. For example, Simmate can use an <code>energy</code> column/field to create columns for <code>energy_above_hull</code>, <code>formation_energy</code>, <code>decomposes_to</code>, and more -- then you can filter through your data using these new columns. See the \"Querying Data\" section in the <code>simmate.database</code> module for examples of this query language.</p>\n\n<p>Using the concepts of \"raw data\" vs \"secondary columns\" (columns that can be rapidly remade/calculated using the raw data), Simmate can efficiently compress your data to a small format. To see just how small, check out the file sizes for archives of current providers:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Provider</th>\n  <th>Number of Structures</th>\n  <th>Av. Sites per Structure</th>\n  <th>Archive Size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>JARVIS</td>\n  <td>55,712</td>\n  <td>~10</td>\n  <td>8.0 MB</td>\n</tr>\n<tr>\n  <td>Materials Project</td>\n  <td>137,885</td>\n  <td>~30</td>\n  <td>45.2 MB</td>\n</tr>\n<tr>\n  <td>COD</td>\n  <td>471,664</td>\n  <td>~248</td>\n  <td>1.16 GB</td>\n</tr>\n<tr>\n  <td>OQMD</td>\n  <td>1,013,521</td>\n  <td>~7</td>\n  <td>79.2 MB</td>\n</tr>\n<tr>\n  <td>AFLOW</td>\n  <td>n/a</td>\n  <td>n/a</td>\n  <td>n/a</td>\n</tr>\n</tbody>\n</table>\n\n<p>(Note, COD experiences poor compression because Simmate has not yet optimized storage for disordered structures.)</p>\n\n<p>These small file sizes will make it much easier for downloading and sharing your data. This can have major savings on your database server as well.</p>\n\n<h2 id=\"hosting-distributing-the-archive\">Hosting &amp; distributing the archive</h2>\n\n<p>Here is where being a private vs. open-source provider becomes important. Simmate lets you to decide how others access your data. </p>\n\n<p>If your data can only be accessible to among your own team members or subscribers, then you can be in charge of distruting the data (via a CDN, dropbox, etc.). Simmate does not require that you distribute your data freely -- though we do encourage open-source data. Either way, you can benefit from...</p>\n\n<ul>\n<li>lessening the load on your own web APIs</li>\n</ul>\n\n<p>Server load can be reduced because, in Simmate, users download your archive once and then have the data stored locally for as long as they'd like. New users often want to download a massive portion a database (or all of it) -- and also do so repeatedly as they learn about APIs, so using Simmate archives upfront can save your team from these large and often-repeated queries.</p>\n\n<p>If you are fine with making your data freely available, you can further benefit by...</p>\n\n<ul>\n<li>skipping the setup of up your own server and instead use Simmate's for free</li>\n<li>exposing your data to the Simmate user base</li>\n</ul>\n\n<p>Providers that permit redistribution are welcome to use our CDN for their archives. This only requires contacting our team and making this request. Further, once your archive is configured, all Simmate users will be able to easily access your data.</p>\n\n<h1 id=\"how-to-add-your-data-or-a-new-provider\">How to add your data or a new provider</h1>\n\n<p><strong>Note, if you want to avoid this guide, you can just contact our team! <a href=\"https://github.com/jacksund/simmate/issues\">Open a github issue</a> to get our attention. In most cases, we only need a CSV or JSON file of your data (in any data format you'd like), and we can handle the rest for you. If you'd like to contribute the data on your own, keep reading!</strong></p>\n\n<p>The end goal for each provider is to allow a user do the following:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>  <span class=\"c1\"># connects to database</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.third_parties</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleProviderData</span>\n\n<span class=\"n\">ExampleProviderData</span><span class=\"o\">.</span><span class=\"n\">load_remote_archive</span><span class=\"p\">()</span>\n\n<span class=\"n\">search_results</span> <span class=\"o\">=</span> <span class=\"n\">ExampleProviderData</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"c1\"># plus all to_dataframe / to_toolkit features discussed elsewhere</span>\n</code></pre></div>\n\n<p>The key part that providers must understand is the <code>load_remote_archive</code> method. This method...</p>\n\n<ol>\n<li>loads an archive of available data (as a <code>zip</code> file from some CDN)</li>\n<li>unpacks the data into the Simmate format</li>\n<li>saves everything to the user's database (by defualt this is <code>~/simmate/database.sqlite3</code>).</li>\n</ol>\n\n<p><strong>This guide serves to make the first step work!</strong> Specifically, providers must make the archive that <code>load_remote_archive</code> will load in step 1 and make it downloadable by a CDN or API endpoint. It is up to the provider whether they personally distribute the archive or allow Simmate to distribute it for them.</p>\n\n<p>To illustrate how this is done, we will walk through the required steps:</p>\n\n<ol>\n<li>Define a Simmate table</li>\n<li>Download data into the Simmate format (i.e. populate the Simmate table)</li>\n<li>Compress the data to archive file</li>\n<li>Make the archive available via a CDN</li>\n<li>Link the CDN to the Simmate table</li>\n</ol>\n\n<p>Note, these steps involve contributing changes to Simmate's code, so we recommend <a href=\"https://github.com/jacksund/simmate/issues\">opening a github issue</a> before starting too. That way, our team can help you through this process. If you are new to Github and contributing, be sure to read our <a href=\"https://github.com/jacksund/simmate/tree/main/tutorials/Guides_for_contributors\">tutorial for contributors</a> too.</p>\n\n<h2 id=\"step-1-define-a-simmate-table\">Step 1: Define a Simmate table</h2>\n\n<p>To host data, Simmate must first know what kind of data you are going to host. We do this by adding a new file to the <code>simmate.database.third_party</code> module. You can view this folder on github <a href=\"https://github.com/jacksund/simmate/tree/main/src/simmate/database/third_parties\">here</a>.</p>\n\n<p>Start by defining a <code>DatabaseTable</code> with any custom columns / database mix-ins. You can scroll through the other providers to see how tables are made. Good examples to view are for <a href=\"https://github.com/jacksund/simmate/blob/main/src/simmate/database/third_parties/jarvis.py\">JARVIS</a> and <a href=\"https://github.com/jacksund/simmate/blob/main/src/simmate/database/third_parties/materials_project.py\">Materials Project</a>.</p>\n\n<p>Here is a template with useful comments to get you started:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Start by deciding which base data types you can include. Here, we include a</span>\n<span class=\"c1\"># crystal structure and an energy, so we use the Structure and Thermodynamics</span>\n<span class=\"c1\"># mix-ins.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">table_column</span><span class=\"p\">,</span> \n    <span class=\"n\">Structure</span><span class=\"p\">,</span> \n    <span class=\"n\">Thermodynamics</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleProviderData</span><span class=\"p\">(</span><span class=\"n\">Structure</span><span class=\"p\">,</span> <span class=\"n\">Thermodynamics</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># This Meta class tells Simmate where to store the table within our database.</span>\n    <span class=\"c1\"># All providers with have the exact same thing here. </span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;third_parties&quot;</span>\n\n    <span class=\"c1\"># This attribute tells Simmate what the &quot;raw data&quot; is. All table columns</span>\n    <span class=\"c1\"># can be recreated using the data here.</span>\n    <span class=\"n\">base_info</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">,</span> <span class=\"c1\"># required</span>\n        <span class=\"s2\">&quot;structure_string&quot;</span><span class=\"p\">,</span> <span class=\"c1\"># required for Structure mix-in</span>\n        <span class=\"s2\">&quot;energy&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># required for Thermodynamics mix-in</span>\n        <span class=\"s2\">&quot;custom_column_01&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;custom_column_02&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># By default, the ID column is an IntegerField, but if your data uses a string</span>\n    <span class=\"c1\"># like &quot;mp-1234&quot; to denote structures, you can update this column to</span>\n    <span class=\"c1\"># accept a string instead.</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Write the name of your team here!</span>\n    <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;The Example Provider Project&quot;</span>\n\n    <span class=\"c1\"># We have many alerts to let users know they should cite you. Add the DOI</span>\n    <span class=\"c1\"># that you&#39;d like them to cite here.</span>\n    <span class=\"n\">source_doi</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://doi.org/...&quot;</span>\n\n    <span class=\"c1\"># If you have any custom fields that you&#39;d like to add, list them off here.</span>\n    <span class=\"c1\"># All data types supported by Django are also supported by Simmate. You can</span>\n    <span class=\"c1\"># view those options here:</span>\n    <span class=\"c1\">#   https://docs.djangoproject.com/en/4.0/ref/models/fields/</span>\n    <span class=\"n\">custom_column_01</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">custom_column_02</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Leave this as None for now. We will update this attribute in a later step.</span>\n    <span class=\"n\">remote_archive_link</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># (OPTIONAL) if you host your data on a separate website, you can specify </span>\n    <span class=\"c1\"># how to access that structure here. This is important if you want users</span>\n    <span class=\"c1\"># to switch to your site for aquiring additional data. </span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">external_link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;https://www.exampleprovider.com/structure/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n</code></pre></div>\n\n<p>Before moving on, make sure your table was configured properly by doing the following:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># in the command line</span>\nsimmate database reset\n</code></pre></div>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># in python</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>  <span class=\"c1\"># connects to database</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.third_parties</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleProviderData</span>\n\n<span class=\"c1\"># This will show you all the columns for your table</span>\n<span class=\"n\">ExampleProviderData</span><span class=\"o\">.</span><span class=\"n\">show_columns</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># this will show you exactly what the table looks like</span>\n<span class=\"n\">my_table</span> <span class=\"o\">=</span> <span class=\"n\">ExampleProviderData</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<h2 id=\"step-2-download-data-into-the-simmate-format\">Step 2: Download data into the Simmate format</h2>\n\n<p>Now that Simmate knows what to expect, we can load your data into the database. This can be done in serveral ways. It is entirely up to you which method to use, but here are our recommended options:</p>\n\n<ol>\n<li><p><strong>JSON or CSV file.</strong> If all of your data can be provide via a dump file, then we can use that! This is typically the easiest for a provider's server. For an example of this, see the COD implementation, which uses a download of CIF files.</p></li>\n<li><p><strong>A custom python package.</strong> Feel free to add an optional dependency if your team has already put a lot of work into loading data using a python package. A great example of this is the MPRester class in pymatgen, which we use to pull Material Project data. (JARVIS, AFLOW, OQMD currently use this option too).</p></li>\n<li><p><strong>REST API or GraphQL.</strong> If you have a web API, we can easily pull data using the python <code>requests</code> package. Note, in many cases, a REST API is an inefficient way to pull data - as it involves querying a database thousands of times (once for each page of structures) -- potentially crashing the server. In cases like that, we actually prefer a download file (option 1, shown above).</p></li>\n<li><p><strong>OPTIMADE endpoint.</strong> This is a standardized REST API endpoint that many databases are using now. The huge upside here is that each database will have a matching API -- so once your team has an OPTIMADE endpoint, we can pull data into Simmate with ease. There's no need to build a 2nd implementation. The downside is the same as option 3: OPTIMADE doesn't have a good way to pull data in bulk. Their team is <a href=\"https://github.com/Materials-Consortia/OPTIMADE/issues/364\">currently working on this though</a>.</p></li>\n<li><p><strong>Web scraping.</strong> As an absolute last resort, we can use <code>requests</code> to scrape webpages for data (or <code>selenium</code> in even more extreme cases.). This requires the most work from our team and is also the least efficient way to grab data. Therefore, scraping should always be avoided if possible.</p></li>\n</ol>\n\n<p>With your data in hand, you will now add a file that saves data to the local simmate database on your computer. This file can be added to the <code>for_providers</code> module (<a href=\"https://github.com/jacksund/simmate/tree/main/src/simmate/database/third_parties/for_providers\">here</a>). However, if you want your data and it's access to remain private, you can also keep this file out of Simmate's source-code. It's up to you, but we encourage providers to host their file in the Simmate repo -- so we can give feedback and so future providers can use it as an example/guide. </p>\n\n<p>Either way, here is a template of how that file will look like:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">tqdm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.toolkit</span> <span class=\"kn\">import</span> <span class=\"n\">Structure</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.database.third_parties</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleProviderData</span>\n\n<span class=\"c1\"># If you want to use a custom package to load your data, be sure to let our team</span>\n<span class=\"c1\"># know how to install it.</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">my_package.db</span> <span class=\"kn\">import</span> <span class=\"n\">get_my_data</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;You must install my_package with `conda install -c conda-forge my_package`&quot;</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"c1\"># We make this an &quot;atomic transaction&quot;, which means if any error is encountered</span>\n<span class=\"c1\"># while saving results to the database, then the database will be reset to it&#39;s</span>\n<span class=\"c1\"># original state. Adding this decorator is optional</span>\n<span class=\"nd\">@transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_all_structures</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># Use whichever method you chose above to load all of your data!</span>\n    <span class=\"c1\"># Here&#39; we are pretending to use a function that loads all data into a </span>\n    <span class=\"c1\"># python dictionary, but this can vary.</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">get_my_data</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Now iterate through all the data -- which is a list of dictionaries.</span>\n    <span class=\"c1\"># We use tqdm() to monitor progress.</span>\n    <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># The structure is in the atoms field as a dictionary. We pull this data</span>\n        <span class=\"c1\"># out and convert it to a toolkit Structure object. Note, this class</span>\n        <span class=\"c1\"># is currently a subclass of pymatgen.Structure, so it supports reading</span>\n        <span class=\"c1\"># from different file formats (like CIF or POSCAR) as well.</span>\n        <span class=\"n\">structure</span> <span class=\"o\">=</span> <span class=\"n\">Structure</span><span class=\"p\">(</span>\n            <span class=\"n\">lattice</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s2\">&quot;atoms&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;lattice_mat&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s2\">&quot;atoms&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;elements&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">coords</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s2\">&quot;atoms&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;coords&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">coords_are_cartesian</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s2\">&quot;atoms&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;cartesian&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Now that we have a structure object, we can feed that and all</span>\n        <span class=\"c1\"># other data to the from_toolkit() method. This will create a database</span>\n        <span class=\"c1\"># object in the Simmate format. Note the data we pass here is based on</span>\n        <span class=\"c1\"># the ExampleProviderData we defined in the other file.</span>\n        <span class=\"n\">structure_db</span> <span class=\"o\">=</span> <span class=\"n\">ExampleProviderData</span><span class=\"o\">.</span><span class=\"n\">from_toolkit</span><span class=\"p\">(</span>\n            <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s2\">&quot;my_id&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">structure</span><span class=\"p\">,</span>  <span class=\"c1\"># required by Structure mix-in</span>\n            <span class=\"n\">energy</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s2\">&quot;my_final_energy&quot;</span><span class=\"p\">],</span>  <span class=\"c1\"># required by Thermodynamics mix-in</span>\n            <span class=\"n\">custom_column_01</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s2\">&quot;my_custom_column_01&quot;</span><span class=\"p\">],</span>\n            <span class=\"c1\"># The get method is useful if not all entries have a given field.</span>\n            <span class=\"n\">custom_column_02</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_custom_column_02&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># and save it to our database!</span>\n        <span class=\"n\">structure_db</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Try running this on your dataset (or a subset of data if you want to quickly test things). When it finishes, you can ensure data was loaded properly by running:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># in python</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>  <span class=\"c1\"># connects to database</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.third_parties</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleProviderData</span>\n\n<span class=\"c1\"># Check that the number of rows matches your source data.</span>\n<span class=\"n\">total_entries</span> <span class=\"o\">=</span> <span class=\"n\">ExampleProviderData</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># View the data!</span>\n<span class=\"c1\"># The [:100] limits this to your first 100 results</span>\n<span class=\"n\">my_table</span> <span class=\"o\">=</span> <span class=\"n\">ExampleProviderData</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()[:</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>And that's it for writing new code! All that's left is making your data available for others.</p>\n\n<h2 id=\"step-3-compress-the-data-to-archive-file\">Step 3: Compress the data to archive file</h2>\n\n<p>This will be the easiest step yet. We need to make a <code>zip</code> file for users to download, which can be done in one line:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">ExampleProviderData</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">to_archive</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>You'll find a file named <code>ExampleProviderData-2022-01-25.zip</code> (but with the current date) in your working directory. The date is for timestamp and versioning your archives. Because archives are a snapshot of databases that may be dynamically changing/going, this timestamp helps users know which version they are on. You can practice reloading this data into your database too:</p>\n\n<ol>\n<li>Make a copy of your database file in <code>~/simmate/</code> so you don't lose your work</li>\n<li>In the terminal, reset your database with <code>simmate database reset</code></li>\n<li>In python, try reloading your data with <code>ExampleProviderData.load_archive()</code></li>\n<li>Try viewing your data again with <code>ExampleProviderData.objects.to_dataframe()</code></li>\n</ol>\n\n<h2 id=\"step-4-make-the-archive-available-via-a-cdn\">Step 4: Make the archive available via a CDN</h2>\n\n<p>Users with now need the archive file you made to access your data. So you must decide: how should this <code>zip</code> file be downloaded by users? </p>\n\n<p>If you give Simmate approval, we can host your archive file on our own servers. Otherwise you must host your own. The only requirement for your host server is that the <code>zip</code> file can be downloaded from a URL.</p>\n\n<p>While we encourage open-source databases, if you consider your dataset private or commercial, Simmate does not require any payment or involvement for how this CDN is hosted and maintained. Thus, you can manage access to this URL via a subscription or any other method. However, Simmate's CDNs are reserved for archives that are freely distributed.</p>\n\n<p>Note: when uploading new versions of your archive, you should keep the outdated archive either available via its previous URL or, at a minimum, available upon request from users.</p>\n\n<h2 id=\"step-5-link-the-cdn-to-the-simmate-table\">Step 5: Link the CDN to the Simmate table</h2>\n\n<p>In Step 1, we left one attribute as None in our code: <code>remote_archive_link</code>. As a final step, you need to take the URL that you're host your <code>zip</code> file at and paste it here. For example, that line will become:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">remote_archive_link</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://archives.simmate.org/ExampleProviderData-2022-01-25.zip&quot;</span>\n</code></pre></div>\n\n<p>That's it! Let's test out everything again. Note, we are now using <code>load_remote_archive</code> in this process -- which will load your <code>zip</code> file from the URL.</p>\n\n<ol>\n<li>Make a copy of your database file in <code>~/simmate/</code> so you don't lose your work</li>\n<li>In the terminal, reset your database with <code>simmate database reset</code></li>\n<li>In python, try reloading your data with <code>ExampleProviderData.load_remote_archive()</code></li>\n<li>Try viewing your data again with <code>ExampleProviderData.objects.to_dataframe()</code></li>\n</ol>\n\n<p>If you've made it this far, thank you for contributing!!! Your data is now easily accessible to all Simmate users, which we hope facilitates its use and even lessen the load on your own servers. Congrats!</p>\n"}, {"fullname": "simmate.database.third_parties.for_providers.aflow", "modulename": "simmate.database.third_parties.for_providers.aflow", "type": "module", "doc": "<blockquote>\n  <p>:warning: This file is only for use by the Simmate team. Users should instead\n  access data via the load_remote_archive method.</p>\n</blockquote>\n\n<p>This file is for pulling AFLOW data into the Simmate database. </p>\n\n<p>AFLOW's supported REST API can be accessed via \"AFLUX API\". This is a separate\npython package, which is maintained at https://github.com/rosenbrockc/aflow.\nNote that this not from the official AFLOW team, but it is made such that keywords\nare pulled dynamically from the AFLOW servers -- any updates in AFLOW's API should\nbe properly handled. Also structures are loaded as ASE Atom objects, which we then\nconvert to pymatgen.</p>\n"}, {"fullname": "simmate.database.third_parties.for_providers.aflow.load_all_structures", "modulename": "simmate.database.third_parties.for_providers.aflow", "qualname": "load_all_structures", "type": "function", "doc": "<p>Only use this function if you are part of the Simmate dev team!</p>\n\n<p>Loads all structures directly for the AFLOW database into the local\nSimmate database.</p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.for_providers.cod", "modulename": "simmate.database.third_parties.for_providers.cod", "type": "module", "doc": "<blockquote>\n  <p>:warning: This file is only for use by the Simmate team. Users should instead\n  access data via the load_remote_archive method.</p>\n</blockquote>\n\n<p>This file is for pulling COD data into the Simmate database. </p>\n\n<p>The COD let's you download all of their data as a zip file \n<a href=\"http://www.crystallography.net/archives/\">here</a>. While they do have a\nREST API, it looks like they prefer you to use the zip file if you want all structures\nand metadata. This is a big download even when compressed (18GB), so it's a slow\nprocess -- but more importantly a stable one. For future reference though, the REST\nAPI is outlined <a href=\"https://wiki.crystallography.net/RESTful_API/\">here</a>.</p>\n\n<p>Once downloaded, all of the cif files are organized into folders based on their first\nfew numbers -- for example, the cif 1234567 would be in folder /cif/1/23/45/1234567.cif\nIt's an odd way of storing the files, but we just need to script open all of the folders.\nNote that some folders also don't have any cifs in them! There is also extra data\nin each cif file -- such as the doi of the paper it came from.</p>\n\n<p>There looks to be a lot of problematic cif files in the COD, but it's not worth parsing\nthrough all of these. Instead, I simply try to load the cif file into a pymatgen\nStructure object, and if it fails, I just move on. I'm slowly adding functionality\nto account for these problematic cif files though.</p>\n"}, {"fullname": "simmate.database.third_parties.for_providers.cod.load_all_structures", "modulename": "simmate.database.third_parties.for_providers.cod", "qualname": "load_all_structures", "type": "function", "doc": "<p>Only use this function if you are part of the Simmate dev team!</p>\n\n<p>Loads all structures directly for the COD database into the local\nSimmate database. There are 480,160 structures as of 2022-02-18.\nBecause of problematic cifs, only 471,664 (98.2%) are imported into\nthe Simmate database successfully.</p>\n\n<p>Make sure you have downloaded the\n<a href=\"[here](http://www.crystallography.net/archives/)\">COD archive</a>\nand have it upacked to match your base_directory input.</p>\n", "signature": "(\n    base_directory: str = 'cod/cif/',\n    only_add_new_cifs: bool = True,\n    batch_size: int = 15000,\n    batch_timeout: float = 1800\n)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.for_providers.cod.load_single_cif", "modulename": "simmate.database.third_parties.for_providers.cod", "qualname": "load_single_cif", "type": "function", "doc": "<p>Loads a single COD cif into the Simmate database.</p>\n\n<p>You typically shouldn't call this function directly. We make this a\nseparate function to allow parallelization in <code>load_all_structures</code>.</p>\n", "signature": "(cif_filepath: str)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.for_providers.jarvis", "modulename": "simmate.database.third_parties.for_providers.jarvis", "type": "module", "doc": "<blockquote>\n  <p>:warning: This file is only for use by the Simmate team. Users should instead\n  access data via the load_remote_archive method.</p>\n</blockquote>\n\n<p>This file is for pulling JARVIS data into the Simmate database. </p>\n\n<p>JARVIS has a python package \"jarvis-tools\" that let's us pull some of their\ndatabase dumps. For instructions on how to do this, they provided \n<a href=\"https://colab.research.google.com/github/knc6/jarvis-tools-notebooks/blob/master/jarvis-tools-notebooks/Get_JARVIS_DFT_final_structures_in_ASE_or_Pymatgen_format.ipynb\">this link</a></p>\n\n<p>Alternatively, we could manually download \n<a href=\"https://jarvis-materials-design.github.io/dbdocs/thedownloads/\">their database json files</a>. We specifically look at the \"3D-materials curated data\".</p>\n"}, {"fullname": "simmate.database.third_parties.for_providers.jarvis.load_all_structures", "modulename": "simmate.database.third_parties.for_providers.jarvis", "qualname": "load_all_structures", "type": "function", "doc": "<p>Only use this function if you are part of the Simmate dev team!</p>\n\n<p>Loads all structures directly for the JARVIS database into the local\nSimmate database.</p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.for_providers.materials_project", "modulename": "simmate.database.third_parties.for_providers.materials_project", "type": "module", "doc": "<blockquote>\n  <p>:warning: This file is only for use by the Simmate team. Users should instead\n  access data via the load_remote_archive method.</p>\n</blockquote>\n\n<p>This file is for pulling Materials Project data into the Simmate database. \nPyMatGen offers an easy way to do this in python -- the MPRester class. All you\nneed is <a href=\"https://materialsproject.org/open\">an API key from their site</a> and pymatgen\ninstalled. For now, we only pull the mp-id, structure, and final energy.</p>\n"}, {"fullname": "simmate.database.third_parties.for_providers.materials_project.load_all_structures", "modulename": "simmate.database.third_parties.for_providers.materials_project", "qualname": "load_all_structures", "type": "function", "doc": "<p>Only use this function if you are part of the Simmate dev team!</p>\n\n<p>Loads all structures directly for the Material Project database into the\nlocal Simmate database.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>api_key</code>:\nYour Materials Project API key.</li>\n<li><code>criteria</code>:\nFiltering criteria for which structures to load. The default is all\nexisting structures (137,885 as of 2022-01-16), which will take rouhghly\n15 min to complete (not including stabilities).</li>\n<li><code>update_stabilities</code>:\nWhether to run update_all_stabilities on the database table. Note this\nwill add over an hour to this process. Default is True.</li>\n</ul>\n", "signature": "(\n    api_key: str,\n    criteria: dict = {'task_id': {'$exists': True}},\n    update_stabilities: bool = False\n)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.for_providers.oqmd", "modulename": "simmate.database.third_parties.for_providers.oqmd", "type": "module", "doc": "<blockquote>\n  <p>:warning: This file is only for use by the Simmate team. Users should instead\n  access data via the load_remote_archive method.</p>\n</blockquote>\n\n<p>This file is for pulling OQMD data into the Simmate database. </p>\n\n<p>There are many ways to pull from this database, but it looks like the easiest\nis the qmpy_rester python package. This officially supported and maintained\nat https://github.com/mohanliu/qmpy_rester. For now the package is only available\nvia a pip install.</p>\n\n<p>For other options such as the REST API, check out http://oqmd.org/static/docs/restful.html</p>\n"}, {"fullname": "simmate.database.third_parties.for_providers.oqmd.load_all_structures_from_api", "modulename": "simmate.database.third_parties.for_providers.oqmd", "qualname": "load_all_structures_from_api", "type": "function", "doc": "<p>Only use this function if you are part of the Simmate dev team!</p>\n\n<p>Loads all structures directly for the OQMD database into the local\nSimmate database.</p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.for_providers.oqmd.load_all_structures_from_files", "modulename": "simmate.database.third_parties.for_providers.oqmd", "qualname": "load_all_structures_from_files", "type": "function", "doc": "<p>Jiahong Shen was kind enough to provide all the crystal structures from\nthe OQMD as POSCAR files. This makes loading the structures into the\nSimmate database much faster as we are no longer bottlenecked by the REST\nAPI and internet connections.</p>\n\n<p>All POSCARs are in the same folder, where the name of each is the\n<id>-<composition> (ex: 12345-NaCl). There are also csv's that contain\nadditional data such as the energy:</p>\n\n<pre><code>- all_oqmd_entry.csv\n- all_public_entries.csv\n- all_public_fes.csv\n- get_all_entry_id_public.py\n- get_all_entry_poscar.py\n</code></pre>\n\n<p>There are currently 1,013,654 structures and this function takes roughly\n3hrs to run.</p>\n", "signature": "(base_directory: str = 'oqmd', only_add_new_cifs: bool = True)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis", "modulename": "simmate.database.third_parties.jarvis", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure", "type": "class", "doc": "<p>Crystal structures from the <a href=\"https://jarvis.nist.gov/\">JARVIS</a> database.</p>\n\n<p>Currently, this table only stores strucure and reported energy above hull.\nThe calculated energy is not reported, so the Thermodynamics mixin is not used.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.base_info", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['id', 'structure_string', 'energy_above_hull']"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.source", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.source", "type": "variable", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "default_value": " = 'JARVIS'"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.source_doi", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.source_doi", "type": "variable", "doc": "<p>Source paper that must be referenced if this data is used. If this is None,\nplease refer to the <code>source</code> attribute for further details on what to \nreference.</p>\n", "annotation": ": str", "default_value": " = 'https://doi.org/10.1038/s41524-020-00440-1'"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.remote_archive_link", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.remote_archive_link", "type": "variable", "doc": "<p>The URL that is used to download the archive and then populate this table.\nMany tables, such as those in <code>simmate.database.third_parties</code>, have\npre-existing data that you can download and load into your local database,\nso if this attribute is set, you can use the <code>load_remote_archive</code> method.</p>\n", "annotation": ": str", "default_value": " = 'https://archives.simmate.org/JarvisStructure-2022-01-26.zip'"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.id", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.id", "type": "function", "doc": "<p>The id used to represent the structure (ex: \"jvasp-12345\")</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.energy_above_hull", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.energy_above_hull", "type": "function", "doc": "<p>The energy above hull, as reported by the JARVIS database (no units given)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.external_link", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.external_link", "type": "variable", "doc": "<p>URL to this structure in the JARVIS website.</p>\n", "annotation": ": str"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.structure_string", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.nsites", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.nelements", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.elements", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.chemical_system", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.density", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.density_atomic", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.volume", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.volume_molar", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.formula_full", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.formula_reduced", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.formula_anonymous", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.spacegroup", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.DoesNotExist", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.database.third_parties.jarvis.JarvisStructure.spacegroup_id", "modulename": "simmate.database.third_parties.jarvis", "qualname": "JarvisStructure.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.materials_project", "modulename": "simmate.database.third_parties.materials_project", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure", "type": "class", "doc": "<p>Crystal structures from the <a href=\"https://materialsproject.org/\">Materials Project</a>\ndatabase.</p>\n\n<p>Currently, this table only stores strucure and thermodynamic information,\nbut the Materials Project has much more data available via their\n<a href=\"https://github.com/materialsproject/api\">REST API</a> and website.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.base_info", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['id', 'structure_string', 'energy']"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.source", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.source", "type": "variable", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "default_value": " = 'Materials Project'"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.source_doi", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.source_doi", "type": "variable", "doc": "<p>Source paper that must be referenced if this data is used. If this is None,\nplease refer to the <code>source</code> attribute for further details on what to \nreference.</p>\n", "annotation": ": str", "default_value": " = 'https://doi.org/10.1063/1.4812323'"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.remote_archive_link", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.remote_archive_link", "type": "variable", "doc": "<p>The URL that is used to download the archive and then populate this table.\nMany tables, such as those in <code>simmate.database.third_parties</code>, have\npre-existing data that you can download and load into your local database,\nso if this attribute is set, you can use the <code>load_remote_archive</code> method.</p>\n", "annotation": ": str", "default_value": " = 'https://archives.simmate.org/MatProjStructure-2022-01-26.zip'"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.id", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.id", "type": "function", "doc": "<p>The id used to represent the structure (ex: \"mp-12345\")</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.external_link", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.external_link", "type": "variable", "doc": "<p>URL to this structure in the Materials Project website.</p>\n", "annotation": ": str"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.structure_string", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.nsites", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.nelements", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.elements", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.chemical_system", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.density", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.density_atomic", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.volume", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.volume_molar", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.formula_full", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.formula_reduced", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.formula_anonymous", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.spacegroup", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.energy", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.energy_per_atom", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.energy_above_hull", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.is_stable", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.decomposes_to", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.formation_energy", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.formation_energy_per_atom", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.DoesNotExist", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.database.third_parties.materials_project.MatProjStructure.spacegroup_id", "modulename": "simmate.database.third_parties.materials_project", "qualname": "MatProjStructure.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.oqmd", "modulename": "simmate.database.third_parties.oqmd", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure", "type": "class", "doc": "<p>Crystal structures from the <a href=\"http://oqmd.org/\">OQMD</a> database.</p>\n\n<p>Currently, this table only stores strucure and thermodynamic information,\nbut OQDMD has much more data available via their\n<a href=\"http://oqmd.org/static/docs/restful.html\">REST API</a> and website.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.base_info", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['id', 'structure_string', 'formation_energy']"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.source", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.source", "type": "variable", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "default_value": " = 'The Open Quantum Materials Database'"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.source_doi", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.source_doi", "type": "variable", "doc": "<p>Source paper that must be referenced if this data is used. If this is None,\nplease refer to the <code>source</code> attribute for further details on what to \nreference.</p>\n", "annotation": ": str", "default_value": " = 'https://doi.org/10.1007/s11837-013-0755-4'"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.remote_archive_link", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.remote_archive_link", "type": "variable", "doc": "<p>The URL that is used to download the archive and then populate this table.\nMany tables, such as those in <code>simmate.database.third_parties</code>, have\npre-existing data that you can download and load into your local database,\nso if this attribute is set, you can use the <code>load_remote_archive</code> method.</p>\n", "annotation": ": str", "default_value": " = 'https://archives.simmate.org/OqmdStructure-2022-02-22.zip'"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.id", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.id", "type": "function", "doc": "<p>The id used to represent the structure (ex: \"oqmd-12345\")</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.formation_energy", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure as provided by the OQMD.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.external_link", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.external_link", "type": "variable", "doc": "<p>URL to this structure in the OQMD website.</p>\n", "annotation": ": str"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.structure_string", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.nsites", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.nelements", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.elements", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.chemical_system", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.density", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.density_atomic", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.volume", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.volume_molar", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.formula_full", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.formula_reduced", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.formula_anonymous", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.spacegroup", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.DoesNotExist", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.MultipleObjectsReturned", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.database.third_parties.oqmd.OqmdStructure.spacegroup_id", "modulename": "simmate.database.third_parties.oqmd", "qualname": "OqmdStructure.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.database.workflow_results", "modulename": "simmate.database.workflow_results", "type": "module", "doc": "<h1 id=\"local-calculations\">Local Calculations</h1>\n\n<p>Much like the <code>simmate.workflows</code> module, this module brings together all database tables that are linked to workflows and organizes them by application for convenience.</p>\n\n<h1 id=\"usage\">Usage</h1>\n\n<p><a href=\"https://github.com/jacksund/simmate/tree/main/tutorials\">Tutorials 01-05</a> will teach you how to run workflows and access their results. But as a review:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflows.static_energy</span> <span class=\"kn\">import</span> <span class=\"n\">mit_workflow</span>\n\n<span class=\"c1\"># runs the workflow and returns a status</span>\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">mit_workflow</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">structure</span><span class=\"o\">=...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># gives the DatabaseTable where ALL results are stored</span>\n<span class=\"n\">energy_mit</span><span class=\"o\">.</span><span class=\"n\">result_table</span>\n</code></pre></div>\n\n<p>You can also access a table directly with...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>  <span class=\"c1\"># connects to database</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.database.workflow_results</span> <span class=\"kn\">import</span> <span class=\"n\">MITStaticEnergy</span>\n\n<span class=\"c1\"># NOTE: MITStaticEnergy here is the exact same as result_table in the codeblock</span>\n<span class=\"c1\"># above this one. These are just two different ways of accessing it.</span>\n<span class=\"n\">MITStaticEnergy</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h1 id=\"location-of-each-tables-source-code\">Location of Each Table's Source-code</h1>\n\n<p>The code that defines these tables are located in the corresponding <code>simmate.calculators</code> module. We make tables accessible here because users often want to search for results by application -- not by their calculator name. For example, the results from all static energy calculations that use VASP under MIT project settings can be imported with...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.workflow_results</span> <span class=\"kn\">import</span> <span class=\"n\">MITStaticEnergy</span>\n</code></pre></div>\n\n<p>Alternatively, this same results could have been imported with...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.database.energy</span> <span class=\"kn\">import</span> <span class=\"n\">MITStaticEnergy</span>\n</code></pre></div>\n"}, {"fullname": "simmate.file_converters", "modulename": "simmate.file_converters", "type": "module", "doc": "<h2 id=\"file-converters\">File Converters</h2>\n\n<blockquote>\n  <p>:warning: This module is at the planning stage so no code exists here yet.</p>\n</blockquote>\n\n<p>I think this will be a good module to have io features that can't be added to a specific calculator or toolkit module. For example, cif/xyz files are universal standards, and not linked directly to a specific calculator. There are also third-party classes (e.g. pymatgen/ase/jarvis structures) which users may want to switch between.</p>\n\n<p>I therefore plan for this module to be a one-stop place where users can convert between formats. For example, for simmate.file_converters.structures will have imports pointing toward vasp(POSCAR), castep, cif, pymatgen, ase, and all the different ways to represent a single crystal structure. Links between formats (e.g. vasp --> castep) will be done by first converting to a simmate.toolkit.base_data_types.Structure first.</p>\n"}, {"fullname": "simmate.file_converters.molecule", "modulename": "simmate.file_converters.molecule", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure", "modulename": "simmate.file_converters.structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.ase", "modulename": "simmate.file_converters.structure.ase", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.cif", "modulename": "simmate.file_converters.structure.cif", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.jarvis", "modulename": "simmate.file_converters.structure.jarvis", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.others", "modulename": "simmate.file_converters.structure.others", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.pymatgen", "modulename": "simmate.file_converters.structure.pymatgen", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.structure.simmate_database", "modulename": "simmate.file_converters.structure.simmate_database", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.file_converters.voxeldata", "modulename": "simmate.file_converters.voxeldata", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.shortcuts", "modulename": "simmate.shortcuts", "type": "module", "doc": "<p>This file exists strictly for when you're testing with Simmate and don't want\nto write out long imports every single time. When writing modules, you should\nnever use these shortcuts because they actually take longer to run. </p>\n\n<p>So if you're a beginner, use the shortcut. If you're contributing to Simmate\ncode or really care about speed of your code, avoid the shortcut.</p>\n\n<p>By example, the import below is a shortcut for the longer line below it. They \nboth load the same function, but have two key differences: (1) The shortcut is \nobiously easier to remember and write -- so it's best for when you're quickly \ntesting things via Spyder; and (2) the shortcut loads slower (typically 1 second)\nthan the full import. This is because the shortcut module (this file) loads other\nconvient modules too. So you're actually loading extra things!</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># the convenient shortcut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n\n<span class=\"c1\"># the faster import that does the same thing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.configuration.django</span> <span class=\"kn\">import</span> <span class=\"n\">setup_full</span>\n</code></pre></div>\n"}, {"fullname": "simmate.toolkit", "modulename": "simmate.toolkit", "type": "module", "doc": "<h2 id=\"the-simmate-toolkit\">The Simmate Toolkit</h2>\n\n<p>:warning: This module is highly experimental and it's use will change often. Therefore many of the classes are undocumented and untested at the moment.</p>\n\n<p>The toolkit module is ment to be an extension of <a href=\"https://pymatgen.org/\">pymatgen</a> and <a href=\"https://gitlab.com/ase/ase\">ase</a>. It includes low-level classes and functions -- such as the <code>Structure</code> class and analyses ran on it. This module is entirely in python and does not involve calling third-party DFT programs (see the <code>simmate.calculators</code> module for those).</p>\n\n<p>The most commonly used classes from this toolkit are the <code>Structure</code> and <code>Composition</code> classes, which are located <code>base_data_types</code> module. For convenience, we also allow importing these classes directly with...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.toolkit</span> <span class=\"kn\">import</span> <span class=\"n\">Structure</span><span class=\"p\">,</span> <span class=\"n\">Composition</span>\n</code></pre></div>\n\n<h2 id=\"outline-of-submodules\">Outline of submodules</h2>\n\n<ul>\n<li><code>base_data_types</code> = defines fundamental classes for materials science</li>\n<li><code>creators</code> = creates structures, lattices, and periodic sites</li>\n<li><code>featurizers</code> = makes properties into numerical descriptors for machine-learning</li>\n<li><code>structure_prediction</code> = predicts reasonable crystal structures given a composition</li>\n<li><code>symmetry</code> = contains tools/metadata for symmetry, such as spacegroups and wyckoff sites</li>\n<li><code>transformations</code> = define transformations/mutations that can be applied to Structures</li>\n<li><code>validators</code> = evulate structures/lattices/etc. to see if they meet given criteria</li>\n</ul>\n"}, {"fullname": "simmate.toolkit.base_data_types", "modulename": "simmate.toolkit.base_data_types", "type": "module", "doc": "<h1 id=\"base-class-types-for-matsci\">Base Class Types for MatSci</h1>\n\n<p>This module is currently an extension of the <code>pymatgen.core</code> module that add only\na few extra methods. You should consult <a href=\"https://pymatgen.org/\">the pymatgen documentation</a> for use and additional features.</p>\n\n<p>In the future, we intend for this module to be a fork and refactor of <code>pymatgen.core</code>, but this milestone is hit, our developmental code will be hosted in the <code>_to_do</code> folder of this module.</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.composition", "modulename": "simmate.toolkit.base_data_types.composition", "type": "module", "doc": "<p>This module defines the Composition class.</p>\n\n<p>It is a very basic extension PyMatGen's core Composition class, as it only adds\na few extra methods and does not change any other usage. Note that this class\nis currently NOT used by Simmate's Structure class. For Simmate, \nStructure.composition will still return a pymatgen composition object.</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.composition.Composition", "modulename": "simmate.toolkit.base_data_types.composition", "qualname": "Composition", "type": "class", "doc": "<p>Represents a Composition, which is essentially a {element:amount} mapping\ntype. Composition is written to be immutable and hashable,\nunlike a standard Python dict.</p>\n\n<p>Note that the key can be either an Element or a Species. Elements and Species\nare treated differently. i.e., a Fe2+ is not the same as a Fe3+ Species and\nwould be put in separate keys. This differentiation is deliberate to\nsupport using Composition to determine the fraction of a particular Species.</p>\n\n<p>Works almost completely like a standard python dictionary, except that\n__getitem__ is overridden to return 0 when an element is not found.\n(somewhat like a defaultdict, except it is immutable).</p>\n\n<p>Also adds more convenience methods relevant to compositions, e.g.,\nget_fraction.</p>\n\n<p>It should also be noted that many Composition related functionality takes\nin a standard string as a convenient input. For example,\neven though the internal representation of a Fe2O3 composition is\n{Element(\"Fe\"): 2, Element(\"O\"): 3}, you can obtain the amount of Fe\nsimply by comp[\"Fe\"] instead of the more verbose comp[Element(\"Fe\")].</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">comp</span> <span class=\"o\">=</span> <span class=\"n\">Composition</span><span class=\"p\">(</span><span class=\"s2\">&quot;LiFePO4&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">get_atomic_fraction</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">(</span><span class=\"s2\">&quot;Li&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">0.14285714285714285</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">num_atoms</span>\n<span class=\"go\">7.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">reduced_formula</span>\n<span class=\"go\">&#39;LiFePO4&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">formula</span>\n<span class=\"go\">&#39;Li1 Fe1 P1 O4&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">get_wt_fraction</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">(</span><span class=\"s2\">&quot;Li&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">0.04399794666951898</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">num_atoms</span>\n<span class=\"go\">7.0</span>\n</code></pre></div>\n", "bases": "pymatgen.core.composition.Composition"}, {"fullname": "simmate.toolkit.base_data_types.composition.Composition.radii_estimate", "modulename": "simmate.toolkit.base_data_types.composition", "qualname": "Composition.radii_estimate", "type": "function", "doc": "<p>Gives the reported radii for each element in the composition.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>radius_method</code> :\nOptions are atomic; atomic_calculated; van_der_waals; metallic; ionic.\nThe default is \"ionic\".</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>radii</code> :\nA list of radii in the same order as composition.elements</li>\n</ul>\n", "signature": "(self, radius_method: str = 'ionic')", "funcdef": "def"}, {"fullname": "simmate.toolkit.base_data_types.composition.Composition.volume_estimate", "modulename": "simmate.toolkit.base_data_types.composition", "qualname": "Composition.volume_estimate", "type": "function", "doc": "<p>Gives a predicted lattice volume using the reported radii for each\nelement in the composition.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>radius_method</code> :\nOptions are atomic; atomic_calculated; van_der_waals; metallic; ionic.\nThe default is \"ionic\".</li>\n<li><code>packing_factor</code> :\nScaling value for the volume in relation to predict ionic radii.\nA value of 1 means the total volume will be exactly same as the sum\nof all spheres. Larger values will give smaller volumes. The\ndefault is 1.35, which is 74% packing efficiency (hexagonal packing).</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>total_volume</code> :\nthe estimated volume for a unitcell of this composition</li>\n</ul>\n", "signature": "(self, radius_method: str = 'ionic', packing_factor: float = 1.35)", "funcdef": "def"}, {"fullname": "simmate.toolkit.base_data_types.composition.Composition.distance_matrix_estimate", "modulename": "simmate.toolkit.base_data_types.composition", "qualname": "Composition.distance_matrix_estimate", "type": "function", "doc": "<p>Gives the estimated element-element distances using the reported radii\nfor each element in the composition.</p>\n\n<p>For example, Mg-O-F would give a symmetric matrix like...</p>\n\n<p>|    | Mg   | O    | F    |\n| Mg | 1.5  | 1.05 | 1.   |\n| O  | 1.05 | 0.6  | 0.55 |\n| F  | 1.   | 0.55 | 0.5  |</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>radius_method</code> :\nOptions are atomic; atomic_calculated; van_der_waals; metallic; ionic.\nThe default is \"ionic\".</li>\n<li><code>packing_factor</code> :\nScaling value for the volume in relation to predict ionic radii.\nA value of 1 means the total volume will be exactly same as the sum\nof all spheres. Larger values will give smaller volumes. Because this\nmethod is commonly used to define minimum possible distances for\nrandom structure creation, we make the default 0.5.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>element_distance_matrix</code> :\nA matrix of element-element distances</li>\n</ul>\n", "signature": "(self, radius_method: str = 'ionic', packing_factor: float = 0.5)", "funcdef": "def"}, {"fullname": "simmate.toolkit.base_data_types.structure", "modulename": "simmate.toolkit.base_data_types.structure", "type": "module", "doc": "<p>This module defines the Structure class.</p>\n\n<p>It is a very basic extension PyMatGen's core Structure class, as it only adds\na few extra methods and does not change any other usage.</p>\n"}, {"fullname": "simmate.toolkit.base_data_types.structure.Structure", "modulename": "simmate.toolkit.base_data_types.structure", "qualname": "Structure", "type": "class", "doc": "<p>Mutable version of structure.</p>\n", "bases": "pymatgen.core.structure.Structure"}, {"fullname": "simmate.toolkit.base_data_types.structure.Structure.get_sanitized_structure", "modulename": "simmate.toolkit.base_data_types.structure", "qualname": "Structure.get_sanitized_structure", "type": "function", "doc": "<p>Run symmetry analysis and \"sanitization\" on the pymatgen structure</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.base_data_types.structure.Structure.from_dynamic", "modulename": "simmate.toolkit.base_data_types.structure", "qualname": "Structure.from_dynamic", "type": "function", "doc": "<p>This is an experimental feature.</p>\n\n<p>Possible structure formats include...\n    object of toolkit structure\n    dictionary of toolkit structure\n    dictionary of...\n        (1) python path to calculation datatable\n        (2) one of the following (only one is used in this priority order):\n            (a) prefect flow id\n            (b) calculation id\n            (c) directory\n            ** these three are chosen because all three are unique for every\n            single calculation and we have access to different ones at different\n            times!\n        (3) (optional) attribute to use on table (e.g. structure_final)\n            By default, we assume calculation table is also a structure table\n    filename for a structure (cif, poscar, etc.) [TODO]</p>\n", "signature": "(cls, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.base_data_types.structure.Structure.from_database", "modulename": "simmate.toolkit.base_data_types.structure", "qualname": "Structure.from_database", "type": "function", "doc": "<p>This is an experimental feature.</p>\n\n<p>Loads a structure from the Simmate database.</p>\n", "signature": "(cls, structure: dict)", "funcdef": "def"}, {"fullname": "simmate.toolkit.base_data_types.structure.Structure.from_database_string", "modulename": "simmate.toolkit.base_data_types.structure", "qualname": "Structure.from_database_string", "type": "function", "doc": "<p>Loads a toolkit structure from a string -- specifically strings that\nare stored in the structure_string column for\nsimmate.database.base_data_types.Structure.</p>\n", "signature": "(cls, structure_string: str)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators", "modulename": "simmate.toolkit.creators", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice", "modulename": "simmate.toolkit.creators.lattice", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.RandomLattice", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RandomLattice", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.RandomLattice.__init__", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RandomLattice.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    vector_generation_method=<class 'simmate.toolkit.creators.vector.normal_distribution.NormallyDistributedVectors'>,\n    vector_gen_options={},\n    angle_generation_method=<class 'simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors'>,\n    angle_gen_options={'min_value': 60, 'max_value': 120}\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.RandomLattice.new_lattice", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RandomLattice.new_lattice", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.RandomSymLattice", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RandomSymLattice", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.RandomSymLattice.__init__", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RandomSymLattice.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    spacegroup_include=range(1, 231),\n    spacegroup_exclude=[],\n    vector_generation_method=<class 'simmate.toolkit.creators.vector.normal_distribution.NormallyDistributedVectors'>,\n    vector_gen_options={},\n    angle_generation_method=<class 'simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors'>,\n    angle_gen_options={'min_value': 60, 'max_value': 120}\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.RandomSymLattice.new_lattice", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RandomSymLattice.new_lattice", "type": "function", "doc": "<p></p>\n", "signature": "(self, spacegroup=None)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.RSLFixedVolume", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RSLFixedVolume", "type": "class", "doc": "<p></p>\n", "bases": "RandomSymLattice"}, {"fullname": "simmate.toolkit.creators.lattice.RSLFixedVolume.__init__", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RSLFixedVolume.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, volume, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.RSLFixedVolume.new_lattice", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RSLFixedVolume.new_lattice", "type": "function", "doc": "<p></p>\n", "signature": "(self, spacegroup=None)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.RSLSmartVolume", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RSLSmartVolume", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.lattice.RSLSmartVolume.__init__", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RSLSmartVolume.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    composition,\n    volume=None,\n    spacegroup_include=range(1, 231),\n    spacegroup_exclude=[],\n    vector_generation_method=<class 'simmate.toolkit.creators.vector.normal_distribution.NormallyDistributedVectors'>,\n    vector_gen_options={},\n    angle_generation_method=<class 'simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors'>,\n    angle_gen_options={'min_value': 60, 'max_value': 120}\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.lattice.RSLSmartVolume.new_lattice", "modulename": "simmate.toolkit.creators.lattice", "qualname": "RSLSmartVolume.new_lattice", "type": "function", "doc": "<p></p>\n", "signature": "(self, spacegroup=None)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.sites", "modulename": "simmate.toolkit.creators.sites", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff.RandomWySites", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "qualname": "RandomWySites", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff.RandomWySites.__init__", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "qualname": "RandomWySites.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    composition,\n    spacegroup_include=range(1, 231),\n    spacegroup_exclude=[],\n    coords_generation_method=<class 'simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors'>,\n    coords_gen_options={}\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff.RandomWySites.new_sites", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "qualname": "RandomWySites.new_sites", "type": "function", "doc": "<p></p>\n", "signature": "(self, spacegroup=None)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.sites.random_wyckoff.asymmetric_unit_boundries", "modulename": "simmate.toolkit.creators.sites.random_wyckoff", "qualname": "asymmetric_unit_boundries", "type": "function", "doc": "<p></p>\n", "signature": "(\n    spacegroup,\n    asym_data=array(['0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/8; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/8',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/8',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/8',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/8',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/8',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1; y \u2264 1/2 - x',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 1/2 - x',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1; y \u2264 1/2 - x',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/8',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 1/2 - x',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 1/2 - x',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 1/2 - x',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/4; x \u2264 y; y \u2264 1 - x',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4',\n       '0 \u2264 x \u2264 1/4; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1; x \u2264 y; y \u2264 1/2 - x',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4; x \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4; y \u2264 1/2 - x',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/8',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/8',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/3',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/3',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/3; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/6; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/6',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/6',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/6',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/6',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/6; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1; x \u2264 2y; y \u2264 min(1 - x, 2x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1; x \u2264 (y + 1)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/3; x \u2264 2y; y \u2264 min(1 - x, 2x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/6; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/4; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/3; 0 \u2264 z \u2264 1; x \u2264 (1 + y)/2; y \u2264 x/2',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/4; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/6; x \u2264 2y; y \u2264 min(1 - x, 2x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/12; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1; x \u2264 (1 + y)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/6',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/6',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/3; y \u2264 x',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/3; y \u2264 x',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/4; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/12',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/12',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/6; y \u2264 x',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/6; y \u2264 x',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/4; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/3; 0 \u2264 z \u2264 1; x \u2264 (1 + y)/2; y \u2264 x/2',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/3; 0 \u2264 z \u2264 1; x \u2264 (1 + y)/2; y \u2264 x/2',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/2; x \u2264 2y; y \u2264 min(1 - x, 2x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/4; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/4; x \u2264 (1 + y)/2; y \u2264 min(1 - x, (1 + x)/2)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/3; 0 \u2264 z \u2264 1/2; x \u2264 (1 + y)/2; y \u2264 x/2',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4; x \u2264 (1 + y)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4; x \u2264 (1 + y)/2; y \u2264 min(1 - x, x)',\n       '0 \u2264 x \u2264 2/3; 0 \u2264 y \u2264 2/3; 0 \u2264 z \u2264 1/4; x \u2264 2y; y \u2264 min(1 - x, 2x)',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1; 0 \u2264 z \u2264 1/2; y \u2264 1 - x; z \u2264 min(x, y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; -1/4 \u2264 z \u2264 1/4; y \u2264 x; max(x - 1/2, -y) \u2264 z \u2264 min(1/2 - x, y)',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 min(x, 1 - x); z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; -1/2 \u2264 z \u2264 1/2; max(x - 1/2, -y) \u2264 z \u2264 min(x, y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; z \u2264 min(x, y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; z \u2264 min(x, y)',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 min(x, 1 - x); z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4; y \u2264 x; z \u2264 min(1/2 - x, y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; -1/4 \u2264 z \u2264 1/4; y \u2264 min(x, 1/2 - x); -y \u2264 z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 x; z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; z \u2264 min(x, y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4; z \u2264 min(x, 1/2 - x, y, 1/2 - y)',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 min(x, 1 - x); z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; -1/4 \u2264 z \u2264 1/4; max(-x, x - 1/2, -y, y - 1/2) \u2264 z \u2264 min(x, 1/2 - x, y, 1/2 - y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; -1/4 \u2264 z \u2264 1/4; y \u2264 min(x, 1/2 - x); -y \u2264 z \u2264 y',\n       '0 \u2264 x \u2264 1/2; -1/8 \u2264 y \u2264 1/8; -1/8 \u2264 z \u2264 1/8; y \u2264 min(x, 1/2 - x); -y \u2264 z \u2264 min(x, 1/2 - x)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4; z \u2264 min(x, 1/2 - x, y, 1/2 - y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 3/4; -1/2 \u2264 z \u2264 1/4; max(-y, x - 1/2) \u2264 z \u2264 min(-y + 1/2, 2x - y, 2y - x, y - 2x + 1/2)',\n       '-1/4 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 3/4; 0 \u2264 z \u2264 1/2; x \u2264 y \u2264 x + 1/2; (y - x)/2 \u2264 z \u2264 min(y, (-4x - 2y + 3)/2, (3 - 2x - 2y)/4)',\n       '-3/8 \u2264 x \u2264 1/8; -1/8 \u2264 y \u2264 1/8; -1/8 \u2264 z \u2264 3/8; max(x, y, y - x - 1/8) \u2264 z \u2264 y + 1/4',\n       '0 \u2264 x \u2264 1; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 min(x, 1 - x); z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; -1/4 \u2264 z \u2264 1/4; y \u2264 min(x, 1/2 - x); -y \u2264 z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 x; z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; z \u2264 min(x, y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; -1/4 \u2264 z \u2264 1/4; y \u2264 min(x, 1/2 - x); -y \u2264 z \u2264 y',\n       '1/4 \u2264 x \u2264 1/2; 1/4 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; z \u2264 min(x, y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 x; z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/2; y \u2264 x; z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4; z \u2264 min(x, 1/2 - x, y, 1/2 - y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; -1/4 \u2264 z \u2264 1/4; y \u2264 x; max(x - 1/2, -y) \u2264 z \u2264 min(1/2 - x, y)',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1/4; y \u2264 min(x, 1/2 - x); z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/4; 0 \u2264 z \u2264 1/4; y \u2264 min(x, 1/2 - x); z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/8; -1/8 \u2264 z \u2264 1/8; y \u2264 min(1/2 - x, x); -y \u2264 z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/8; -1/8 \u2264 z \u2264 1/8; y \u2264 min(1/2 - x, x); -y \u2264 z \u2264 y',\n       '0 \u2264 x \u2264 1/2; 0 \u2264 y \u2264 1/2; 0 \u2264 z \u2264 1/4; y \u2264 x; z \u2264 min(1/2 - x, y)',\n       '-1/8 \u2264 x \u2264 1/8; -1/8 \u2264 y \u2264 1/8; 0 \u2264 z \u2264 1/4; max(x, -x, y, -y) \u2264 z'],\n      dtype=object)\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure", "modulename": "simmate.toolkit.creators.structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.base", "modulename": "simmate.toolkit.creators.structure.base", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator.__init__", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator.__init__", "type": "function", "doc": "<p>This is where you store all settings for the creation and do the setup.\nFor example, you would store the target composition here and/or\nspecify the fixed volume to use. Many times, there are 'setup' steps\nthat require a lot of overhead which you don't want to redo for each\nnew creation. For example, you don't want to find all combinations\nof allowed wyckoff sites for a specific composition each time you make\na new structure, so you would find all valid combinations here in the\n__init__ so you don't have to repeatedly find combos below in create()</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator.create_structure", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator.create_structure", "type": "function", "doc": "<p>For all different structure creators, there should be a method of\n.new_structure() that makes the new object. The main rule for this\nfunction is that it must return a single pymatgen structure object.\nHow that structure object is created is up to each method!</p>\n\n<p>Below is some example code for how Structures are typically made. How\nthe spacegroup/lattice/species/coords is determined is up to each\nmethodand not shown.</p>\n\n<h1 id=\"import-module-do-this-outside-the-class-functions\">import module (do this outside the class functions)</h1>\n\n<p>from simmate.toolkit import Structure</p>\n\n<h1 id=\"run-your-method-that-makes-the-latticespeciescoords-or-uses-the\">run your method that makes the lattice/species/coords or uses the</h1>\n\n<h1 id=\"inputs-from-above\">inputs from above.</h1>\n\n<p>...</p>\n\n<h1 id=\"for-new_structure-method-that-doesnt-use-symmetry-or-wyckoff-sites\">for new_structure method that doesnt use symmetry or wyckoff sites</h1>\n\n<p>sg = 1 # this is never used but just for bookkeeping\nstructure = Structure(lattice = lattice,\n                      species = species,\n                      coords = coords)</p>\n\n<h1 id=\"for-new_structure-methods-that-depend-on-symmetry-and-wyckoff-sites\">for new_structure methods that depend on symmetry and wyckoff sites</h1>\n\n<h1 id=\"if-you-give-the-sites-in-the-asym-unit-they-will-be-replicated\">If you give the sites in the asym unit, they will be replicated</h1>\n\n<h1 id=\"elsewhere-in-the-unitcell-using-spacegroup-symmetry-operations\">elsewhere in the unitcell using spacegroup symmetry operations.</h1>\n\n<p>structure = Structure.from_spacegroup(sg = spacegroup,\n                                      lattice = lattice,\n                                      species = species,\n                                      coords = coords)</p>\n", "signature": "(self, spacegroup=None)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator.create_many_structures", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator.create_many_structures", "type": "function", "doc": "<p>This is a convience function to create many structures in parallel.\nIn most cases, you don't want to redefine this function.\nIt is assumed that calling create_structure() repeatedly is the\nfastest method to make new structures, so that is the function\nparallelized. In some cases (such as the USPEX creator), there is a\nlot of overhead with a single call to create_structure(), so it may\nmake more sense to have the main structure creation code in this\nfunction. See the USPEXStructure Creator class for an example of this.</p>\n\n<p>Make sure you have a Dask cluster setup as a global variable!\nHere's how you should do that...\n    from dask.distributed import Client\n    client = Client(processes=False)</p>\n", "signature": "(self, n, spacegroup=None)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.base.StructureCreator.update_data", "modulename": "simmate.toolkit.creators.structure.base", "qualname": "StructureCreator.update_data", "type": "function", "doc": "<p>TO-DO\nThis is a function to update settings. For example, I could use this\nto update the self.lattice_creator method to a more accurate volume.\nI can run machine learning code here before updating too.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.prototypes", "modulename": "simmate.toolkit.creators.structure.prototypes", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.exact_match", "modulename": "simmate.toolkit.creators.structure.prototypes.exact_match", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.exact_match.ExactAflowPrototypeStructures", "modulename": "simmate.toolkit.creators.structure.prototypes.exact_match", "qualname": "ExactAflowPrototypeStructures", "type": "class", "doc": "<p>Given a compositon, this class can be used to create structures from\nthe <strong>exactly-matching</strong> prototypes in the AFLOW library. This means we\nare only using prototypes that have the same anonymous formula. For example,\nif you request structures for Ca2N to be made, only prototypes that have\nthe AB2 anonymoous formula will be used (such as the MoS2 prototype).</p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.exact_match.ExactAflowPrototypeStructures.__init__", "modulename": "simmate.toolkit.creators.structure.prototypes.exact_match", "qualname": "ExactAflowPrototypeStructures.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, composition, max_sites=115)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.ordered", "modulename": "simmate.toolkit.creators.structure.prototypes.ordered", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.ordered.AflowPrototypeStructures", "modulename": "simmate.toolkit.creators.structure.prototypes.ordered", "qualname": "AflowPrototypeStructures", "type": "class", "doc": "<p>Given a compositon, this class can be used to create all structures from\nthe prototypes in the AFLOW library.</p>\n\n<p>At the moment, this does not allow for disordered versions of prototypes.\nThis would be like using a supercell of a 1-site prototype for a 2-site target\ncomposition. A concrete example of this is using the NaCl rocksalt prototype\nfor a NaClBr or NaKClBr compositions -- each of these compositions would\nrequire a supercell of the NaCl prototype structure becuase they need more\nthan 2 sites.</p>\n"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.ordered.AflowPrototypeStructures.__init__", "modulename": "simmate.toolkit.creators.structure.prototypes.ordered", "qualname": "AflowPrototypeStructures.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, composition, allow_multiples=True, max_sites=115)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.prototypes.ordered_and_disordered", "modulename": "simmate.toolkit.creators.structure.prototypes.ordered_and_disordered", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.random_symmetry", "modulename": "simmate.toolkit.creators.structure.random_symmetry", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.random_symmetry.RandomSymStructure", "modulename": "simmate.toolkit.creators.structure.random_symmetry", "qualname": "RandomSymStructure", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "simmate.toolkit.creators.structure.base.StructureCreator"}, {"fullname": "simmate.toolkit.creators.structure.random_symmetry.RandomSymStructure.__init__", "modulename": "simmate.toolkit.creators.structure.random_symmetry", "qualname": "RandomSymStructure.__init__", "type": "function", "doc": "<p>This is where you store all settings for the creation and do the setup.\nFor example, you would store the target composition here and/or\nspecify the fixed volume to use. Many times, there are 'setup' steps\nthat require a lot of overhead which you don't want to redo for each\nnew creation. For example, you don't want to find all combinations\nof allowed wyckoff sites for a specific composition each time you make\na new structure, so you would find all valid combinations here in the\n__init__ so you don't have to repeatedly find combos below in create()</p>\n", "signature": "(\n    self,\n    composition,\n    spacegroup_include=range(1, 231),\n    spacegroup_exclude=[],\n    lattice_generation_method=<class 'simmate.toolkit.creators.lattice.RSLSmartVolume'>,\n    lattice_gen_options={},\n    site_generation_method=<class 'simmate.toolkit.creators.sites.random_wyckoff.RandomWySites'>,\n    site_gen_options={},\n    validator_method=<class 'simmate.toolkit.validators.structure.SiteDistanceMatrix'>,\n    validator_options={},\n    fixindicator_method=<class 'simmate.toolkit.creators.utils.NestedFixes'>,\n    fixindicator_options={'fixes': ['new_lattice', 'new_sites'], 'cutoffs': [15, 100]},\n    remove_failed_spacegroups=False,\n    cleanup=True\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.random_symmetry.RandomSymStructure.create_structure", "modulename": "simmate.toolkit.creators.structure.random_symmetry", "qualname": "RandomSymStructure.create_structure", "type": "function", "doc": "<p>For all different structure creators, there should be a method of\n.new_structure() that makes the new object. The main rule for this\nfunction is that it must return a single pymatgen structure object.\nHow that structure object is created is up to each method!</p>\n\n<p>Below is some example code for how Structures are typically made. How\nthe spacegroup/lattice/species/coords is determined is up to each\nmethodand not shown.</p>\n\n<h1 id=\"import-module-do-this-outside-the-class-functions\">import module (do this outside the class functions)</h1>\n\n<p>from simmate.toolkit import Structure</p>\n\n<h1 id=\"run-your-method-that-makes-the-latticespeciescoords-or-uses-the\">run your method that makes the lattice/species/coords or uses the</h1>\n\n<h1 id=\"inputs-from-above\">inputs from above.</h1>\n\n<p>...</p>\n\n<h1 id=\"for-new_structure-method-that-doesnt-use-symmetry-or-wyckoff-sites\">for new_structure method that doesnt use symmetry or wyckoff sites</h1>\n\n<p>sg = 1 # this is never used but just for bookkeeping\nstructure = Structure(lattice = lattice,\n                      species = species,\n                      coords = coords)</p>\n\n<h1 id=\"for-new_structure-methods-that-depend-on-symmetry-and-wyckoff-sites\">for new_structure methods that depend on symmetry and wyckoff sites</h1>\n\n<h1 id=\"if-you-give-the-sites-in-the-asym-unit-they-will-be-replicated\">If you give the sites in the asym unit, they will be replicated</h1>\n\n<h1 id=\"elsewhere-in-the-unitcell-using-spacegroup-symmetry-operations\">elsewhere in the unitcell using spacegroup symmetry operations.</h1>\n\n<p>structure = Structure.from_spacegroup(sg = spacegroup,\n                                      lattice = lattice,\n                                      species = species,\n                                      coords = coords)</p>\n", "signature": "(self, spacegroup=None)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party", "modulename": "simmate.toolkit.creators.structure.third_party", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.pyxtal", "modulename": "simmate.toolkit.creators.structure.third_party.pyxtal", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.structure.third_party.pyxtal.PyXtalStructure", "modulename": "simmate.toolkit.creators.structure.third_party.pyxtal", "qualname": "PyXtalStructure", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "simmate.toolkit.creators.structure.base.StructureCreator"}, {"fullname": "simmate.toolkit.creators.structure.third_party.pyxtal.PyXtalStructure.__init__", "modulename": "simmate.toolkit.creators.structure.third_party.pyxtal", "qualname": "PyXtalStructure.__init__", "type": "function", "doc": "<p>This is where you store all settings for the creation and do the setup.\nFor example, you would store the target composition here and/or\nspecify the fixed volume to use. Many times, there are 'setup' steps\nthat require a lot of overhead which you don't want to redo for each\nnew creation. For example, you don't want to find all combinations\nof allowed wyckoff sites for a specific composition each time you make\na new structure, so you would find all valid combinations here in the\n__init__ so you don't have to repeatedly find combos below in create()</p>\n", "signature": "(\n    self,\n    composition,\n    volume_factor=1.0,\n    default_lattice=None,\n    tolerance_matrix=None,\n    spacegroup_include=range(1, 231),\n    spacegroup_exclude=[]\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.structure.third_party.pyxtal.PyXtalStructure.create_structure", "modulename": "simmate.toolkit.creators.structure.third_party.pyxtal", "qualname": "PyXtalStructure.create_structure", "type": "function", "doc": "<p>For all different structure creators, there should be a method of\n.new_structure() that makes the new object. The main rule for this\nfunction is that it must return a single pymatgen structure object.\nHow that structure object is created is up to each method!</p>\n\n<p>Below is some example code for how Structures are typically made. How\nthe spacegroup/lattice/species/coords is determined is up to each\nmethodand not shown.</p>\n\n<h1 id=\"import-module-do-this-outside-the-class-functions\">import module (do this outside the class functions)</h1>\n\n<p>from simmate.toolkit import Structure</p>\n\n<h1 id=\"run-your-method-that-makes-the-latticespeciescoords-or-uses-the\">run your method that makes the lattice/species/coords or uses the</h1>\n\n<h1 id=\"inputs-from-above\">inputs from above.</h1>\n\n<p>...</p>\n\n<h1 id=\"for-new_structure-method-that-doesnt-use-symmetry-or-wyckoff-sites\">for new_structure method that doesnt use symmetry or wyckoff sites</h1>\n\n<p>sg = 1 # this is never used but just for bookkeeping\nstructure = Structure(lattice = lattice,\n                      species = species,\n                      coords = coords)</p>\n\n<h1 id=\"for-new_structure-methods-that-depend-on-symmetry-and-wyckoff-sites\">for new_structure methods that depend on symmetry and wyckoff sites</h1>\n\n<h1 id=\"if-you-give-the-sites-in-the-asym-unit-they-will-be-replicated\">If you give the sites in the asym unit, they will be replicated</h1>\n\n<h1 id=\"elsewhere-in-the-unitcell-using-spacegroup-symmetry-operations\">elsewhere in the unitcell using spacegroup symmetry operations.</h1>\n\n<p>structure = Structure.from_spacegroup(sg = spacegroup,\n                                      lattice = lattice,\n                                      species = species,\n                                      coords = coords)</p>\n", "signature": "(self, spacegroup=None)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils", "modulename": "simmate.toolkit.creators.utils", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.utils.FixIndicator", "modulename": "simmate.toolkit.creators.utils", "qualname": "FixIndicator", "type": "class", "doc": "<p>This is an abstract base class for pointing to some class based on an\ninput number of attempts. Note that these classes should be written to run\nin parallel and called accross multiple threads -- this means you should\nnot store or update the attempt number within the class. Instead you must\nsimply take the attempt number and return a class based on that number.</p>\n", "bases": "abc.ABC"}, {"fullname": "simmate.toolkit.creators.utils.FixIndicator.point_to_fix", "modulename": "simmate.toolkit.creators.utils", "qualname": "FixIndicator.point_to_fix", "type": "function", "doc": "<p></p>\n", "signature": "(self, attempt=0)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.SingleFix", "modulename": "simmate.toolkit.creators.utils", "qualname": "SingleFix", "type": "class", "doc": "<p>This is an abstract base class for pointing to some class based on an\ninput number of attempts. Note that these classes should be written to run\nin parallel and called accross multiple threads -- this means you should\nnot store or update the attempt number within the class. Instead you must\nsimply take the attempt number and return a class based on that number.</p>\n", "bases": "FixIndicator"}, {"fullname": "simmate.toolkit.creators.utils.SingleFix.__init__", "modulename": "simmate.toolkit.creators.utils", "qualname": "SingleFix.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, fixes, cutoffs)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.SingleFix.point_to_fix", "modulename": "simmate.toolkit.creators.utils", "qualname": "SingleFix.point_to_fix", "type": "function", "doc": "<p></p>\n", "signature": "(self, attempt=0)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.SerialFixes", "modulename": "simmate.toolkit.creators.utils", "qualname": "SerialFixes", "type": "class", "doc": "<p>This is an abstract base class for pointing to some class based on an\ninput number of attempts. Note that these classes should be written to run\nin parallel and called accross multiple threads -- this means you should\nnot store or update the attempt number within the class. Instead you must\nsimply take the attempt number and return a class based on that number.</p>\n", "bases": "FixIndicator"}, {"fullname": "simmate.toolkit.creators.utils.SerialFixes.__init__", "modulename": "simmate.toolkit.creators.utils", "qualname": "SerialFixes.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, fixes, cutoffs)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.SerialFixes.point_to_fix", "modulename": "simmate.toolkit.creators.utils", "qualname": "SerialFixes.point_to_fix", "type": "function", "doc": "<p></p>\n", "signature": "(self, attempt=0)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.NestedFixes", "modulename": "simmate.toolkit.creators.utils", "qualname": "NestedFixes", "type": "class", "doc": "<p>This is an abstract base class for pointing to some class based on an\ninput number of attempts. Note that these classes should be written to run\nin parallel and called accross multiple threads -- this means you should\nnot store or update the attempt number within the class. Instead you must\nsimply take the attempt number and return a class based on that number.</p>\n", "bases": "FixIndicator"}, {"fullname": "simmate.toolkit.creators.utils.NestedFixes.__init__", "modulename": "simmate.toolkit.creators.utils", "qualname": "NestedFixes.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, fixes, cutoffs)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.NestedFixes.point_to_fix", "modulename": "simmate.toolkit.creators.utils", "qualname": "NestedFixes.point_to_fix", "type": "function", "doc": "<p></p>\n", "signature": "(self, attempt=0)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.get_nested_map", "modulename": "simmate.toolkit.creators.utils", "qualname": "get_nested_map", "type": "function", "doc": "<p></p>\n", "signature": "(a)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.utils.get_nested_size", "modulename": "simmate.toolkit.creators.utils", "qualname": "get_nested_size", "type": "function", "doc": "<p></p>\n", "signature": "(a)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.vector", "modulename": "simmate.toolkit.creators.vector", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.normal_distribution", "modulename": "simmate.toolkit.creators.vector.normal_distribution", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.normal_distribution.NormallyDistributedVectors", "modulename": "simmate.toolkit.creators.vector.normal_distribution", "qualname": "NormallyDistributedVectors", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.normal_distribution.NormallyDistributedVectors.__init__", "modulename": "simmate.toolkit.creators.vector.normal_distribution", "qualname": "NormallyDistributedVectors.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    min_value=0,\n    max_value=1,\n    extra_conditions=[],\n    center=None,\n    standdev=None\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.vector.normal_distribution.NormallyDistributedVectors.new_vector", "modulename": "simmate.toolkit.creators.vector.normal_distribution", "qualname": "NormallyDistributedVectors.new_vector", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.vector.uniform_distribution", "modulename": "simmate.toolkit.creators.vector.uniform_distribution", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors", "modulename": "simmate.toolkit.creators.vector.uniform_distribution", "qualname": "UniformlyDistributedVectors", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors.__init__", "modulename": "simmate.toolkit.creators.vector.uniform_distribution", "qualname": "UniformlyDistributedVectors.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, min_value=0, max_value=1, extra_conditions=[])", "funcdef": "def"}, {"fullname": "simmate.toolkit.creators.vector.uniform_distribution.UniformlyDistributedVectors.new_vector", "modulename": "simmate.toolkit.creators.vector.uniform_distribution", "qualname": "UniformlyDistributedVectors.new_vector", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion", "modulename": "simmate.toolkit.diffusion", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.diffusion.MigrationHop", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationHop", "type": "class", "doc": "<p>A convenience container representing a migration path.</p>\n", "bases": "pymatgen.analysis.diffusion.neb.pathfinder.MigrationHop"}, {"fullname": "simmate.toolkit.diffusion.MigrationHop.from_dynamic", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationHop.from_dynamic", "type": "function", "doc": "<p>This is an experimental feature. The code here is a repurposing of\nStructre.from_dynamic so consider making a general class for\nfrom_dynamic methods.</p>\n", "signature": "(cls, migration_hop)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationHop.from_database", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationHop.from_database", "type": "function", "doc": "<p>This is an experimental feature. The code here is a repurposing of\nStructre.from_dynamic so consider making a general class for\nfrom_dynamic methods.</p>\n\n<p>ex:\n    {\n        \"migration_hop_table\": \"MITMigrationHop\",\n        \"migration_hop_id\": 1,\n    }</p>\n", "signature": "(cls, migration_hop: dict)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages", "type": "class", "doc": "<p>This class is just a list of structures for a diffusion pathway. It has\nutility methods to help create these structures but otherwise behaves\nexactly like a python list.</p>\n\n<p>Note, this class is primarily used to generate inputs for calculations. If\nyou'd like more advanced features, you should represent your diffusion\npathway as a MigrationHop instead.As a rule of thumb: Only use this class\nif you are manually creating your pathway from endpoint supercells or from\na set of supercell images.</p>\n\n<p>All MigrationHop's can be converted to MigrationImages (using the\n<code>from_migration_hop</code> method); but not all MigrationImages can be converted\nto MigrationHops.</p>\n", "bases": "builtins.list"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages.__init__", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    structures: List[simmate.toolkit.base_data_types.structure.Structure]\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages.get_sum_structure", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages.get_sum_structure", "type": "function", "doc": "<p>Takes all structures and combines them into one. Atoms that are within\nthe given tolerance are joined into a single site.</p>\n\n<p>This is primarily used to view a diffusing pathway within a single\nstructure -- as well as how the host lattice changes during diffusion.\nIf you are able to convert your pathway to a MigrationHop, the\nMigrationHop.write_path() method is much faster and cleaner than this\nmethod, so it should be preffered. Also, because there are many atoms\nthat are overlapping here, the output structure may cause programs\nlike VESTA to crash.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>tolerance</code>:\nthe angle and distance tolerance to consider fractional coordinates\nas matching. Matching sites will be merged as 1 site in the final\nsum structure.</li>\n</ul>\n", "signature": "(self, tolerance: float = 0.001)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages.get_nimages", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages.get_nimages", "type": "function", "doc": "<p>Gives the desirable number of images (not including start/end structures).</p>\n\n<p>This method helps generate a MigrationImages object, and typically is\nnot called directly. The other classmethods of MigrationImages call\nthis for you.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>pathway_length</code>:\nThe length of the pathway.</p></li>\n<li><p><code>min_image_step</code>:\nThe minimum step distance for the diffusing atom between images.\nThe default is 0.7 Angstroms. For example, a path 2.8A long would\nrequire at least 4 images for this default.</p></li>\n<li><p><code>require_midpoint</code>:\nWhether there should be an image at the midpoint. In other words,\nwhether the number of images should be odd. This is often important\nif you expect the transition state to be at the midpoint and you are\nnot running CI-NEB. The default is True.</p></li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>nimages</code>:\nThe number of images to use for this pathway.</li>\n</ul>\n", "signature": "(\n    pathway_length: float,\n    min_image_step: float = 0.7,\n    require_midpoint: bool = True\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages.from_migration_hop", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages.from_migration_hop", "type": "function", "doc": "<p>Creates a MigrationImages object from a MigrationHop object</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>migration_hop</code>:\nThe MigrationHop object that should be converted.</p></li>\n<li><p><code>vacancy_mode</code>:\nWhether to use single-vacancy diffusion (True) or interstitial\ndiffusion (False). The default is True.</p></li>\n<li><p><code>min_nsites</code>:\nThe minimum number of sites to have in the supercell structure.\nThe default is 80.</p></li>\n<li><p><code>max_nsites</code>:\nThe maximum number of sites to have in the supercell structure.\nThe default is 240.</p></li>\n<li><p><code>min_length</code>:\nThe minimum length for each vector in the supercell structure.\nThe default is 10 Angstroms.</p></li>\n<li><p><code>**kwargs</code>:\nAny arguments that are normally accepted by IDPPSolver</p></li>\n</ul>\n", "signature": "(\n    cls,\n    migration_hop: pymatgen.analysis.diffusion.neb.pathfinder.MigrationHop,\n    vacancy_mode: bool = True,\n    min_nsites: int = 80,\n    max_nsites: int = 240,\n    min_length: int = 10,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages.from_endpoints", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages.from_endpoints", "type": "function", "doc": "<p>Creates a MigrationImages object from start and end supercell structures.\nYou do not need to specify the diffusing atom(s) as all sites are\nlinearly interpolated and then relaxed by IDPP.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>structure_start</code>:\nThe starting supercell of the diffusion pathway.</p></li>\n<li><p><code>structure_end</code>:\nThe ending supercell of the diffusion pathway.</p></li>\n<li><p><code>nimages</code>:\nThe number of desired images for the pathway. Note, if you know the\npathway length of your path, you can use the <code>get_nimages</code> static\nmethod to get a logical number of images.</p></li>\n<li><p><code>**kwargs</code>:\nAny arguments that are normally accepted by IDPPSolver</p></li>\n</ul>\n", "signature": "(\n    cls,\n    structure_start: simmate.toolkit.base_data_types.structure.Structure,\n    structure_end: simmate.toolkit.base_data_types.structure.Structure,\n    nimages: int,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages.from_startend_sites", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages.from_startend_sites", "type": "function", "doc": "<p>Creates a MigrationImages object from a bulk structure and start/end\nperiodic sites of the diffusing atom.</p>\n\n<p>For example, this would allow a diffusion pathway that goes from a site\nat (0,0,0) to (1,1,1). Thus, symmetry and periodic boundry conditions\nare considered.</p>\n\n<p>Note, this method just creates a MigrationHop and then uses the\n<code>from_migration_hop</code> method to make a MigrationImages object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>structure</code>:\nThe bulk crystal structure (NOT the supercell).</p></li>\n<li><p><code>site_start</code>:\nThe starting periodic site for this pathway.</p></li>\n<li><p><code>site_end</code>:\nThe end periodic site for this pathway.</p></li>\n<li><p><code>**kwargs</code>:\nAny arguments that are normally accepted by <code>from_migration_hop</code>.</p></li>\n</ul>\n", "signature": "(\n    cls,\n    structure: simmate.toolkit.base_data_types.structure.Structure,\n    site_start: int,\n    site_end: int,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages.from_structure", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages.from_structure", "type": "function", "doc": "<p>Given a bulk crystal structure, this will find all symmetrically\nunique pathways and return them as list of MigrationImages objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>structure</code>:\nThe bulk crystal structure (NOT the supercell).</p></li>\n<li><p><code>migrating_specie</code>:\nThe identity of the diffusing ion (e.g. \"Li\" or \"Li1+\"). Note, only\nprovide oxidation state if you are using an oxidation-state decorated\nstructure.</p></li>\n<li><p><code>pathfinder_kwargs</code>:\nAny arguments that are normally accepted by DistinctPathFinder, but\ngiven as a dictionary. The default is {}.</p></li>\n<li><p><code>**kwargs</code>:\nAny arguments that are normally accepted by <code>from_migration_hop</code>.</p></li>\n</ul>\n", "signature": "(\n    cls,\n    structure: simmate.toolkit.base_data_types.structure.Structure,\n    migrating_specie: str,\n    pathfinder_kwargs: dict = {},\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages.from_dynamic", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages.from_dynamic", "type": "function", "doc": "<p>This is an experimental feature. The code here is a repurposing of\nStructre.from_dynamic so consider making a general class for\nfrom_dynamic methods.</p>\n", "signature": "(cls, migration_images)", "funcdef": "def"}, {"fullname": "simmate.toolkit.diffusion.MigrationImages.as_dict", "modulename": "simmate.toolkit.diffusion", "qualname": "MigrationImages.as_dict", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers", "modulename": "simmate.toolkit.featurizers", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.featurizers.fingerprint", "modulename": "simmate.toolkit.featurizers.fingerprint", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint", "type": "class", "doc": "<p>Computes statistics of properties across all sites in a structure, and\nbreaks these down by element. This featurizer first uses a site featurizer\nclass (see site.py for options) to compute features of each site of a\nspecific element in a structure, and then computes features of the entire\nstructure by measuring statistics of each attribute.\nFeatures:\n    - Returns each statistic of each site feature, broken down by element</p>\n", "bases": "matminer.featurizers.base.BaseFeaturizer"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.__init__", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.__init__", "type": "function", "doc": "<p>Args:\n    site_featurizer (BaseFeaturizer): a site-based featurizer\n    stats ([str]): list of weighted statistics to compute for each feature.\n        If stats is None, a list is returned for each features\n        that contains the calculated feature for each site in the\n        structure.\n        <em>Note for nth mode, stat must be 'n</em>_mode'; e.g. stat='2nd_mode'\n    elements ([str]): list of elements to include. Default is all.\n    covariance (bool): Whether to compute the covariance of site features</p>\n", "signature": "(\n    self,\n    site_featurizer,\n    stats=('mean', 'std_dev'),\n    elements=None,\n    covariance=False\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.fit", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.fit", "type": "function", "doc": "<p>Define the list of elements to be included in the PRDF. By default,\nthe PRDF will include all of the elements in <code>X</code>\nArgs:\n    X: (numpy array nx1) structures used in the training set. Each entry\n        must be Pymatgen Structure objects.\n    y: <em>Not used</em>\n    fit_kwargs: <em>not used</em>\nReturns:\n    self</p>\n", "signature": "(self, X, y=None)", "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.featurize", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.featurize", "type": "function", "doc": "<p>Get PSSF of the input structure.\nArgs:\n    s: Pymatgen Structure object.\nReturns:\n    pssf: 1D array of each element's ssf</p>\n", "signature": "(self, s)", "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.compute_pssf", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.compute_pssf", "type": "function", "doc": "<p></p>\n", "signature": "(self, s, e)", "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.feature_labels", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.feature_labels", "type": "function", "doc": "<p>Generate attribute names.</p>\n\n<p>Returns:\n    ([str]) attribute labels.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.citations", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.citations", "type": "function", "doc": "<p>Citation(s) and reference(s) for this feature.</p>\n\n<p>Returns:\n    (list) each element should be a string citation,\n        ideally in BibTeX format.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.implementors", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.implementors", "type": "function", "doc": "<p>List of implementors of the feature.</p>\n\n<p>Returns:\n    (list) each element should either be a string with author name (e.g.,\n        \"Anubhav Jain\") or a dictionary  with required key \"name\" and other\n        keys like \"email\" or \"institution\" (e.g., {\"name\": \"Anubhav\n        Jain\", \"email\": \"ajain@lbl.gov\", \"institution\": \"LBNL\"}).</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.featurizers.fingerprint.PartialsSiteStatsFingerprint.from_preset", "modulename": "simmate.toolkit.featurizers.fingerprint", "qualname": "PartialsSiteStatsFingerprint.from_preset", "type": "function", "doc": "<p>Create a PartialsSiteStatsFingerprint class according to a preset\nArgs:\n    preset (str) - Name of preset\n    kwargs - Options for PartialsSiteStatsFingerprint</p>\n", "signature": "(preset, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction", "modulename": "simmate.toolkit.structure_prediction", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution", "modulename": "simmate.toolkit.structure_prediction.evolution", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch", "type": "class", "doc": "<p>This database table holds all of the information related to an evolutionary\nsearch and also has convient methods to analyze the data.</p>\n\n<h2 id=\"loading-results\">Loading Results</h2>\n\n<p>Typically, you'll load your search through a search id or a composition:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.shortcuts import SearchResults\n\n# if you know the id\nsearch_results = SearchResults.objects.get(id=123)\n\n# if you know the composition\nsearch_results = SearchResults.objects.get(id=\"Ca2 N1\")\n</code></pre>\n\n<p>Alternatively, you can find these out by looking at a table of all the\nevolutionary searches that have been ran:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>all_searches = SearchResults.objects.to_dataframe()\n</code></pre>\n\n<h2 id=\"viewing-results\">Viewing Results</h2>\n\n<p>The first thing you may want to check is the best structure found. To access\nthis and write it to a file:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code># loads the best structure and converts it to a pymatgen structure object\nstructure = search_results.best_individual.to_toolkit()\n\n# writes it to a cif file\nstructure.to(\"cif\", \"best_structure.cif\")\n</code></pre>\n\n<p>To view convergence of the search, you can use the convenient plotting methods.</p>\n\n<p>Note: this will open up the plot in your default browser, so this command\nwon't work properly through an ssh terminal.</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>search_results.view_convergence_plot()\n</code></pre>\n\n<p>If you are benchmarking Simmate to see if it found a particular structure,\nyou can use:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>from simmate.toolkit import Structure\n\nstructure = Structure.from_file(\"example123.cif\")\n\nsearch_results.view_correctness_plot(structure)\n</code></pre>\n\n<p>Beyond plots, you can also access a table of all calculated structures:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>dataframe = search_results.individuals_completed.to_dataframe()\n</code></pre>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.composition", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.composition", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.individuals_datatable_str", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.individuals_datatable_str", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.workflows", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.workflows", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.max_structures", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.max_structures", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.limit_best_survival", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.limit_best_survival", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.individuals_datatable", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.individuals_datatable", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.individuals", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.individuals", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.individuals_completed", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.individuals_completed", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.best_individual", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.best_individual", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.get_convergence_plot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.get_convergence_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.view_convergence_plot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.view_convergence_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.get_correctness_plot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.get_correctness_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self, structure_known)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.view_correctness_plot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.view_correctness_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self, structure_known)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.source", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.DoesNotExist", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.MultipleObjectsReturned", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.id", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.EvolutionarySearch.sources", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "EvolutionarySearch.sources", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource", "type": "class", "doc": "<p>StructureSource(id, source, name, is_steadystate, is_singleshot, settings, created_at, updated_at, prefect_flow_run_ids, search)</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.name", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.name", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.is_steadystate", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.is_steadystate", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.is_singleshot", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.is_singleshot", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.settings", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.settings", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.created_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.created_at", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.updated_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.updated_at", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.prefect_flow_run_ids", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.prefect_flow_run_ids", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.search", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.search", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.update_flow_run_ids", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.update_flow_run_ids", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.nprefect_flow_runs", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.nprefect_flow_runs", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.source", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.DoesNotExist", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.MultipleObjectsReturned", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.get_next_by_created_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.get_previous_by_created_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.get_next_by_updated_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.get_previous_by_updated_at", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.search_id", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.search_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.database.StructureSource.id", "modulename": "simmate.toolkit.structure_prediction.evolution.database", "qualname": "StructureSource.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.Selector", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors", "qualname": "Selector", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.Selector.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors", "qualname": "Selector.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.Selector.select", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors", "qualname": "Selector.select", "type": "function", "doc": "<p></p>\n", "signature": "(self, nselect, individuals, fitness_column)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.TruncatedSelection", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors", "qualname": "TruncatedSelection", "type": "class", "doc": "<p>Truncated selection limits the parent selection to the top X% of individuals,\nand then within this top section, every individual has an equal chance of\nbeing selected.</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.TruncatedSelection.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors", "qualname": "TruncatedSelection.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, percentile=0.05, ntruncate_min=5, allow_duplicate=True)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.selectors.TruncatedSelection.select", "modulename": "simmate.toolkit.structure_prediction.evolution.selectors", "qualname": "TruncatedSelection.select", "type": "function", "doc": "<p></p>\n", "signature": "(self, nselect, individuals, fitness_column)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "type": "module", "doc": "<p>Feel free to write your own StopCondition! It should follow the format shown here.</p>\n\n<p>-Jack</p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.StopCondition", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "qualname": "StopCondition", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.StopCondition.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "qualname": "StopCondition.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.StopCondition.check", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "qualname": "StopCondition.check", "type": "function", "doc": "<p></p>\n", "signature": "(self, search)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.BasicStopConditions", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "qualname": "BasicStopConditions", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.BasicStopConditions.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "qualname": "BasicStopConditions.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, max_structures=300, energy_limit=-999, same_min_structures=50)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.stop_conditions.BasicStopConditions.check", "modulename": "simmate.toolkit.structure_prediction.evolution.stop_conditions", "qualname": "BasicStopConditions.check", "type": "function", "doc": "<p></p>\n", "signature": "(self, search)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.TriggeredAction", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "TriggeredAction", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.TriggeredAction.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "TriggeredAction.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.TriggeredAction.check", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "TriggeredAction.check", "type": "function", "doc": "<p></p>\n", "signature": "(self, search)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.TriggeredAction.action", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "TriggeredAction.action", "type": "function", "doc": "<p></p>\n", "signature": "(self, search)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.TriggeredAction.from_composition", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "TriggeredAction.from_composition", "type": "function", "doc": "<p></p>\n", "signature": "(cls, composition=None, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.InitStructures", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "InitStructures", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.InitStructures.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "InitStructures.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, n_initial_structures)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.InitStructures.check", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "InitStructures.check", "type": "function", "doc": "<p></p>\n", "signature": "(self, search)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.InitStructures.action", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "InitStructures.action", "type": "function", "doc": "<p></p>\n", "signature": "(self, search)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.AddStructures", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "AddStructures", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.AddStructures.__init__", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "AddStructures.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, n_pending_limit, n_add_structures)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.AddStructures.check", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "AddStructures.check", "type": "function", "doc": "<p></p>\n", "signature": "(self, search)", "funcdef": "def"}, {"fullname": "simmate.toolkit.structure_prediction.evolution.triggered_actions.AddStructures.action", "modulename": "simmate.toolkit.structure_prediction.evolution.triggered_actions", "qualname": "AddStructures.action", "type": "function", "doc": "<p></p>\n", "signature": "(self, search)", "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry", "modulename": "simmate.toolkit.symmetry", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.symmetry.wyckoff", "modulename": "simmate.toolkit.symmetry.wyckoff", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.loadWyckoffData", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "loadWyckoffData", "type": "function", "doc": "<p>This function loads the csv file containing all wyckoff site data into\na pandas dataframe. One column that we need is not directly stored in\nthe csv file though - this is site \"Availablility\", which can be inferred\nfrom the \"Coordinates\" column. Therefore, this function generates the\n\"Availability\" column before returning the pandas dataframe.</p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.findValidWyckoffCombos", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "findValidWyckoffCombos", "type": "function", "doc": "<p>Given a composition's stoichiometry (such as [4,4,12] for Mg4Si4O12) and\na single spacegroup (1-230), this function will find all valid wyckoff\ncombinations that can produce that stoichiometry.</p>\n\n<p>stoich = a list of integers representing the target stoichiometry\nspacegroup = an integer for the target spacegroup\nwy_data = pandas dataframe with wyckoff data (DON'T EDIT THIS!)</p>\n\n<p>NOTE: don't change the wy_data input! It is set in the header instead of\nrunning inside the function for time performance reasons. By putting it\nin the header, calling findValidWyckoffCombos() repetitively will not\nrepetitively call loadWyckoffData() which yields a massive\nspeed improvement.</p>\n", "signature": "(\n    stoich,\n    spacegroup,\n    wy_data=      SpaceGroup  MultiplicityConventional  ...  Coordinates Availability\n0              1                         1  ...        x,y,z          inf\n1              2                         2  ...        x,y,z          inf\n2              2                         1  ...  1/2,1/2,1/2          1.0\n3              2                         1  ...    0,1/2,1/2          1.0\n4              2                         1  ...    1/2,0,1/2          1.0\n...          ...                       ...  ...          ...          ...\n1726         230                        32  ...        x,x,x          inf\n1727         230                        24  ...    3/8,0,1/4          1.0\n1728         230                        24  ...    1/8,0,1/4          1.0\n1729         230                        16  ...  1/8,1/8,1/8          1.0\n1730         230                        16  ...        0,0,0          1.0\n\n[1731 rows x 7 columns]\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.findValidWyckoffCombosForListofSpacegroups", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "findValidWyckoffCombosForListofSpacegroups", "type": "function", "doc": "<p>Find all wyckoff group combinations for specified list of spacegroups.\nThis function calls the findValidWyckoffCombos function repeatedly, so\nreally this is just a convience function.</p>\n\n<p>stoich = list of nsites for each element\n    (i.e. Mg4Si4O12 has stoich = [4,4,12])\nsg_include = list of spacegroups that we are interested in.\n    (default is all 230 spacegroups)\nsg_exclude = list of spacegroups that we should explicitly ignore</p>\n", "signature": "(stoich, sg_include=range(1, 231), sg_exclude=[])", "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.loadAsymmetricUnitData", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "loadAsymmetricUnitData", "type": "function", "doc": "<p>This function simply loads the csv file containing all asymmetric unit\ndata into a pandas dataframe. It then just grabs the column we need and\nturns it into a numpy array (for performance reasons) even though we lose\nthe spacegroup column - it's really just index+1 for each entry.</p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.toolkit.symmetry.wyckoff.loadSpecifiedUnitData", "modulename": "simmate.toolkit.symmetry.wyckoff", "qualname": "loadSpecifiedUnitData", "type": "function", "doc": "<p>THIS IS JUST A COPY/PASTE OF loadAsymmetricUnitData() WITH A DIFFERENT\nCOLUMN GRAB I NEED TO UPDATE THESE CSV FILES OR COMBINE THESE FUNCTIONS.</p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations", "modulename": "simmate.toolkit.transformations", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation", "modulename": "simmate.toolkit.transformations.atomic_permutation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation.AtomicPermutation", "modulename": "simmate.toolkit.transformations.atomic_permutation", "qualname": "AtomicPermutation", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation.AtomicPermutation.__init__", "modulename": "simmate.toolkit.transformations.atomic_permutation", "qualname": "AtomicPermutation.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, min_exchanges=1, max_exchanges=5)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation.AtomicPermutation.io_scale", "modulename": "simmate.toolkit.transformations.atomic_permutation", "qualname": "AtomicPermutation.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation.AtomicPermutation.ninput", "modulename": "simmate.toolkit.transformations.atomic_permutation", "qualname": "AtomicPermutation.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation.AtomicPermutation.use_multiprocessing", "modulename": "simmate.toolkit.transformations.atomic_permutation", "qualname": "AtomicPermutation.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation.AtomicPermutation.apply_transformation", "modulename": "simmate.toolkit.transformations.atomic_permutation", "qualname": "AtomicPermutation.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure, max_attempts=100)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation_ase", "modulename": "simmate.toolkit.transformations.atomic_permutation_ase", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation_ase.AtomicPermutationASE", "modulename": "simmate.toolkit.transformations.atomic_permutation_ase", "qualname": "AtomicPermutationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation_ase.AtomicPermutationASE.__init__", "modulename": "simmate.toolkit.transformations.atomic_permutation_ase", "qualname": "AtomicPermutationASE.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, composition, ratio_of_covalent_radii=0.1)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation_ase.AtomicPermutationASE.io_scale", "modulename": "simmate.toolkit.transformations.atomic_permutation_ase", "qualname": "AtomicPermutationASE.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation_ase.AtomicPermutationASE.ninput", "modulename": "simmate.toolkit.transformations.atomic_permutation_ase", "qualname": "AtomicPermutationASE.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation_ase.AtomicPermutationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.atomic_permutation_ase", "qualname": "AtomicPermutationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.atomic_permutation_ase.AtomicPermutationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.atomic_permutation_ase", "qualname": "AtomicPermutationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.base", "modulename": "simmate.toolkit.transformations.base", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "abc.ABC"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.io_type", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.io_type", "type": "variable", "doc": "<p>Should I do StructureTransformation, LatticeTransformation, and\nSiteTransformation subclasses? Here, io_type could be either\n'structure', 'lattice', or 'site' as to indicate the input.</p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.io_scale", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.io_scale", "type": "variable", "doc": "<p>The input/output type for the class.\nThis should be one of the following choices:\n    - one_to_one\n    - one_to_many\n    - many_to_one\n    - many_to_many # I have no examples of this yet</p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.use_multiprocessing", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.use_multiprocessing", "type": "variable", "doc": "<p>Whether or not this transformation can be done in parallel.\nSimply set to True or False.</p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.ninput", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.ninput", "type": "variable", "doc": "<p>Number of inputs required. For example, some transformations require\ntwo structures to be input. If one_to_* we know ninput = 1.</p>\n"}, {"fullname": "simmate.toolkit.transformations.base.Transformation.apply_transformation", "modulename": "simmate.toolkit.transformations.base", "qualname": "Transformation.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturation_ordered", "modulename": "simmate.toolkit.transformations.coordinate_perturation_ordered", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturation_ordered.CoordinateOrderedPerturbation", "modulename": "simmate.toolkit.transformations.coordinate_perturation_ordered", "qualname": "CoordinateOrderedPerturbation", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturation_ordered.CoordinateOrderedPerturbation.__init__", "modulename": "simmate.toolkit.transformations.coordinate_perturation_ordered", "qualname": "CoordinateOrderedPerturbation.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturation_ordered.CoordinateOrderedPerturbation.io_scale", "modulename": "simmate.toolkit.transformations.coordinate_perturation_ordered", "qualname": "CoordinateOrderedPerturbation.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturation_ordered.CoordinateOrderedPerturbation.ninput", "modulename": "simmate.toolkit.transformations.coordinate_perturation_ordered", "qualname": "CoordinateOrderedPerturbation.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturation_ordered.CoordinateOrderedPerturbation.use_multiprocessing", "modulename": "simmate.toolkit.transformations.coordinate_perturation_ordered", "qualname": "CoordinateOrderedPerturbation.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturation_ordered.CoordinateOrderedPerturbation.apply_transformation", "modulename": "simmate.toolkit.transformations.coordinate_perturation_ordered", "qualname": "CoordinateOrderedPerturbation.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure, max_attempts=100)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation", "modulename": "simmate.toolkit.transformations.coordinate_perturbation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation.CoordinatePerturbation", "modulename": "simmate.toolkit.transformations.coordinate_perturbation", "qualname": "CoordinatePerturbation", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation.CoordinatePerturbation.__init__", "modulename": "simmate.toolkit.transformations.coordinate_perturbation", "qualname": "CoordinatePerturbation.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, min_displace=0, max_displace=1)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation.CoordinatePerturbation.io_scale", "modulename": "simmate.toolkit.transformations.coordinate_perturbation", "qualname": "CoordinatePerturbation.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation.CoordinatePerturbation.ninput", "modulename": "simmate.toolkit.transformations.coordinate_perturbation", "qualname": "CoordinatePerturbation.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation.CoordinatePerturbation.use_multiprocessing", "modulename": "simmate.toolkit.transformations.coordinate_perturbation", "qualname": "CoordinatePerturbation.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation.CoordinatePerturbation.apply_transformation", "modulename": "simmate.toolkit.transformations.coordinate_perturbation", "qualname": "CoordinatePerturbation.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation_ase", "modulename": "simmate.toolkit.transformations.coordinate_perturbation_ase", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation_ase.CoordinatePerturbationASE", "modulename": "simmate.toolkit.transformations.coordinate_perturbation_ase", "qualname": "CoordinatePerturbationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation_ase.CoordinatePerturbationASE.__init__", "modulename": "simmate.toolkit.transformations.coordinate_perturbation_ase", "qualname": "CoordinatePerturbationASE.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, composition, ratio_of_covalent_radii=0.1)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation_ase.CoordinatePerturbationASE.io_scale", "modulename": "simmate.toolkit.transformations.coordinate_perturbation_ase", "qualname": "CoordinatePerturbationASE.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation_ase.CoordinatePerturbationASE.ninput", "modulename": "simmate.toolkit.transformations.coordinate_perturbation_ase", "qualname": "CoordinatePerturbationASE.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation_ase.CoordinatePerturbationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.coordinate_perturbation_ase", "qualname": "CoordinatePerturbationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.coordinate_perturbation_ase.CoordinatePerturbationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.coordinate_perturbation_ase", "qualname": "CoordinatePerturbationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.heredity_mutation_ase", "modulename": "simmate.toolkit.transformations.heredity_mutation_ase", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.heredity_mutation_ase.HeredityASE", "modulename": "simmate.toolkit.transformations.heredity_mutation_ase", "qualname": "HeredityASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.heredity_mutation_ase.HeredityASE.__init__", "modulename": "simmate.toolkit.transformations.heredity_mutation_ase", "qualname": "HeredityASE.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, composition, ratio_of_covalent_radii=0.1)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.heredity_mutation_ase.HeredityASE.io_scale", "modulename": "simmate.toolkit.transformations.heredity_mutation_ase", "qualname": "HeredityASE.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'many_to_one'"}, {"fullname": "simmate.toolkit.transformations.heredity_mutation_ase.HeredityASE.ninput", "modulename": "simmate.toolkit.transformations.heredity_mutation_ase", "qualname": "HeredityASE.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 2"}, {"fullname": "simmate.toolkit.transformations.heredity_mutation_ase.HeredityASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.heredity_mutation_ase", "qualname": "HeredityASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.heredity_mutation_ase.HeredityASE.apply_transformation", "modulename": "simmate.toolkit.transformations.heredity_mutation_ase", "qualname": "HeredityASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structures)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.lattice_strain", "modulename": "simmate.toolkit.transformations.lattice_strain", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.lattice_strain.LatticeStrain", "modulename": "simmate.toolkit.transformations.lattice_strain", "qualname": "LatticeStrain", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.lattice_strain.LatticeStrain.__init__", "modulename": "simmate.toolkit.transformations.lattice_strain", "qualname": "LatticeStrain.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, fixed_volume)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.lattice_strain.LatticeStrain.io_scale", "modulename": "simmate.toolkit.transformations.lattice_strain", "qualname": "LatticeStrain.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.lattice_strain.LatticeStrain.ninput", "modulename": "simmate.toolkit.transformations.lattice_strain", "qualname": "LatticeStrain.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.lattice_strain.LatticeStrain.use_multiprocessing", "modulename": "simmate.toolkit.transformations.lattice_strain", "qualname": "LatticeStrain.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.lattice_strain.LatticeStrain.apply_transformation", "modulename": "simmate.toolkit.transformations.lattice_strain", "qualname": "LatticeStrain.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure, max_attempts=100)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.lattice_strain_ase", "modulename": "simmate.toolkit.transformations.lattice_strain_ase", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.lattice_strain_ase.LatticeStrainASE", "modulename": "simmate.toolkit.transformations.lattice_strain_ase", "qualname": "LatticeStrainASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.lattice_strain_ase.LatticeStrainASE.__init__", "modulename": "simmate.toolkit.transformations.lattice_strain_ase", "qualname": "LatticeStrainASE.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, composition, ratio_of_covalent_radii=0.1)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.lattice_strain_ase.LatticeStrainASE.io_scale", "modulename": "simmate.toolkit.transformations.lattice_strain_ase", "qualname": "LatticeStrainASE.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.lattice_strain_ase.LatticeStrainASE.ninput", "modulename": "simmate.toolkit.transformations.lattice_strain_ase", "qualname": "LatticeStrainASE.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.lattice_strain_ase.LatticeStrainASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.lattice_strain_ase", "qualname": "LatticeStrainASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.lattice_strain_ase.LatticeStrainASE.apply_transformation", "modulename": "simmate.toolkit.transformations.lattice_strain_ase", "qualname": "LatticeStrainASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.mirror_mutation_ase", "modulename": "simmate.toolkit.transformations.mirror_mutation_ase", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.mirror_mutation_ase.MirrorMutationASE", "modulename": "simmate.toolkit.transformations.mirror_mutation_ase", "qualname": "MirrorMutationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.mirror_mutation_ase.MirrorMutationASE.__init__", "modulename": "simmate.toolkit.transformations.mirror_mutation_ase", "qualname": "MirrorMutationASE.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, composition, ratio_of_covalent_radii=0.1)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.mirror_mutation_ase.MirrorMutationASE.io_scale", "modulename": "simmate.toolkit.transformations.mirror_mutation_ase", "qualname": "MirrorMutationASE.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.mirror_mutation_ase.MirrorMutationASE.ninput", "modulename": "simmate.toolkit.transformations.mirror_mutation_ase", "qualname": "MirrorMutationASE.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.mirror_mutation_ase.MirrorMutationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.mirror_mutation_ase", "qualname": "MirrorMutationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.mirror_mutation_ase.MirrorMutationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.mirror_mutation_ase", "qualname": "MirrorMutationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.rotational_mutation_ase", "modulename": "simmate.toolkit.transformations.rotational_mutation_ase", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.rotational_mutation_ase.RotationalMutationASE", "modulename": "simmate.toolkit.transformations.rotational_mutation_ase", "qualname": "RotationalMutationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.rotational_mutation_ase.RotationalMutationASE.__init__", "modulename": "simmate.toolkit.transformations.rotational_mutation_ase", "qualname": "RotationalMutationASE.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, composition, ratio_of_covalent_radii=0.1)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.rotational_mutation_ase.RotationalMutationASE.io_scale", "modulename": "simmate.toolkit.transformations.rotational_mutation_ase", "qualname": "RotationalMutationASE.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.rotational_mutation_ase.RotationalMutationASE.ninput", "modulename": "simmate.toolkit.transformations.rotational_mutation_ase", "qualname": "RotationalMutationASE.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.rotational_mutation_ase.RotationalMutationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.rotational_mutation_ase", "qualname": "RotationalMutationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.rotational_mutation_ase.RotationalMutationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.rotational_mutation_ase", "qualname": "RotationalMutationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.soft_mutation_ase", "modulename": "simmate.toolkit.transformations.soft_mutation_ase", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.transformations.soft_mutation_ase.SoftMutationASE", "modulename": "simmate.toolkit.transformations.soft_mutation_ase", "qualname": "SoftMutationASE", "type": "class", "doc": "<p>This is an abstract base class (ABC) that shows you how to write your\nown Transformation class. It defines the requirements for you and raises\nerrors if you forgot to define something.</p>\n\n<h2 id=\"using-this-abstract-class-heres-an-example-subclass-that-you-could-write\">Using this abstract class, here's an example subclass that you could write</h2>\n\n<p>class SubClass(Transformation):\n    io_type = 'one_to_one'\n    ninput = 1\n    use_multiprocessing = False\n    def apply_transformation(self, structure):\n        # do some transform on the input</p>\n\n<h2 id=\"return-new_structure\">        return new_structure</h2>\n\n<h1 id=\"example-use\">example use</h1>\n\n<p>t = SubClass()</p>\n\n<h2 id=\"new_structure-tapply_transformationstructure\">new_structure = t.apply_transformation(structure)</h2>\n\n<p>This is an updated version of pymatgen's transformation class because they\ndo not support many_to_one or many_to_many:\npymatgen.transformations.transformation_abc\nsee https://pymatgen.org/pymatgen.transformations.transformation_abc.html</p>\n", "bases": "simmate.toolkit.transformations.base.Transformation"}, {"fullname": "simmate.toolkit.transformations.soft_mutation_ase.SoftMutationASE.__init__", "modulename": "simmate.toolkit.transformations.soft_mutation_ase", "qualname": "SoftMutationASE.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    composition,\n    ratio_of_covalent_radii=0.1,\n    bounds=[0.5, 2.0],\n    use_tags=False,\n    used_modes_file=None\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.transformations.soft_mutation_ase.SoftMutationASE.io_scale", "modulename": "simmate.toolkit.transformations.soft_mutation_ase", "qualname": "SoftMutationASE.io_scale", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'one_to_one'"}, {"fullname": "simmate.toolkit.transformations.soft_mutation_ase.SoftMutationASE.ninput", "modulename": "simmate.toolkit.transformations.soft_mutation_ase", "qualname": "SoftMutationASE.ninput", "type": "variable", "doc": "<p></p>\n", "default_value": " = 1"}, {"fullname": "simmate.toolkit.transformations.soft_mutation_ase.SoftMutationASE.use_multiprocessing", "modulename": "simmate.toolkit.transformations.soft_mutation_ase", "qualname": "SoftMutationASE.use_multiprocessing", "type": "variable", "doc": "<p></p>\n", "default_value": " = False"}, {"fullname": "simmate.toolkit.transformations.soft_mutation_ase.SoftMutationASE.apply_transformation", "modulename": "simmate.toolkit.transformations.soft_mutation_ase", "qualname": "SoftMutationASE.apply_transformation", "type": "function", "doc": "<p>The code that carries out the</p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.validators", "modulename": "simmate.toolkit.validators", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.base", "modulename": "simmate.toolkit.validators.base", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.base.Validator", "modulename": "simmate.toolkit.validators.base", "qualname": "Validator", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "simmate.toolkit.validators.base.Validator.check_structure", "modulename": "simmate.toolkit.validators.base", "qualname": "Validator.check_structure", "type": "function", "doc": "<p></p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.base.Validator.check_many_structures", "modulename": "simmate.toolkit.validators.base", "qualname": "Validator.check_many_structures", "type": "function", "doc": "<p></p>\n", "signature": "(self, structures, progressbar=True, mode='threads')", "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint", "modulename": "simmate.toolkit.validators.fingerprint", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn.PartialCrystalNNFingerprint", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "qualname": "PartialCrystalNNFingerprint", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn.PartialCrystalNNFingerprint.__init__", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "qualname": "PartialCrystalNNFingerprint.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    composition,\n    stat_options=['mean', 'std_dev', 'minimum', 'maximum'],\n    structure_pool=[],\n    add_unique_to_pool=True,\n    **crystalnn_options\n)", "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn.PartialCrystalNNFingerprint.check_structure", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "qualname": "PartialCrystalNNFingerprint.check_structure", "type": "function", "doc": "<p></p>\n", "signature": "(self, structure, tolerance=0.001)", "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.fingerprint.pcrystalnn.PartialCrystalNNFingerprint.update_fingerprint_database", "modulename": "simmate.toolkit.validators.fingerprint.pcrystalnn", "qualname": "PartialCrystalNNFingerprint.update_fingerprint_database", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.structure", "modulename": "simmate.toolkit.validators.structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistance", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistance", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "simmate.toolkit.validators.base.Validator"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistance.__init__", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistance.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, distance_cutoff)", "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistance.check_structure", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistance.check_structure", "type": "function", "doc": "<p></p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistanceMatrix", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistanceMatrix", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "simmate.toolkit.validators.base.Validator"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistanceMatrix.__init__", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistanceMatrix.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, composition, radius_method='ionic', packing_factor=0.5)", "funcdef": "def"}, {"fullname": "simmate.toolkit.validators.structure.SiteDistanceMatrix.check_structure", "modulename": "simmate.toolkit.validators.structure", "qualname": "SiteDistanceMatrix.check_structure", "type": "function", "doc": "<p></p>\n", "signature": "(self, structure)", "funcdef": "def"}, {"fullname": "simmate.utilities", "modulename": "simmate.utilities", "type": "module", "doc": "<p>This file hosts common functions that are used throughout Simmate</p>\n"}, {"fullname": "simmate.utilities.get_conda_env", "modulename": "simmate.utilities", "qualname": "get_conda_env", "type": "function", "doc": "<p>Grab the name of the activate conda environment and returns it as a string.\nIf there is no env, then an empty string is returned.</p>\n", "signature": "() -> str", "funcdef": "def"}, {"fullname": "simmate.utilities.get_doc_from_readme", "modulename": "simmate.utilities", "qualname": "get_doc_from_readme", "type": "function", "doc": "<p>Loads the docstring from a README.md file in the same directory.</p>\n\n<p>This is commonly used in __init__.py files because we like having our\ndocumentation isolated (so that github renders it).</p>\n\n<p>To use, simply pass the file property:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.utilities</span> <span class=\"kn\">import</span> <span class=\"n\">get_doc_from_readme</span>\n\n<span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"n\">get_doc_from_readme</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>This is an alternative to using \"include\" in rst files, which\n<a href=\"https://pdoc.dev/docs/pdoc.html#include-markdown-files\">pdoc recommends</a>.\nWe prefer this utility because it allows Spyder to load the docs -- although\nit's slower in production (bc of opening/closing files).</p>\n", "signature": "(file: str) -> str", "funcdef": "def"}, {"fullname": "simmate.utilities.get_directory", "modulename": "simmate.utilities", "qualname": "get_directory", "type": "function", "doc": "<p>Initializes a directory.</p>\n\n<p>There are many cases where the user can choose their working directory\nfor a calculation, and they may want to provide their directory in various\nformats. This includes... None, a string, or a TemporaryDirectory instance.\nBased on the input, this function does the following:</p>\n\n<ul>\n<li><code>None</code>:\n  returns the full path to a new folder inside python's\n  current working directory named \"simmate-task-<randomID>\"</li>\n<li><code>TemporaryDirectory</code>:\n  returns the full path to the given temp directory</li>\n<li><code>str</code>:\n  makes the directory if it doesnt exist and then returns the path</li>\n</ul>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>directory</code>:\nEither None, a path to the directory, or a tempdir. The default is None.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>directory</code>:\nThe path to the initialized directory as a string</li>\n</ul>\n", "signature": "(directory: Union[str, tempfile.TemporaryDirectory] = None) -> str", "funcdef": "def"}, {"fullname": "simmate.utilities.make_archive", "modulename": "simmate.utilities", "qualname": "make_archive", "type": "function", "doc": "<p>Compresses the directory to a zip file of the same name. After compressing,\nit then deletes the original directory.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>directory</code>:\nPath to the folder that should be archived</li>\n</ul>\n", "signature": "(directory: str)", "funcdef": "def"}, {"fullname": "simmate.utilities.archive_old_runs", "modulename": "simmate.utilities", "qualname": "archive_old_runs", "type": "function", "doc": "<p>Goes through a given directory and finds all \"simmate-task-\" folders that\nare older than a given time cutoff. Each of these folders is then compressed\nto a zip file and then the original folder is removed.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>directory</code>:\nbase directory that will contain folders to archive. Defaults to the\nworking directory.</li>\n<li><code>time_cutoff</code>:\nThe time (in seconds) required to determine whether a folder is old or not.\nIf the folder is considered old, then it will be archived and then deleted.\nThe default is 3 weeks.</li>\n</ul>\n", "signature": "(directory: str = '.', time_cutoff: float = 1814400)", "funcdef": "def"}, {"fullname": "simmate.utilities.empty_directory", "modulename": "simmate.utilities", "qualname": "empty_directory", "type": "function", "doc": "<p>Deletes all files and folders within a directory, except for those provided\nto the files_to_keep parameter.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>directory</code>:\nbase directory that should be emptied</li>\n<li><code>files_to_keep</code>:\nA list of file and folder names within the base directory that should\nnot be deleted. The default is [].</li>\n</ul>\n", "signature": "(directory: str, files_to_keep: List[str] = [])", "funcdef": "def"}, {"fullname": "simmate.utilities.get_chemical_subsystems", "modulename": "simmate.utilities", "qualname": "get_chemical_subsystems", "type": "function", "doc": "<p>Given a chemical system, this returns all chemical systems that are also\ncontained within it.</p>\n\n<p>For example, \"Y-C\" would return [\"Y\", \"C\", \"C-Y\"]. Note that the returned\nlist has elements of a given system in alphabetical order (i.e. it gives\n\"C-Y\" and not \"Y-C\")</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>chemical_system</code>:\nA chemical system of elements. Elements must be separated by dashes (-)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>subsystems</code>:\nA list of chemical systems that make up the input chemical system.</li>\n</ul>\n", "signature": "(chemical_system: str)", "funcdef": "def"}, {"fullname": "simmate.utilities.get_dask_client", "modulename": "simmate.utilities", "qualname": "get_dask_client", "type": "function", "doc": "<p>This is a convenience utility that grabs the client for the local Dask cluster\nif it exists -- and if not, creates a new cluster and returns the client for\nit.</p>\n\n<h2 id=\"paramters\">Paramters</h2>\n\n<ul>\n<li><code>**kwargs</code>:\nAny arguments normally accepted by dask.distributed.Client. The exception\nto this is the <code>preload</code> kwarg, which is not allowed.</li>\n</ul>\n", "signature": "(**kwargs)", "funcdef": "def"}, {"fullname": "simmate.utilities.dask_batch_submit", "modulename": "simmate.utilities", "qualname": "dask_batch_submit", "type": "function", "doc": "<p>Given a function and a list of inputs that should be iterated over, this\nsubmits all inputs to a Dask local cluster in batches.</p>\n\n<p>This function has very specific use-cases, such as when we are submitting</p>\n\n<blockquote>\n  <p>100,000 tasks and each task is unstable / writing to the database. Therefore,\n  you should test out Dask normally before trying this utility. Always give\n  preference to Dask's <code>client.map</code> method over this utility.</p>\n</blockquote>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>function</code>:\nFunction that each kwargs entry should be called with.</li>\n<li><code>kwargs_list</code>:\nA list of parameters that will each be submitted to function via\nfunction(*args).</li>\n<li><code>batch_size</code>:\nThe number of calls to submit at a time. No new jobs will be\nsubmitted until the entire preceeding batch completes.</li>\n<li><code>batch_timeout</code>:\nThe timelimit to wait for any given batch before cancelling the remaining\nruns. No error will be raised when jobs are cancelled. The default is\nno timelimit.</li>\n</ul>\n", "signature": "(\n    function: Callable,\n    args_list: List[dict],\n    batch_size: int,\n    batch_timeout: float = None\n)", "funcdef": "def"}, {"fullname": "simmate.visualization", "modulename": "simmate.visualization", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.visualization.structure", "modulename": "simmate.visualization.structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.visualization.structure.blender", "modulename": "simmate.visualization.structure.blender", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.visualization.structure.blender.make_blender_structure", "modulename": "simmate.visualization.structure.blender", "qualname": "make_blender_structure", "type": "function", "doc": "<p></p>\n", "signature": "(structure, filename='simmate_structure.blend')", "funcdef": "def"}, {"fullname": "simmate.visualization.structure.blender.serialize_structure_sites", "modulename": "simmate.visualization.structure.blender", "qualname": "serialize_structure_sites", "type": "function", "doc": "<p></p>\n", "signature": "(structure)", "funcdef": "def"}, {"fullname": "simmate.website", "modulename": "simmate.website", "type": "module", "doc": "<h1 id=\"the-simmate-website\">The Simmate Website</h1>\n\n<p>This module hosts everything for the website framework/interface. The folder/file structure of this module is the most rigid because it follows the Django opinionated format. The key thing that is moved/missing is the database ORM, which is instead located in the simmate.database module.</p>\n\n<h2 id=\"the-rest-api-for-simmate\">The REST API for Simmate</h2>\n\n<p><strong>This is only for experts! If you are trying to pull data from Simmate, then you should instead  use our <a href=\"https://github.com/jacksund/simmate/blob/main/tutorials/05_Search_the_database.md\">python introduced in the database tutorial</a>. Grabbing data directly from our REST API is really only for teams that can't use python or Simmate codes but still want to pull data. Also note that grabbing data via our REST API is heavily throttled, so this is not a good way to grab large amounts of data.</strong></p>\n\n<p>REST APIs are \"<strong>Re</strong>presentational <strong>s</strong>tate <strong>t</strong>ransfer (REST) methods a <strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterfaces (API)\". In simple terms, this is how we can access databases from a website url. For example, if I were to go to...</p>\n\n<pre><code>http://simmate.org/rest-api/jarvis/jvasp-90856/\n</code></pre>\n\n<p>... then that link would send me back the data relating to the <code>jvasp-90856</code> structure from the <a href=\"https://jarvis.nist.gov/\">JARVIS</a> database. REST APIs typically send the data back as a JSON file. Try clicking the link above to see what you get! It should look like this:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;http://127.0.0.1:8000/rest-api/jarvis/jvasp-90856/&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;structure_string&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Ti2 Cu2 Si2 As2....(truncated for clarity)&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;nsites&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;nelement&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;chemical_system&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;As-Cu-Si-Ti&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;density&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">5.956099100023135</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;molar_volume&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">9.0000223436959</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;spacegroup&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">129</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;formula_full&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Ti2 Cu2 Si2 As2&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;formula_reduced&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;TiCuSiAs&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;formula_anonymous&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;ABCD&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;formation_energy_per_atom&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">-0.42762</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;energy_above_hull&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">2103.442283333333</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This is super useful because we can grab data from any programming language we'd like -- python, javascript, c++, fortran, or even the command-line. The only requirement to use someone's REST API is that you have access to the internet! Once you load some data,\nwhat you do with the JSON output is up to you.</p>\n\n<p>We build Simmate's REST API using the <a href=\"https://www.django-rest-framework.org/\">django-rest-framework</a> python package, which takes very little to setup (that's why there are only two files here). We can also access some advanced filtering thanks to <a href=\"https://django-filter.readthedocs.io/en/stable/\">django-filter</a>. Let's look at some examples of filtering. In every example, we filter off results by adding a question-mark plus any criteria we'd like. For example, our final url will look like...\n<strong>www.simmate.org/rest-api/simmate/?some_property=some_target_value</strong></p>\n\n<h3 id=\"grabbing-structures-in-a-chemical-system\">Grabbing structures in a chemical system</h3>\n\n<p>First, let's grab all structures that are in the \"Li-Co-O\" system. Note that we need\nto be careful here and specify our elements in alphabetical order (Co-Li-O): <a href=\"http://127.0.0.1:8000/rest-api/materials-project/?chemical_system=Co-Li-O\">http://simmate.org/rest-api/simmate/?chemical_system=Co-Li-O</a>\nThis can be done with any field too (nsites, nelement, chemical_system, formula_anonymous, etc.).</p>\n\n<h3 id=\"grabbing-structures-that-meet-multiple-criteria\">Grabbing structures that meet multiple criteria</h3>\n\n<p>Now, let's chain multiple criteria together! We do this with the <strong>&amp;</strong> symbol. Let's limit our Li-Co-O search to just structures with spacegroup number 166: <a href=\"http://127.0.0.1:8000/rest-api/materials-project/?chemical_system=Co-Li-O&amp;space_group=166\">http://simmate.org/rest-api/simmate/?chemical_system=Co-Li-O&amp;space_group=166</a></p>\n\n<h3 id=\"using-conditional-filtering-criteria\">Using conditional filtering criteria</h3>\n\n<p>What if we now want to limit our search to structures below 50meV hull energy? Setting an exact value won't work for us anymore. Instead we now want to a search that says \"filter for structures that have energy_above_hull less than or equal to 50\". While our python client can handle this scenario with ease (by using \"__lte\" for \"less than or equal to\" --> we'd use energy_above_hull__lte=50), our REST API cannot yet handle this scenario. This would require more setup on our end, which we choose not to support because we want to limit when users access the REST API. If you are filtering off structures with diverse criteria OR need to pull a large number of structures, please use our <a href=\"\">python client</a> instead.</p>\n"}, {"fullname": "simmate.website.accounts", "modulename": "simmate.website.accounts", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.accounts.apps", "modulename": "simmate.website.accounts.apps", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.accounts.apps.AccountsConfig", "modulename": "simmate.website.accounts.apps", "qualname": "AccountsConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n", "bases": "django.apps.config.AppConfig"}, {"fullname": "simmate.website.accounts.apps.AccountsConfig.name", "modulename": "simmate.website.accounts.apps", "qualname": "AccountsConfig.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'simmate.website.accounts'"}, {"fullname": "simmate.website.accounts.urls", "modulename": "simmate.website.accounts.urls", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.accounts.views", "modulename": "simmate.website.accounts.views", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.accounts.views.register", "modulename": "simmate.website.accounts.views", "qualname": "register", "type": "function", "doc": "<p></p>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.website.accounts.views.profile", "modulename": "simmate.website.accounts.views", "qualname": "profile", "type": "function", "doc": "<p></p>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.website.accounts.views.loginstatus", "modulename": "simmate.website.accounts.views", "qualname": "loginstatus", "type": "function", "doc": "<p></p>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.website.core", "modulename": "simmate.website.core", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.core.asgi", "modulename": "simmate.website.core.asgi", "type": "module", "doc": "<p>ASGI config for project.</p>\n\n<p>It exposes the ASGI callable as a module-level variable named <code>application</code>.</p>\n\n<p>For more information on this file, see\nhttps://docs.djangoproject.com/en/3.0/howto/deployment/asgi/</p>\n"}, {"fullname": "simmate.website.core.urls", "modulename": "simmate.website.core.urls", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.core.views", "modulename": "simmate.website.core.views", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.core.views.home", "modulename": "simmate.website.core.views", "qualname": "home", "type": "function", "doc": "<p></p>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.website.core.views.extras", "modulename": "simmate.website.core.views", "qualname": "extras", "type": "function", "doc": "<p></p>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.website.core.wsgi", "modulename": "simmate.website.core.wsgi", "type": "module", "doc": "<p>WSGI config for project.</p>\n\n<p>It exposes the WSGI callable as a module-level variable named <code>application</code>.</p>\n\n<p>For more information on this file, see\nhttps://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/</p>\n"}, {"fullname": "simmate.website.prototypes", "modulename": "simmate.website.prototypes", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.apps", "modulename": "simmate.website.prototypes.apps", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.apps.PrototypesConfig", "modulename": "simmate.website.prototypes.apps", "qualname": "PrototypesConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n", "bases": "django.apps.config.AppConfig"}, {"fullname": "simmate.website.prototypes.apps.PrototypesConfig.name", "modulename": "simmate.website.prototypes.apps", "qualname": "PrototypesConfig.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'simmate.website.prototypes'"}, {"fullname": "simmate.website.prototypes.migrations", "modulename": "simmate.website.prototypes.migrations", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial", "modulename": "simmate.website.prototypes.migrations.0001_initial", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial.Migration", "modulename": "simmate.website.prototypes.migrations.0001_initial", "qualname": "Migration", "type": "class", "doc": "<p>The base class for all migrations.</p>\n\n<p>Migration files will import this from django.db.migrations.Migration\nand subclass it as a class called Migration. It will have one or more\nof the following attributes:</p>\n\n<ul>\n<li>operations: A list of Operation instances, probably from django.db.migrations.operations</li>\n<li>dependencies: A list of tuples of (app_path, migration_name)</li>\n<li>run_before: A list of tuples of (app_path, migration_name)</li>\n<li>replaces: A list of migration_names</li>\n</ul>\n\n<p>Note that all migrations come out of migrations and into the Loader or\nGraph as instances, having been initialized with their app label and name.</p>\n", "bases": "django.db.migrations.migration.Migration"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial.Migration.initial", "modulename": "simmate.website.prototypes.migrations.0001_initial", "qualname": "Migration.initial", "type": "variable", "doc": "<p></p>\n", "default_value": " = True"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial.Migration.dependencies", "modulename": "simmate.website.prototypes.migrations.0001_initial", "qualname": "Migration.dependencies", "type": "variable", "doc": "<p></p>\n", "default_value": " = [('workflows', '0001_initial')]"}, {"fullname": "simmate.website.prototypes.migrations.0001_initial.Migration.operations", "modulename": "simmate.website.prototypes.migrations.0001_initial", "qualname": "Migration.operations", "type": "variable", "doc": "<p></p>\n", "default_value": " = [<CreateModel  name='AflowPrototype', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('mineral_name', <django.db.models.fields.CharField>), ('aflow_id', <django.db.models.fields.CharField>), ('pearson_symbol', <django.db.models.fields.CharField>), ('strukturbericht', <django.db.models.fields.CharField>), ('nsites_wyckoff', <django.db.models.fields.IntegerField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)]>]"}, {"fullname": "simmate.website.prototypes.models", "modulename": "simmate.website.prototypes.models", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer", "modulename": "simmate.website.structure_viewer", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer.apps", "modulename": "simmate.website.structure_viewer.apps", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer.apps.StructureViewerConfig", "modulename": "simmate.website.structure_viewer.apps", "qualname": "StructureViewerConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n", "bases": "django.apps.config.AppConfig"}, {"fullname": "simmate.website.structure_viewer.apps.StructureViewerConfig.name", "modulename": "simmate.website.structure_viewer.apps", "qualname": "StructureViewerConfig.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'simmate.website.structure_viewer'"}, {"fullname": "simmate.website.structure_viewer.urls", "modulename": "simmate.website.structure_viewer.urls", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer.views", "modulename": "simmate.website.structure_viewer.views", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.structure_viewer.views.structure_viewer", "modulename": "simmate.website.structure_viewer.views", "qualname": "structure_viewer", "type": "function", "doc": "<p></p>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.website.test_app", "modulename": "simmate.website.test_app", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.apps", "modulename": "simmate.website.test_app.apps", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.apps.TestAppConfig", "modulename": "simmate.website.test_app.apps", "qualname": "TestAppConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n", "bases": "django.apps.config.AppConfig"}, {"fullname": "simmate.website.test_app.apps.TestAppConfig.name", "modulename": "simmate.website.test_app.apps", "qualname": "TestAppConfig.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'simmate.website.test_app'"}, {"fullname": "simmate.website.test_app.models", "modulename": "simmate.website.test_app.models", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable", "type": "class", "doc": "<p>TestDatabaseTable(id, source, column1, column2)</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable.base_info", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable.base_info", "type": "variable", "doc": "<p>The base information for this database table and only these fields are stored\nwhen the <code>to_archive</code> method is used. Using the columns in this list, all \nother columns for this table can be calculated, so the columns in this list \nare effectively the \"raw data\".</p>\n", "annotation": ": List[str]", "default_value": " = ['column1', 'column2']"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable.column1", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable.column1", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable.column2", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable.column2", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable.source", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable.id", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable.testdatabasetable2", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable.testdatabasetable2", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable2", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable2", "type": "class", "doc": "<p>TestDatabaseTable2(id, source, column1, column2, testdatabasetable_ptr, new_column3)</p>\n", "bases": "TestDatabaseTable"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable2.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable2.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "TestDatabaseTable.DoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable2.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable2.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "TestDatabaseTable.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable2.new_column3", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable2.new_column3", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable2.testdatabasetable_ptr_id", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable2.testdatabasetable_ptr_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestDatabaseTable2.testdatabasetable_ptr", "modulename": "simmate.website.test_app.models", "qualname": "TestDatabaseTable2.testdatabasetable_ptr", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestStructure", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure", "type": "class", "doc": "<p>TestStructure(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup)</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.website.test_app.models.TestStructure.structure_string", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.nsites", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.nelements", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.elements", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.chemical_system", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.density", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.density_atomic", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.volume", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.volume_molar", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.formula_full", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.formula_reduced", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.formula_anonymous", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.spacegroup", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.website.test_app.models.TestStructure.source", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStructure.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestStructure.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestStructure.spacegroup_id", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestStructure.id", "modulename": "simmate.website.test_app.models", "qualname": "TestStructure.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation", "type": "class", "doc": "<p>TestCalculation(id, source, directory, prefect_flow_run_id, created_at, updated_at, corrections)</p>\n", "bases": "simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.website.test_app.models.TestCalculation.directory", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.prefect_flow_run_id", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.corrections", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.source", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestCalculation.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestCalculation.get_next_by_created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.get_previous_by_created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.get_next_by_updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.get_previous_by_updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestCalculation.id", "modulename": "simmate.website.test_app.models", "qualname": "TestCalculation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces", "modulename": "simmate.website.test_app.models", "qualname": "TestForces", "type": "class", "doc": "<p>TestForces(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom)</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.forces.Forces"}, {"fullname": "simmate.website.test_app.models.TestForces.structure_string", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.nsites", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.nelements", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.elements", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.chemical_system", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.density", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.density_atomic", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.volume", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.volume_molar", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.formula_full", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.formula_reduced", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.formula_anonymous", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.spacegroup", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.website.test_app.models.TestForces.site_forces", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.lattice_stress", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.site_force_norm_max", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.site_forces_norm", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.site_forces_norm_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.lattice_stress_norm", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.lattice_stress_norm_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.source", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestForces.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestForces.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestForces.spacegroup_id", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestForces.id", "modulename": "simmate.website.test_app.models", "qualname": "TestForces.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics", "type": "class", "doc": "<p>TestThermodynamics(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom)</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.structure_string", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.nsites", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.nelements", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.elements", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.chemical_system", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.density", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.density_atomic", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.volume", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.volume_molar", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.formula_full", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.formula_reduced", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.formula_anonymous", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.spacegroup", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.energy", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.energy_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.energy_above_hull", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.is_stable", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.decomposes_to", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.formation_energy", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.formation_energy_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.source", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.spacegroup_id", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestThermodynamics.id", "modulename": "simmate.website.test_app.models", "qualname": "TestThermodynamics.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy", "type": "class", "doc": "<p>TestStaticEnergy(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum)</p>\n", "bases": "simmate.database.base_data_types.static_energy.StaticEnergy"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.band_gap", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.is_gap_direct", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.energy_fermi", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.conduction_band_minimum", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.valence_band_maximum", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.valence_band_maximum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.structure_string", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.nsites", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.nelements", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.elements", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.chemical_system", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.density", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.density_atomic", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.volume", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.volume_molar", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.formula_full", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.formula_reduced", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.formula_anonymous", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.spacegroup", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.energy", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.energy_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.energy_above_hull", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.is_stable", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.decomposes_to", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.formation_energy", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.formation_energy_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.site_forces", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.lattice_stress", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.site_force_norm_max", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.site_forces_norm", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.site_forces_norm_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.lattice_stress_norm", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.lattice_stress_norm_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.directory", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.prefect_flow_run_id", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.corrections", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.source", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.spacegroup_id", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.get_next_by_created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.get_previous_by_created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.get_next_by_updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.get_previous_by_updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestStaticEnergy.id", "modulename": "simmate.website.test_app.models", "qualname": "TestStaticEnergy.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation", "type": "class", "doc": "<p>TestRelaxation(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, band_gap, is_gap_direct, energy_fermi, conduction_band_minimum, valence_band_maximum, volume_change, structure_start, structure_final)</p>\n", "bases": "simmate.database.base_data_types.relaxation.Relaxation"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.band_gap", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.band_gap", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.is_gap_direct", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.is_gap_direct", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.energy_fermi", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.energy_fermi", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.conduction_band_minimum", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.conduction_band_minimum", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.valence_band_maximum", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.valence_band_maximum", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.volume_change", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.volume_change", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.structure_string", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.nsites", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.nelements", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.elements", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.chemical_system", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.density", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.density_atomic", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.volume", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.volume_molar", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.formula_full", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.formula_reduced", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.formula_anonymous", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.spacegroup", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.directory", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.prefect_flow_run_id", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.corrections", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.source", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.structure_start_id", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.structure_start_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.structure_start", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.structure_start", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.structure_final_id", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.structure_final_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.structure_final", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.structure_final", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.spacegroup_id", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.get_next_by_created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.get_previous_by_created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.get_next_by_updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.get_previous_by_updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.id", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestRelaxation.structures", "modulename": "simmate.website.test_app.models", "qualname": "TestRelaxation.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestIonicStep", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep", "type": "class", "doc": "<p>TestIonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, relaxation)</p>\n", "bases": "simmate.database.base_data_types.relaxation.IonicStep"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.number", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.number", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.structure_string", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.nsites", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.nelements", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.elements", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.chemical_system", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.density", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.density_atomic", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.volume", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.volume_molar", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.formula_full", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.formula_reduced", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.formula_anonymous", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.spacegroup", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.energy", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.energy_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.energy_above_hull", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.is_stable", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.decomposes_to", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.formation_energy", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.formation_energy_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.site_forces", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.lattice_stress", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.site_force_norm_max", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.site_forces_norm", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.site_forces_norm_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.lattice_stress_norm", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.source", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.relaxation_id", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.relaxation_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.relaxation", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.relaxation", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.spacegroup_id", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.id", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.relaxations_as_start", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.relaxations_as_start", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestIonicStep.relaxations_as_final", "modulename": "simmate.website.test_app.models", "qualname": "TestIonicStep.relaxations_as_final", "type": "variable", "doc": "<p>Accessor to the related object on the reverse side of a one-to-one\nrelation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Place.restaurant</code> is a <code>ReverseOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun", "type": "class", "doc": "<p>TestDynamicsRun(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, directory, prefect_flow_run_id, created_at, updated_at, corrections, temperature_start, temperature_end, time_step, nsteps)</p>\n", "bases": "simmate.database.base_data_types.dynamics.DynamicsRun"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.temperature_start", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.temperature_start", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.temperature_end", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.temperature_end", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.time_step", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.time_step", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.nsteps", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.nsteps", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.structure_string", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.nsites", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.nelements", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.elements", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.chemical_system", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.density", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.density_atomic", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.volume", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.volume_molar", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.formula_full", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.formula_reduced", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.formula_anonymous", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.spacegroup", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.directory", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.directory", "type": "function", "doc": "<p>This is the folder that the workflow was ran in. It will be something\nlike... \"/path/to/simmate-task-abc123\"</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.prefect_flow_run_id", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.prefect_flow_run_id", "type": "function", "doc": "<p>If this was submitted through Prefect, there is a lot more metadata available\nfor this calculation. Simmate does not store this data directly, but instead\nwe store the flow-run-id so that the user may look this up in the Prefect\ndatabase if they wish.\nAn example id is... d8a785e1-e344-463a-bede-0e7b3da7bab6</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.created_at", "type": "function", "doc": "<p>timestamping for when this was added to the database</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.updated_at", "type": "function", "doc": "<p>timestamping for when this was last updated</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.corrections", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.corrections", "type": "function", "doc": "<p>Simmate workflows often have ErrorHandlers that fix any issues while the\ncalaculation ran. This often involves changing settings, so we store\nany of those changes here.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.source", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.spacegroup_id", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.get_next_by_created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.get_next_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.get_previous_by_created_at", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.get_previous_by_created_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.get_next_by_updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.get_next_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.get_previous_by_updated_at", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.get_previous_by_updated_at", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.id", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsRun.structures", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsRun.structures", "type": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep", "type": "class", "doc": "<p>TestDynamicsIonicStep(id, source, structure_string, nsites, nelements, elements, chemical_system, density, density_atomic, volume, volume_molar, formula_full, formula_reduced, formula_anonymous, spacegroup, site_forces, lattice_stress, site_force_norm_max, site_forces_norm, site_forces_norm_per_atom, lattice_stress_norm, lattice_stress_norm_per_atom, energy, energy_per_atom, energy_above_hull, is_stable, decomposes_to, formation_energy, formation_energy_per_atom, number, temperature, dynamics_run)</p>\n", "bases": "simmate.database.base_data_types.dynamics.DynamicsIonicStep"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.number", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.number", "type": "function", "doc": "<p>Query-helper Info</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.temperature", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.temperature", "type": "function", "doc": "<p>Relationships</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.structure_string", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.structure_string", "type": "function", "doc": "<p>The core structure information, which is written to a string and in a \ncompressed format using the <code>from_toolkit</code> method. To get back to our toolkit\nstructure object, use the <code>to_toolkit</code> method.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.nsites", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.nsites", "type": "function", "doc": "<p>The total number of sites in the unitcell. (e.g. Y2CF2 has 5 sites)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.nelements", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.nelements", "type": "function", "doc": "<p>The total number of unique elements. (e.g. Y2CF2 has 3 elements)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.elements", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.elements", "type": "function", "doc": "<p>List of elements in the structure (ex: [\"Y\", \"C\", \"F\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.chemical_system", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.chemical_system", "type": "function", "doc": "<p>the base chemical system (ex: \"Y-C-F\")</p>\n\n<p>Note: be careful when searching for elements! Running chemical_system__contains=\"C\"\non this field won't do what you expect -- because it will return structures\ncontaining Ca, Cs, Ce, Cl, and so on. If you want to search for structures\nthat contain a specific element, use elements__contains='\"C\"' instead. The\nodd use of quotes '\"C\"' is required here!</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.density", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.density", "type": "function", "doc": "<p>The density of the crystal in g/cm^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.density_atomic", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.density_atomic", "type": "function", "doc": "<p>The density of atoms in the crystal in atoms/Angstom^3</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.volume", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.volume", "type": "function", "doc": "<p>The volume of the unitcell in Angstom^3</p>\n\n<p>Note: in most cases, <code>volume_molar</code> should be used instead! This is because\nvolumne is highly dependent on the symmetry and the arbitray unitcell. If \nyou are truly after small volumes of the unitcell, it is likely you really \njust want to search by spacegroup.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.volume_molar", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.volume_molar", "type": "function", "doc": "<p>The molar volume of the crystal in cm^3/mol</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.formula_full", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.formula_full", "type": "function", "doc": "<p>The chemical formula with elements sorted by electronegativity (ex: Li4 Fe4 P4 O16)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.formula_reduced", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.formula_reduced", "type": "function", "doc": "<p>The reduced chemical formula. (ex: Li4Fe4P4O16 --> LiFePO4)</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.formula_anonymous", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.formula_anonymous", "type": "function", "doc": "<p>An anonymized formula. Unique species are arranged in ordering of \namounts and assigned ascending alphabets. Useful for prototyping formulas. \nFor example, all stoichiometric perovskites have anonymized_formula ABC3.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.spacegroup", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.spacegroup", "type": "variable", "doc": "<p>Spacegroup information. Points to a separate database table that has additional\ncolumns:\n<code>simmate.database.base_data_types.symmetry.Spacegroup</code></p>\n"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.energy", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.energy", "type": "function", "doc": "<p>The calculated total energy. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.energy_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.energy_per_atom", "type": "function", "doc": "<p>The <code>energy</code> divided by <code>nsites</code>. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.energy_above_hull", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.energy_above_hull", "type": "function", "doc": "<p>The hull energy (aka \"stability\") of this structure compared to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.is_stable", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.is_stable", "type": "function", "doc": "<p>Whether <code>energy_above_hull</code> is 0 -- if so, this is considered stable.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.decomposes_to", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.decomposes_to", "type": "function", "doc": "<p>If <code>energy_above_hull</code> is above 0, these are the compositions that the \nstructure will decompose to (e.g. [\"Y2C\", \"C\", \"YF3\"])</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.formation_energy", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.formation_energy", "type": "function", "doc": "<p>The formation energy of the structure relative to all other\nstructures in this database table. Units are in eV.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.formation_energy_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.formation_energy_per_atom", "type": "function", "doc": "<p>The <code>formation_energy</code> divided by <code>nsites</code>.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.site_forces", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.site_forces", "type": "function", "doc": "<p>A list of forces for each atomic site (eV/AA). So this is a list like...</p>\n\n<pre><code>[site1, site2, site3, ...] \n</code></pre>\n\n<p>... where ...</p>\n\n<pre><code>site1=[force_x, force_y, force_z]\n</code></pre>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.lattice_stress", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.lattice_stress", "type": "function", "doc": "<p>The is 3x3 matrix that represents stress on the structure lattice</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.site_force_norm_max", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.site_force_norm_max", "type": "function", "doc": "<p>Reports the vector norm for the site with the highest forces on it</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.site_forces_norm", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.site_forces_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.site_forces_norm_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.site_forces_norm_per_atom", "type": "function", "doc": "<p>site_forces_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.lattice_stress_norm", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.lattice_stress_norm", "type": "function", "doc": "<p>Takes the site forces and reports the vector norm for it.</p>\n\n<p>See numpy.linalg.norm for how this is calculated.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.lattice_stress_norm_per_atom", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.lattice_stress_norm_per_atom", "type": "function", "doc": "<p>lattice_stress_norm divided by nsites</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.source", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.DoesNotExist", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.MultipleObjectsReturned", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.dynamics_run_id", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.dynamics_run_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.dynamics_run", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.dynamics_run", "type": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.spacegroup_id", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.spacegroup_id", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.test_app.models.TestDynamicsIonicStep.id", "modulename": "simmate.website.test_app.models", "qualname": "TestDynamicsIonicStep.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.website.third_parties", "modulename": "simmate.website.third_parties", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.apps", "modulename": "simmate.website.third_parties.apps", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.apps.ThirdPartyConfig", "modulename": "simmate.website.third_parties.apps", "qualname": "ThirdPartyConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n", "bases": "django.apps.config.AppConfig"}, {"fullname": "simmate.website.third_parties.apps.ThirdPartyConfig.name", "modulename": "simmate.website.third_parties.apps", "qualname": "ThirdPartyConfig.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'simmate.website.third_parties'"}, {"fullname": "simmate.website.third_parties.forms", "modulename": "simmate.website.third_parties.forms", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm", "type": "class", "doc": "<p>A collection of Fields, plus their associated data.</p>\n", "bases": "django.forms.forms.Form"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.include_subsystems", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.include_subsystems", "type": "variable", "doc": "<p>Whether to include subsystems of the given <code>chemical_system</code>. For example,\nthe subsystems of Y-C-F would be Y, C, F, Y-C, Y-F, etc..</p>\n"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.chemical_system", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.chemical_system", "type": "variable", "doc": "<p>The chemical system of the structure (e.g. \"Y-C-F\" or \"Na-Cl\")</p>\n"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.clean_chemical_system", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.clean_chemical_system", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.media", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.media", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.declared_fields", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.declared_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'include_subsystems': <django.forms.fields.BooleanField object>, 'chemical_system': <django.forms.fields.CharField object>, 'aflow': <django.forms.fields.BooleanField object>, 'cod': <django.forms.fields.BooleanField object>, 'jarvis': <django.forms.fields.BooleanField object>, 'materials_project': <django.forms.fields.BooleanField object>, 'simmate': <django.forms.fields.BooleanField object>, 'oqmd': <django.forms.fields.BooleanField object>}"}, {"fullname": "simmate.website.third_parties.forms.ChemicalSystemForm.base_fields", "modulename": "simmate.website.third_parties.forms", "qualname": "ChemicalSystemForm.base_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'include_subsystems': <django.forms.fields.BooleanField object>, 'chemical_system': <django.forms.fields.CharField object>, 'aflow': <django.forms.fields.BooleanField object>, 'cod': <django.forms.fields.BooleanField object>, 'jarvis': <django.forms.fields.BooleanField object>, 'materials_project': <django.forms.fields.BooleanField object>, 'simmate': <django.forms.fields.BooleanField object>, 'oqmd': <django.forms.fields.BooleanField object>}"}, {"fullname": "simmate.website.third_parties.migrations", "modulename": "simmate.website.third_parties.migrations", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial", "modulename": "simmate.website.third_parties.migrations.0001_initial", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial.Migration", "modulename": "simmate.website.third_parties.migrations.0001_initial", "qualname": "Migration", "type": "class", "doc": "<p>The base class for all migrations.</p>\n\n<p>Migration files will import this from django.db.migrations.Migration\nand subclass it as a class called Migration. It will have one or more\nof the following attributes:</p>\n\n<ul>\n<li>operations: A list of Operation instances, probably from django.db.migrations.operations</li>\n<li>dependencies: A list of tuples of (app_path, migration_name)</li>\n<li>run_before: A list of tuples of (app_path, migration_name)</li>\n<li>replaces: A list of migration_names</li>\n</ul>\n\n<p>Note that all migrations come out of migrations and into the Loader or\nGraph as instances, having been initialized with their app label and name.</p>\n", "bases": "django.db.migrations.migration.Migration"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial.Migration.initial", "modulename": "simmate.website.third_parties.migrations.0001_initial", "qualname": "Migration.initial", "type": "variable", "doc": "<p></p>\n", "default_value": " = True"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial.Migration.dependencies", "modulename": "simmate.website.third_parties.migrations.0001_initial", "qualname": "Migration.dependencies", "type": "variable", "doc": "<p></p>\n", "default_value": " = [('workflows', '0001_initial')]"}, {"fullname": "simmate.website.third_parties.migrations.0001_initial.Migration.operations", "modulename": "simmate.website.third_parties.migrations.0001_initial", "qualname": "Migration.operations", "type": "variable", "doc": "<p></p>\n", "default_value": " = [<CreateModel  name='OqmdStructure', fields=[('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('id', <django.db.models.fields.CharField>), ('formation_energy', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)]>, <CreateModel  name='MatProjStructure', fields=[('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('id', <django.db.models.fields.CharField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)]>, <CreateModel  name='JarvisStructure', fields=[('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('id', <django.db.models.fields.CharField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)]>, <CreateModel  name='CodStructure', fields=[('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('chemical_system', <django.db.models.fields.TextField>), ('formula_full', <django.db.models.fields.TextField>), ('formula_reduced', <django.db.models.fields.TextField>), ('formula_anonymous', <django.db.models.fields.TextField>), ('id', <django.db.models.fields.CharField>), ('is_ordered', <django.db.models.fields.BooleanField>), ('has_implicit_hydrogens', <django.db.models.fields.BooleanField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)]>, <CreateModel  name='AflowStructure', fields=[('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('id', <django.db.models.fields.CharField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)]>]"}, {"fullname": "simmate.website.third_parties.models", "modulename": "simmate.website.third_parties.models", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.templatetags", "modulename": "simmate.website.third_parties.templatetags", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.templatetags.chemical_formula_filter", "modulename": "simmate.website.third_parties.templatetags.chemical_formula_filter", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.templatetags.chemical_formula_filter.formula_to_html", "modulename": "simmate.website.third_parties.templatetags.chemical_formula_filter", "qualname": "formula_to_html", "type": "function", "doc": "<p>Converts a chemical formula to html format by wrapping numbers with a\nsubscript tag. For example, \"Y2CF2\" will be turned into \"Y<sub>2</sub>CF<sub>2</sub>\"\nso that it looks nice in a webpage</p>\n", "signature": "(formula_str)", "funcdef": "def"}, {"fullname": "simmate.website.third_parties.urls", "modulename": "simmate.website.third_parties.urls", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views", "modulename": "simmate.website.third_parties.views", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views.SpacegroupSerializer", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.SpacegroupSerializer.Meta", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views.SpacegroupSerializer.Meta.__init__", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.third_parties.views.SpacegroupSerializer.Meta.model", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupSerializer.Meta.model", "type": "class", "doc": "<p>Spacegroup(number, symbol, crystal_system, point_group)</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.third_parties.views.SpacegroupSerializer.Meta.fields", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n", "bases": "rest_framework.viewsets.ReadOnlyModelViewSet"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.queryset", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.queryset", "type": "variable", "doc": "<p></p>\n", "default_value": " = <SearchResults [<Spacegroup: Spacegroup object (1)>, <Spacegroup: Spacegroup object (2)>, <Spacegroup: Spacegroup object (3)>, <Spacegroup: Spacegroup object (4)>, <Spacegroup: Spacegroup object (5)>, <Spacegroup: Spacegroup object (6)>, <Spacegroup: Spacegroup object (7)>, <Spacegroup: Spacegroup object (8)>, <Spacegroup: Spacegroup object (9)>, <Spacegroup: Spacegroup object (10)>, <Spacegroup: Spacegroup object (11)>, <Spacegroup: Spacegroup object (12)>, <Spacegroup: Spacegroup object (13)>, <Spacegroup: Spacegroup object (14)>, <Spacegroup: Spacegroup object (15)>, <Spacegroup: Spacegroup object (16)>, <Spacegroup: Spacegroup object (17)>, <Spacegroup: Spacegroup object (18)>, <Spacegroup: Spacegroup object (19)>, <Spacegroup: Spacegroup object (20)>, '...(remaining elements truncated)...']>"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.serializer_class", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.filterset_fields", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'number': ['exact', 'range']}"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.template_name_detail", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.template_name_detail", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'test/template-detail'"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.template_name_list", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.template_name_list", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'test/template-list'"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.template_name", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.template_name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.name", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.description", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.description", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.suffix", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.suffix", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.detail", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.detail", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.SpacegroupViewSet.basename", "modulename": "simmate.website.third_parties.views", "qualname": "SpacegroupViewSet.basename", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.MatProjSerializer", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.MatProjSerializer.Meta", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views.MatProjSerializer.Meta.__init__", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.third_parties.views.MatProjSerializer.Meta.model", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjSerializer.Meta.model", "type": "class", "doc": "<p>Crystal structures from the <a href=\"https://materialsproject.org/\">Materials Project</a>\ndatabase.</p>\n\n<p>Currently, this table only stores strucure and thermodynamic information,\nbut the Materials Project has much more data available via their\n<a href=\"https://github.com/materialsproject/api\">REST API</a> and website.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics"}, {"fullname": "simmate.website.third_parties.views.MatProjSerializer.Meta.fields", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.MatProjViewSet", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n", "bases": "rest_framework.viewsets.ReadOnlyModelViewSet"}, {"fullname": "simmate.website.third_parties.views.MatProjViewSet.queryset", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjViewSet.queryset", "type": "variable", "doc": "<p></p>\n", "default_value": " = <SearchResults []>"}, {"fullname": "simmate.website.third_parties.views.MatProjViewSet.serializer_class", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.MatProjViewSet.filterset_fields", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.MatProjViewSet.name", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjViewSet.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.MatProjViewSet.description", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjViewSet.description", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.MatProjViewSet.suffix", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjViewSet.suffix", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.MatProjViewSet.detail", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjViewSet.detail", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.MatProjViewSet.basename", "modulename": "simmate.website.third_parties.views", "qualname": "MatProjViewSet.basename", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.JarvisSerializer", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.JarvisSerializer.Meta", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views.JarvisSerializer.Meta.__init__", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.third_parties.views.JarvisSerializer.Meta.model", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisSerializer.Meta.model", "type": "class", "doc": "<p>Crystal structures from the <a href=\"https://jarvis.nist.gov/\">JARVIS</a> database.</p>\n\n<p>Currently, this table only stores strucure and reported energy above hull.\nThe calculated energy is not reported, so the Thermodynamics mixin is not used.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.website.third_parties.views.JarvisSerializer.Meta.fields", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.JarvisViewSet", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n", "bases": "rest_framework.viewsets.ReadOnlyModelViewSet"}, {"fullname": "simmate.website.third_parties.views.JarvisViewSet.queryset", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisViewSet.queryset", "type": "variable", "doc": "<p></p>\n", "default_value": " = <SearchResults []>"}, {"fullname": "simmate.website.third_parties.views.JarvisViewSet.serializer_class", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.JarvisViewSet.filterset_fields", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.JarvisViewSet.name", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisViewSet.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.JarvisViewSet.description", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisViewSet.description", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.JarvisViewSet.suffix", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisViewSet.suffix", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.JarvisViewSet.detail", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisViewSet.detail", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.JarvisViewSet.basename", "modulename": "simmate.website.third_parties.views", "qualname": "JarvisViewSet.basename", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.AflowSerializer", "modulename": "simmate.website.third_parties.views", "qualname": "AflowSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.AflowSerializer.Meta", "modulename": "simmate.website.third_parties.views", "qualname": "AflowSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views.AflowSerializer.Meta.__init__", "modulename": "simmate.website.third_parties.views", "qualname": "AflowSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.third_parties.views.AflowSerializer.Meta.model", "modulename": "simmate.website.third_parties.views", "qualname": "AflowSerializer.Meta.model", "type": "class", "doc": "<p>Crystal structures from the <a href=\"http://aflowlib.org/\">AFLOW</a> database.</p>\n\n<p>Currently, this table only stores strucure and thermodynamic information,\nbut the AFLOW has much more data available via their\n<a href=\"http://aflowlib.duke.edu/aflowwiki/doku.php?id=documentation:start\">REST API</a>\nand website.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics"}, {"fullname": "simmate.website.third_parties.views.AflowSerializer.Meta.fields", "modulename": "simmate.website.third_parties.views", "qualname": "AflowSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.AflowViewSet", "modulename": "simmate.website.third_parties.views", "qualname": "AflowViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n", "bases": "rest_framework.viewsets.ReadOnlyModelViewSet"}, {"fullname": "simmate.website.third_parties.views.AflowViewSet.queryset", "modulename": "simmate.website.third_parties.views", "qualname": "AflowViewSet.queryset", "type": "variable", "doc": "<p></p>\n", "default_value": " = <SearchResults []>"}, {"fullname": "simmate.website.third_parties.views.AflowViewSet.serializer_class", "modulename": "simmate.website.third_parties.views", "qualname": "AflowViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.AflowViewSet.filterset_fields", "modulename": "simmate.website.third_parties.views", "qualname": "AflowViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.AflowViewSet.name", "modulename": "simmate.website.third_parties.views", "qualname": "AflowViewSet.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.AflowViewSet.description", "modulename": "simmate.website.third_parties.views", "qualname": "AflowViewSet.description", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.AflowViewSet.suffix", "modulename": "simmate.website.third_parties.views", "qualname": "AflowViewSet.suffix", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.AflowViewSet.detail", "modulename": "simmate.website.third_parties.views", "qualname": "AflowViewSet.detail", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.AflowViewSet.basename", "modulename": "simmate.website.third_parties.views", "qualname": "AflowViewSet.basename", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.OqmdSerializer", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.OqmdSerializer.Meta", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views.OqmdSerializer.Meta.__init__", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.third_parties.views.OqmdSerializer.Meta.model", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdSerializer.Meta.model", "type": "class", "doc": "<p>Crystal structures from the <a href=\"http://oqmd.org/\">OQMD</a> database.</p>\n\n<p>Currently, this table only stores strucure and thermodynamic information,\nbut OQDMD has much more data available via their\n<a href=\"http://oqmd.org/static/docs/restful.html\">REST API</a> and website.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.website.third_parties.views.OqmdSerializer.Meta.fields", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.OqmdViewSet", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n", "bases": "rest_framework.viewsets.ReadOnlyModelViewSet"}, {"fullname": "simmate.website.third_parties.views.OqmdViewSet.queryset", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdViewSet.queryset", "type": "variable", "doc": "<p></p>\n", "default_value": " = <SearchResults []>"}, {"fullname": "simmate.website.third_parties.views.OqmdViewSet.serializer_class", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.OqmdViewSet.filterset_fields", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.OqmdViewSet.name", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdViewSet.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.OqmdViewSet.description", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdViewSet.description", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.OqmdViewSet.suffix", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdViewSet.suffix", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.OqmdViewSet.detail", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdViewSet.detail", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.OqmdViewSet.basename", "modulename": "simmate.website.third_parties.views", "qualname": "OqmdViewSet.basename", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.CodSerializer", "modulename": "simmate.website.third_parties.views", "qualname": "CodSerializer", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.CodSerializer.Meta", "modulename": "simmate.website.third_parties.views", "qualname": "CodSerializer.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.third_parties.views.CodSerializer.Meta.__init__", "modulename": "simmate.website.third_parties.views", "qualname": "CodSerializer.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.third_parties.views.CodSerializer.Meta.model", "modulename": "simmate.website.third_parties.views", "qualname": "CodSerializer.Meta.model", "type": "class", "doc": "<p>Crystal structures from the <a href=\"http://www.crystallography.net/cod/\">COD</a> database.</p>\n\n<p>Currently, this table only stores the strucure, plus comments on whether the\nsturcture is ordered or has implicit hydrogens.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.website.third_parties.views.CodSerializer.Meta.fields", "modulename": "simmate.website.third_parties.views", "qualname": "CodSerializer.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.CodViewSet", "modulename": "simmate.website.third_parties.views", "qualname": "CodViewSet", "type": "class", "doc": "<p>A viewset that provides default <code>list()</code> and <code>retrieve()</code> actions.</p>\n", "bases": "rest_framework.viewsets.ReadOnlyModelViewSet"}, {"fullname": "simmate.website.third_parties.views.CodViewSet.queryset", "modulename": "simmate.website.third_parties.views", "qualname": "CodViewSet.queryset", "type": "variable", "doc": "<p></p>\n", "default_value": " = <SearchResults []>"}, {"fullname": "simmate.website.third_parties.views.CodViewSet.serializer_class", "modulename": "simmate.website.third_parties.views", "qualname": "CodViewSet.serializer_class", "type": "class", "doc": "<p>A type of <code>ModelSerializer</code> that uses hyperlinked relationships instead\nof primary key relationships. Specifically:</p>\n\n<ul>\n<li>A 'url' field is included instead of the 'id' field.</li>\n<li>Relationships to other instances are hyperlinks, instead of primary keys.</li>\n</ul>\n", "bases": "rest_framework.serializers.HyperlinkedModelSerializer"}, {"fullname": "simmate.website.third_parties.views.CodViewSet.filterset_fields", "modulename": "simmate.website.third_parties.views", "qualname": "CodViewSet.filterset_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = '__all__'"}, {"fullname": "simmate.website.third_parties.views.CodViewSet.name", "modulename": "simmate.website.third_parties.views", "qualname": "CodViewSet.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.CodViewSet.description", "modulename": "simmate.website.third_parties.views", "qualname": "CodViewSet.description", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.CodViewSet.suffix", "modulename": "simmate.website.third_parties.views", "qualname": "CodViewSet.suffix", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.CodViewSet.detail", "modulename": "simmate.website.third_parties.views", "qualname": "CodViewSet.detail", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.third_parties.views.CodViewSet.basename", "modulename": "simmate.website.third_parties.views", "qualname": "CodViewSet.basename", "type": "variable", "doc": "<p></p>\n", "default_value": " = None"}, {"fullname": "simmate.website.workflow_execution", "modulename": "simmate.website.workflow_execution", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.apps", "modulename": "simmate.website.workflow_execution.apps", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.apps.WorkflowExecutionConfig", "modulename": "simmate.website.workflow_execution.apps", "qualname": "WorkflowExecutionConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n", "bases": "django.apps.config.AppConfig"}, {"fullname": "simmate.website.workflow_execution.apps.WorkflowExecutionConfig.name", "modulename": "simmate.website.workflow_execution.apps", "qualname": "WorkflowExecutionConfig.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'simmate.website.workflow_execution'"}, {"fullname": "simmate.website.workflow_execution.migrations", "modulename": "simmate.website.workflow_execution.migrations", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial.Migration", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "qualname": "Migration", "type": "class", "doc": "<p>The base class for all migrations.</p>\n\n<p>Migration files will import this from django.db.migrations.Migration\nand subclass it as a class called Migration. It will have one or more\nof the following attributes:</p>\n\n<ul>\n<li>operations: A list of Operation instances, probably from django.db.migrations.operations</li>\n<li>dependencies: A list of tuples of (app_path, migration_name)</li>\n<li>run_before: A list of tuples of (app_path, migration_name)</li>\n<li>replaces: A list of migration_names</li>\n</ul>\n\n<p>Note that all migrations come out of migrations and into the Loader or\nGraph as instances, having been initialized with their app label and name.</p>\n", "bases": "django.db.migrations.migration.Migration"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial.Migration.initial", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "qualname": "Migration.initial", "type": "variable", "doc": "<p></p>\n", "default_value": " = True"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial.Migration.dependencies", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "qualname": "Migration.dependencies", "type": "variable", "doc": "<p></p>\n", "default_value": " = []"}, {"fullname": "simmate.website.workflow_execution.migrations.0001_initial.Migration.operations", "modulename": "simmate.website.workflow_execution.migrations.0001_initial", "qualname": "Migration.operations", "type": "variable", "doc": "<p></p>\n", "default_value": " = [<CreateModel  name='WorkItem', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('fxn', <django.db.models.fields.BinaryField>), ('args', <django.db.models.fields.BinaryField>), ('kwargs', <django.db.models.fields.BinaryField>), ('result', <django.db.models.fields.BinaryField>), ('status', <django.db.models.fields.CharField>)]>]"}, {"fullname": "simmate.website.workflow_execution.models", "modulename": "simmate.website.workflow_execution.models", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.urls", "modulename": "simmate.website.workflow_execution.urls", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.views", "modulename": "simmate.website.workflow_execution.views", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflow_execution.views.home", "modulename": "simmate.website.workflow_execution.views", "qualname": "home", "type": "function", "doc": "<p></p>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.website.workflows", "modulename": "simmate.website.workflows", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.apps", "modulename": "simmate.website.workflows.apps", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.apps.WorkflowsConfig", "modulename": "simmate.website.workflows.apps", "qualname": "WorkflowsConfig", "type": "class", "doc": "<p>Class representing a Django application and its configuration.</p>\n", "bases": "django.apps.config.AppConfig"}, {"fullname": "simmate.website.workflows.apps.WorkflowsConfig.name", "modulename": "simmate.website.workflows.apps", "qualname": "WorkflowsConfig.name", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'simmate.website.workflows'"}, {"fullname": "simmate.website.workflows.filters", "modulename": "simmate.website.workflows.filters", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.band_structure", "modulename": "simmate.website.workflows.filters.band_structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructure", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructure", "type": "class", "doc": "<p></p>\n", "bases": "django_filters.rest_framework.filterset.FilterSet"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructure.Meta", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructure.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructure.Meta.__init__", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructure.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructure.Meta.model", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructure.Meta.model", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructure.Meta.fields", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructure.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'nbands': ['exact', 'range'], 'band_gap': ['exact', 'range'], 'band_gap_direct': ['exact', 'range'], 'is_gap_direct': ['exact'], 'energy_fermi': ['range'], 'conduction_band_minimum': ['range'], 'valence_band_maximum': ['range'], 'is_metal': ['exact']}"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructure.declared_filters", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructure.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict()"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructure.base_filters", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructure.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('nbands', <django_filters.filters.NumberFilter object>), ('nbands__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('band_gap', <django_filters.filters.NumberFilter object>), ('band_gap__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('band_gap_direct', <django_filters.filters.NumberFilter object>), ('band_gap_direct__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_gap_direct', <django_filters.rest_framework.filters.BooleanFilter object>), ('energy_fermi__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('conduction_band_minimum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('valence_band_maximum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_metal', <django_filters.rest_framework.filters.BooleanFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructureCalc", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructureCalc", "type": "class", "doc": "<p></p>\n", "bases": "BandStructure, simmate.website.workflows.filters.calculation.Calculation, simmate.website.workflows.filters.structure.Structure"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructureCalc.Meta", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructureCalc.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructureCalc.Meta.__init__", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructureCalc.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructureCalc.Meta.model", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructureCalc.Meta.model", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.band_structure.BandStructure, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructureCalc.Meta.fields", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructureCalc.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact'], 'nbands': ['exact', 'range'], 'band_gap': ['exact', 'range'], 'band_gap_direct': ['exact', 'range'], 'is_gap_direct': ['exact'], 'energy_fermi': ['range'], 'conduction_band_minimum': ['range'], 'valence_band_maximum': ['range'], 'is_metal': ['exact'], 'directory': ['exact'], 'prefect_flow_run_id': ['exact'], 'created_at': ['range'], 'updated_at': ['range']}"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructureCalc.declared_filters", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructureCalc.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.band_structure.BandStructureCalc.base_filters", "modulename": "simmate.website.workflows.filters.band_structure", "qualname": "BandStructureCalc.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('nbands', <django_filters.filters.NumberFilter object>), ('nbands__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('band_gap', <django_filters.filters.NumberFilter object>), ('band_gap__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('band_gap_direct', <django_filters.filters.NumberFilter object>), ('band_gap_direct__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_gap_direct', <django_filters.rest_framework.filters.BooleanFilter object>), ('energy_fermi__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('conduction_band_minimum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('valence_band_maximum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_metal', <django_filters.rest_framework.filters.BooleanFilter object>), ('directory', <django_filters.filters.CharFilter object>), ('prefect_flow_run_id', <django_filters.filters.CharFilter object>), ('created_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('updated_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.base", "modulename": "simmate.website.workflows.filters.base", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter", "type": "class", "doc": "<p></p>\n", "bases": "django_filters.rest_framework.filterset.FilterSet"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter.Meta", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter.Meta.__init__", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter.Meta.table", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter.Meta.table", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter.Meta.fields", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {}"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter.get_mixins", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter.get_mixins", "type": "function", "doc": "<p>Grabs the mix-in Forms that were used to make this class. This will\nbe mix-ins like Structure, Forces, etc. from the\n<code>simmate.website.workflows.forms</code> module.</p>\n", "signature": "(cls)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter.get_mixin_names", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter.get_mixin_names", "type": "function", "doc": "<p></p>\n", "signature": "(cls)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter.get_extra_columns", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter.get_extra_columns", "type": "function", "doc": "<p>Finds all columns that aren't covered by the supported Form mix-ins.</p>\n\n<p>For example, a form made from the database table...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.database.base_data_types</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">table_column</span><span class=\"p\">,</span>\n    <span class=\"n\">Structure</span><span class=\"p\">,</span>\n    <span class=\"n\">Forces</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleTable</span><span class=\"p\">(</span><span class=\"n\">Structure</span><span class=\"p\">,</span> <span class=\"n\">Forces</span><span class=\"p\">):</span>\n    <span class=\"n\">custom_column1</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">()</span>\n    <span class=\"n\">custom_column2</span> <span class=\"o\">=</span> <span class=\"n\">table_column</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>... would return ...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"p\">[</span><span class=\"s2\">&quot;custom_column1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;custom_column2&quot;</span><span class=\"p\">]</span>\n</code></pre></div>\n", "signature": "(cls)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter.declared_filters", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict()"}, {"fullname": "simmate.website.workflows.filters.base.DatabaseTableFilter.base_filters", "modulename": "simmate.website.workflows.filters.base", "qualname": "DatabaseTableFilter.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict()"}, {"fullname": "simmate.website.workflows.filters.calculation", "modulename": "simmate.website.workflows.filters.calculation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.calculation.Calculation", "modulename": "simmate.website.workflows.filters.calculation", "qualname": "Calculation", "type": "class", "doc": "<p></p>\n", "bases": "django_filters.rest_framework.filterset.FilterSet"}, {"fullname": "simmate.website.workflows.filters.calculation.Calculation.Meta", "modulename": "simmate.website.workflows.filters.calculation", "qualname": "Calculation.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.calculation.Calculation.Meta.__init__", "modulename": "simmate.website.workflows.filters.calculation", "qualname": "Calculation.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.calculation.Calculation.Meta.model", "modulename": "simmate.website.workflows.filters.calculation", "qualname": "Calculation.Meta.model", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.workflows.filters.calculation.Calculation.Meta.fields", "modulename": "simmate.website.workflows.filters.calculation", "qualname": "Calculation.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'directory': ['exact'], 'prefect_flow_run_id': ['exact'], 'created_at': ['range'], 'updated_at': ['range']}"}, {"fullname": "simmate.website.workflows.filters.calculation.Calculation.declared_filters", "modulename": "simmate.website.workflows.filters.calculation", "qualname": "Calculation.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict()"}, {"fullname": "simmate.website.workflows.filters.calculation.Calculation.base_filters", "modulename": "simmate.website.workflows.filters.calculation", "qualname": "Calculation.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('directory', <django_filters.filters.CharFilter object>), ('prefect_flow_run_id', <django_filters.filters.CharFilter object>), ('created_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('updated_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.density_of_states", "modulename": "simmate.website.workflows.filters.density_of_states", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStates", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStates", "type": "class", "doc": "<p></p>\n", "bases": "django_filters.rest_framework.filterset.FilterSet"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStates.Meta", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStates.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStates.Meta.__init__", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStates.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStates.Meta.model", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStates.Meta.model", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStates.Meta.fields", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStates.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'band_gap': ['exact', 'range'], 'energy_fermi': ['range'], 'conduction_band_minimum': ['range'], 'valence_band_maximum': ['range']}"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStates.declared_filters", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStates.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict()"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStates.base_filters", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStates.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('band_gap', <django_filters.filters.NumberFilter object>), ('band_gap__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_fermi__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('conduction_band_minimum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('valence_band_maximum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStatesCalc", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStatesCalc", "type": "class", "doc": "<p></p>\n", "bases": "DensityofStates, simmate.website.workflows.filters.calculation.Calculation, simmate.website.workflows.filters.structure.Structure"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStatesCalc.Meta", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStatesCalc.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStatesCalc.Meta.__init__", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStatesCalc.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStatesCalc.Meta.model", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStatesCalc.Meta.model", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.density_of_states.DensityofStates, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStatesCalc.Meta.fields", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStatesCalc.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact'], 'band_gap': ['exact', 'range'], 'energy_fermi': ['range'], 'conduction_band_minimum': ['range'], 'valence_band_maximum': ['range'], 'directory': ['exact'], 'prefect_flow_run_id': ['exact'], 'created_at': ['range'], 'updated_at': ['range']}"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStatesCalc.declared_filters", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStatesCalc.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.density_of_states.DensityofStatesCalc.base_filters", "modulename": "simmate.website.workflows.filters.density_of_states", "qualname": "DensityofStatesCalc.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('band_gap', <django_filters.filters.NumberFilter object>), ('band_gap__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_fermi__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('conduction_band_minimum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('valence_band_maximum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('directory', <django_filters.filters.CharFilter object>), ('prefect_flow_run_id', <django_filters.filters.CharFilter object>), ('created_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('updated_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.dynamics", "modulename": "simmate.website.workflows.filters.dynamics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsRun", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsRun", "type": "class", "doc": "<p></p>\n", "bases": "simmate.website.workflows.filters.structure.Structure, simmate.website.workflows.filters.calculation.Calculation"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsRun.Meta", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsRun.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsRun.Meta.__init__", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsRun.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsRun.Meta.model", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsRun.Meta.model", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsRun.Meta.fields", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsRun.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'temperature_start': ['exact', 'range'], 'temperature_end': ['exact', 'range'], 'time_step': ['exact', 'range'], 'nsteps': ['exact', 'range'], 'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact'], 'directory': ['exact'], 'prefect_flow_run_id': ['exact'], 'created_at': ['range'], 'updated_at': ['range']}"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsRun.declared_filters", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsRun.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsRun.base_filters", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsRun.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('temperature_start', <django_filters.filters.NumberFilter object>), ('temperature_start__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('temperature_end', <django_filters.filters.NumberFilter object>), ('temperature_end__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('time_step', <django_filters.filters.NumberFilter object>), ('time_step__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nsteps', <django_filters.filters.NumberFilter object>), ('nsteps__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('directory', <django_filters.filters.CharFilter object>), ('prefect_flow_run_id', <django_filters.filters.CharFilter object>), ('created_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('updated_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsIonicStep", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsIonicStep", "type": "class", "doc": "<p></p>\n", "bases": "simmate.website.workflows.filters.structure.Structure, simmate.website.workflows.filters.forces.Forces, simmate.website.workflows.filters.thermodynamics.Thermodynamics"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsIonicStep.Meta", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsIonicStep.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsIonicStep.Meta.__init__", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsIonicStep.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsIonicStep.Meta.model", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsIonicStep.Meta.model", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics, simmate.database.base_data_types.forces.Forces"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsIonicStep.Meta.fields", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsIonicStep.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'number': ['exact', 'range'], 'temperature': ['exact', 'range'], 'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact'], 'energy': ['range'], 'energy_per_atom': ['range'], 'energy_above_hull': ['exact', 'range'], 'is_stable': ['exact'], 'formation_energy': ['range'], 'formation_energy_per_atom': ['range'], 'site_force_norm_max': ['range'], 'site_forces_norm_per_atom': ['range'], 'lattice_stress_norm': ['range'], 'lattice_stress_norm_per_atom': ['range']}"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsIonicStep.declared_filters", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsIonicStep.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.dynamics.DynamicsIonicStep.base_filters", "modulename": "simmate.website.workflows.filters.dynamics", "qualname": "DynamicsIonicStep.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('number', <django_filters.filters.NumberFilter object>), ('number__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('temperature', <django_filters.filters.NumberFilter object>), ('temperature__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('energy__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_above_hull', <django_filters.filters.NumberFilter object>), ('energy_above_hull__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_stable', <django_filters.rest_framework.filters.BooleanFilter object>), ('formation_energy__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('formation_energy_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('site_force_norm_max__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('site_forces_norm_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('lattice_stress_norm__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('lattice_stress_norm_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.forces", "modulename": "simmate.website.workflows.filters.forces", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.forces.Forces", "modulename": "simmate.website.workflows.filters.forces", "qualname": "Forces", "type": "class", "doc": "<p></p>\n", "bases": "django_filters.rest_framework.filterset.FilterSet"}, {"fullname": "simmate.website.workflows.filters.forces.Forces.Meta", "modulename": "simmate.website.workflows.filters.forces", "qualname": "Forces.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.forces.Forces.Meta.__init__", "modulename": "simmate.website.workflows.filters.forces", "qualname": "Forces.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.forces.Forces.Meta.model", "modulename": "simmate.website.workflows.filters.forces", "qualname": "Forces.Meta.model", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.workflows.filters.forces.Forces.Meta.fields", "modulename": "simmate.website.workflows.filters.forces", "qualname": "Forces.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'site_force_norm_max': ['range'], 'site_forces_norm_per_atom': ['range'], 'lattice_stress_norm': ['range'], 'lattice_stress_norm_per_atom': ['range']}"}, {"fullname": "simmate.website.workflows.filters.forces.Forces.declared_filters", "modulename": "simmate.website.workflows.filters.forces", "qualname": "Forces.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict()"}, {"fullname": "simmate.website.workflows.filters.forces.Forces.base_filters", "modulename": "simmate.website.workflows.filters.forces", "qualname": "Forces.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('site_force_norm_max__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('site_forces_norm_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('lattice_stress_norm__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('lattice_stress_norm_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.DiffusionAnalysis", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "DiffusionAnalysis", "type": "class", "doc": "<p></p>\n", "bases": "simmate.website.workflows.filters.structure.Structure"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.DiffusionAnalysis.Meta", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "DiffusionAnalysis.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.DiffusionAnalysis.Meta.__init__", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "DiffusionAnalysis.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.DiffusionAnalysis.Meta.model", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "DiffusionAnalysis.Meta.model", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.DiffusionAnalysis.Meta.fields", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "DiffusionAnalysis.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'migrating_specie': ['exact'], 'vacancy_mode': ['exact'], 'atomic_fraction': ['exact', 'range'], 'barrier_cell': ['range'], 'npaths_involved': ['exact', 'range'], 'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact']}"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.DiffusionAnalysis.declared_filters", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "DiffusionAnalysis.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.DiffusionAnalysis.base_filters", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "DiffusionAnalysis.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('migrating_specie', <django_filters.filters.CharFilter object>), ('vacancy_mode', <django_filters.rest_framework.filters.BooleanFilter object>), ('atomic_fraction', <django_filters.filters.NumberFilter object>), ('atomic_fraction__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('barrier_cell__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('npaths_involved', <django_filters.filters.NumberFilter object>), ('npaths_involved__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationHop", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationHop", "type": "class", "doc": "<p></p>\n", "bases": "django_filters.rest_framework.filterset.FilterSet"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationHop.Meta", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationHop.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationHop.Meta.__init__", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationHop.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationHop.Meta.model", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationHop.Meta.model", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationHop.Meta.fields", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationHop.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'site_start': ['exact', 'range'], 'site_end': ['exact', 'range'], 'number': ['exact', 'range'], 'length': ['exact', 'range'], 'dimension_path': ['exact', 'range'], 'dimension_host_lattice': ['exact', 'range'], 'energy_barrier': ['exact', 'range']}"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationHop.declared_filters", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationHop.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict()"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationHop.base_filters", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationHop.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('site_start', <django_filters.filters.CharFilter object>), ('site_start__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('site_end', <django_filters.filters.CharFilter object>), ('site_end__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('number', <django_filters.filters.NumberFilter object>), ('number__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('length', <django_filters.filters.NumberFilter object>), ('length__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('dimension_path', <django_filters.filters.NumberFilter object>), ('dimension_path__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('dimension_host_lattice', <django_filters.filters.NumberFilter object>), ('dimension_host_lattice__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_barrier', <django_filters.filters.NumberFilter object>), ('energy_barrier__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationImage", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationImage", "type": "class", "doc": "<p></p>\n", "bases": "simmate.website.workflows.filters.structure.Structure"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationImage.Meta", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationImage.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationImage.Meta.__init__", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationImage.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationImage.Meta.model", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationImage.Meta.model", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.structure.Structure"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationImage.Meta.fields", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationImage.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'number': ['exact'], 'force_tangent': ['range'], 'energy': ['range'], 'structure_distance': ['range'], 'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact']}"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationImage.declared_filters", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationImage.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.nudged_elastic_band.MigrationImage.base_filters", "modulename": "simmate.website.workflows.filters.nudged_elastic_band", "qualname": "MigrationImage.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('number', <django_filters.filters.NumberFilter object>), ('force_tangent__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('structure_distance__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.relaxation", "modulename": "simmate.website.workflows.filters.relaxation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.relaxation.Relaxation", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "Relaxation", "type": "class", "doc": "<p></p>\n", "bases": "simmate.website.workflows.filters.structure.Structure, simmate.website.workflows.filters.calculation.Calculation"}, {"fullname": "simmate.website.workflows.filters.relaxation.Relaxation.Meta", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "Relaxation.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.relaxation.Relaxation.Meta.__init__", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "Relaxation.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.relaxation.Relaxation.Meta.model", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "Relaxation.Meta.model", "type": "class", "doc": "<p>This table holds all data from a structure relaxation and also links to\nIonicStep table which holds all of the structure/energy/forces for each\nionic step.</p>\n\n<p>WARNING: The Structure stored in this table here is the source structure!\nIf you want the final structure, be sure to grab it from the\n<code>structure_final</code> attribute (which is the final IonicStep).</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.website.workflows.filters.relaxation.Relaxation.Meta.fields", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "Relaxation.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'volume_change': ['range'], 'band_gap': ['exact', 'range'], 'is_gap_direct': ['exact'], 'energy_fermi': ['range'], 'conduction_band_minimum': ['range'], 'valence_band_maximum': ['range'], 'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact'], 'directory': ['exact'], 'prefect_flow_run_id': ['exact'], 'created_at': ['range'], 'updated_at': ['range']}"}, {"fullname": "simmate.website.workflows.filters.relaxation.Relaxation.declared_filters", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "Relaxation.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.relaxation.Relaxation.base_filters", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "Relaxation.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('volume_change__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('band_gap', <django_filters.filters.NumberFilter object>), ('band_gap__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_gap_direct', <django_filters.rest_framework.filters.BooleanFilter object>), ('energy_fermi__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('conduction_band_minimum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('valence_band_maximum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('directory', <django_filters.filters.CharFilter object>), ('prefect_flow_run_id', <django_filters.filters.CharFilter object>), ('created_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('updated_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.relaxation.IonicStep", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "IonicStep", "type": "class", "doc": "<p></p>\n", "bases": "simmate.website.workflows.filters.structure.Structure, simmate.website.workflows.filters.forces.Forces, simmate.website.workflows.filters.thermodynamics.Thermodynamics"}, {"fullname": "simmate.website.workflows.filters.relaxation.IonicStep.Meta", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "IonicStep.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.relaxation.IonicStep.Meta.__init__", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "IonicStep.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.relaxation.IonicStep.Meta.model", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "IonicStep.Meta.model", "type": "class", "doc": "<p>This database table that holds the data for each ionic step of a relaxation.</p>\n\n<p>An ionic step can be viewed as a static energy calculation, but we keep these\nresults separate because:</p>\n\n<pre><code>1. Pulay stress can make these energies/forces inaccurate\n2. These results each have an associated Relaxation and ionic step number\n</code></pre>\n\n<p>You will likely never access this table directly. Instead, data is better\naccessed through the <code>structures</code> attribute on appropiate Relaxation table.</p>\n\n<p>For example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.database.workflow_results</span> <span class=\"kn\">import</span> <span class=\"n\">MITRelaxation</span>\n\n<span class=\"c1\"># grab your desired relaxation</span>\n<span class=\"n\">relax</span> <span class=\"o\">=</span> <span class=\"n\">MITRelaxation</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># grab the associated ionic steps</span>\n<span class=\"n\">ionic_steps</span> <span class=\"o\">=</span> <span class=\"n\">relax</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</code></pre></div>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics, simmate.database.base_data_types.forces.Forces"}, {"fullname": "simmate.website.workflows.filters.relaxation.IonicStep.Meta.fields", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "IonicStep.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact'], 'energy': ['range'], 'energy_per_atom': ['range'], 'energy_above_hull': ['exact', 'range'], 'is_stable': ['exact'], 'formation_energy': ['range'], 'formation_energy_per_atom': ['range'], 'site_force_norm_max': ['range'], 'site_forces_norm_per_atom': ['range'], 'lattice_stress_norm': ['range'], 'lattice_stress_norm_per_atom': ['range']}"}, {"fullname": "simmate.website.workflows.filters.relaxation.IonicStep.declared_filters", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "IonicStep.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.relaxation.IonicStep.base_filters", "modulename": "simmate.website.workflows.filters.relaxation", "qualname": "IonicStep.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('energy__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_above_hull', <django_filters.filters.NumberFilter object>), ('energy_above_hull__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_stable', <django_filters.rest_framework.filters.BooleanFilter object>), ('formation_energy__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('formation_energy_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('site_force_norm_max__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('site_forces_norm_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('lattice_stress_norm__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('lattice_stress_norm_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.static_energy", "modulename": "simmate.website.workflows.filters.static_energy", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.static_energy.StaticEnergy", "modulename": "simmate.website.workflows.filters.static_energy", "qualname": "StaticEnergy", "type": "class", "doc": "<p></p>\n", "bases": "simmate.website.workflows.filters.structure.Structure, simmate.website.workflows.filters.forces.Forces, simmate.website.workflows.filters.thermodynamics.Thermodynamics, simmate.website.workflows.filters.calculation.Calculation"}, {"fullname": "simmate.website.workflows.filters.static_energy.StaticEnergy.Meta", "modulename": "simmate.website.workflows.filters.static_energy", "qualname": "StaticEnergy.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.static_energy.StaticEnergy.Meta.__init__", "modulename": "simmate.website.workflows.filters.static_energy", "qualname": "StaticEnergy.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.static_energy.StaticEnergy.Meta.model", "modulename": "simmate.website.workflows.filters.static_energy", "qualname": "StaticEnergy.Meta.model", "type": "class", "doc": "<p>A calculation is synonmyous with a Prefect \"Flow-Run\". This entire table together\ncan be viewed as the \"Flow\" which may have extra metadata. This could\ninclude values such as...\n    - workflow_name\n    - simmate_version\n    - [[thirdparty]]_version (i.e. vasp_version=\"5.4.4\")</p>\n", "bases": "simmate.database.base_data_types.structure.Structure, simmate.database.base_data_types.thermodynamics.Thermodynamics, simmate.database.base_data_types.forces.Forces, simmate.database.base_data_types.calculation.Calculation"}, {"fullname": "simmate.website.workflows.filters.static_energy.StaticEnergy.Meta.fields", "modulename": "simmate.website.workflows.filters.static_energy", "qualname": "StaticEnergy.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'band_gap': ['exact', 'range'], 'is_gap_direct': ['exact'], 'energy_fermi': ['range'], 'conduction_band_minimum': ['range'], 'valence_band_maximum': ['range'], 'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact'], 'site_force_norm_max': ['range'], 'site_forces_norm_per_atom': ['range'], 'lattice_stress_norm': ['range'], 'lattice_stress_norm_per_atom': ['range'], 'energy': ['range'], 'energy_per_atom': ['range'], 'energy_above_hull': ['exact', 'range'], 'is_stable': ['exact'], 'formation_energy': ['range'], 'formation_energy_per_atom': ['range'], 'directory': ['exact'], 'prefect_flow_run_id': ['exact'], 'created_at': ['range'], 'updated_at': ['range']}"}, {"fullname": "simmate.website.workflows.filters.static_energy.StaticEnergy.declared_filters", "modulename": "simmate.website.workflows.filters.static_energy", "qualname": "StaticEnergy.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.static_energy.StaticEnergy.base_filters", "modulename": "simmate.website.workflows.filters.static_energy", "qualname": "StaticEnergy.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('band_gap', <django_filters.filters.NumberFilter object>), ('band_gap__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_gap_direct', <django_filters.rest_framework.filters.BooleanFilter object>), ('energy_fermi__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('conduction_band_minimum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('valence_band_maximum__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('site_force_norm_max__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('site_forces_norm_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('lattice_stress_norm__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('lattice_stress_norm_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_above_hull', <django_filters.filters.NumberFilter object>), ('energy_above_hull__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_stable', <django_filters.rest_framework.filters.BooleanFilter object>), ('formation_energy__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('formation_energy_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('directory', <django_filters.filters.CharFilter object>), ('prefect_flow_run_id', <django_filters.filters.CharFilter object>), ('created_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('updated_at__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.structure", "modulename": "simmate.website.workflows.filters.structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.structure.Structure", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure", "type": "class", "doc": "<p></p>\n", "bases": "django_filters.rest_framework.filterset.FilterSet"}, {"fullname": "simmate.website.workflows.filters.structure.Structure.Meta", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.structure.Structure.Meta.__init__", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.structure.Structure.Meta.model", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure.Meta.model", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.workflows.filters.structure.Structure.Meta.fields", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'nsites': ['exact', 'range'], 'nelements': ['exact', 'range'], 'density': ['exact', 'range'], 'density_atomic': ['exact', 'range'], 'volume': ['exact', 'range'], 'volume_molar': ['exact'], 'formula_full': ['exact'], 'formula_reduced': ['exact'], 'formula_anonymous': ['exact']}"}, {"fullname": "simmate.website.workflows.filters.structure.Structure.include_subsystems", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure.include_subsystems", "type": "variable", "doc": "<p>Whether to include subsystems of the given <code>chemical_system</code>. For example,\nthe subsystems of Y-C-F would be Y, C, F, Y-C, Y-F, etc..</p>\n"}, {"fullname": "simmate.website.workflows.filters.structure.Structure.chemical_system", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure.chemical_system", "type": "variable", "doc": "<p>The chemical system of the structure (e.g. \"Y-C-F\" or \"Na-Cl\")</p>\n"}, {"fullname": "simmate.website.workflows.filters.structure.Structure.filter_chemical_system", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure.filter_chemical_system", "type": "function", "doc": "<p></p>\n", "signature": "(self, queryset, name, value)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.structure.Structure.declared_filters", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.structure.Structure.base_filters", "modulename": "simmate.website.workflows.filters.structure", "qualname": "Structure.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('nsites', <django_filters.filters.NumberFilter object>), ('nsites__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('nelements', <django_filters.filters.NumberFilter object>), ('nelements__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density', <django_filters.filters.NumberFilter object>), ('density__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('density_atomic', <django_filters.filters.NumberFilter object>), ('density_atomic__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume', <django_filters.filters.NumberFilter object>), ('volume__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('volume_molar', <django_filters.filters.NumberFilter object>), ('formula_full', <django_filters.filters.CharFilter object>), ('formula_reduced', <django_filters.filters.CharFilter object>), ('formula_anonymous', <django_filters.filters.CharFilter object>), ('include_subsystems', <django_filters.rest_framework.filters.BooleanFilter object>), ('chemical_system', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.symmetry", "modulename": "simmate.website.workflows.filters.symmetry", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.symmetry.Spacegroup", "modulename": "simmate.website.workflows.filters.symmetry", "qualname": "Spacegroup", "type": "class", "doc": "<p></p>\n", "bases": "django_filters.rest_framework.filterset.FilterSet"}, {"fullname": "simmate.website.workflows.filters.symmetry.Spacegroup.Meta", "modulename": "simmate.website.workflows.filters.symmetry", "qualname": "Spacegroup.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.symmetry.Spacegroup.Meta.__init__", "modulename": "simmate.website.workflows.filters.symmetry", "qualname": "Spacegroup.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.symmetry.Spacegroup.Meta.model", "modulename": "simmate.website.workflows.filters.symmetry", "qualname": "Spacegroup.Meta.model", "type": "class", "doc": "<p>Spacegroup(number, symbol, crystal_system, point_group)</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.workflows.filters.symmetry.Spacegroup.Meta.fields", "modulename": "simmate.website.workflows.filters.symmetry", "qualname": "Spacegroup.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'number': ['exact', 'range'], 'symbol': ['exact'], 'crystal_system': ['exact'], 'point_group': ['exact']}"}, {"fullname": "simmate.website.workflows.filters.symmetry.Spacegroup.declared_filters", "modulename": "simmate.website.workflows.filters.symmetry", "qualname": "Spacegroup.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict()"}, {"fullname": "simmate.website.workflows.filters.symmetry.Spacegroup.base_filters", "modulename": "simmate.website.workflows.filters.symmetry", "qualname": "Spacegroup.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('number', <django_filters.filters.NumberFilter object>), ('number__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('symbol', <django_filters.filters.CharFilter object>), ('crystal_system', <django_filters.filters.CharFilter object>), ('point_group', <django_filters.filters.CharFilter object>)])"}, {"fullname": "simmate.website.workflows.filters.thermodynamics", "modulename": "simmate.website.workflows.filters.thermodynamics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.thermodynamics.Thermodynamics", "modulename": "simmate.website.workflows.filters.thermodynamics", "qualname": "Thermodynamics", "type": "class", "doc": "<p></p>\n", "bases": "django_filters.rest_framework.filterset.FilterSet"}, {"fullname": "simmate.website.workflows.filters.thermodynamics.Thermodynamics.Meta", "modulename": "simmate.website.workflows.filters.thermodynamics", "qualname": "Thermodynamics.Meta", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.filters.thermodynamics.Thermodynamics.Meta.__init__", "modulename": "simmate.website.workflows.filters.thermodynamics", "qualname": "Thermodynamics.Meta.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "simmate.website.workflows.filters.thermodynamics.Thermodynamics.Meta.model", "modulename": "simmate.website.workflows.filters.thermodynamics", "qualname": "Thermodynamics.Meta.model", "type": "class", "doc": "<p>The base class for defining a table in the Simmate database. All tables and\nmixins inherit from this class.</p>\n\n<p>Usage is identical to\n<a href=\"https://docs.djangoproject.com/en/4.0/#the-model-layer\">Models in Django</a>\nwhere this class only adds extra methods for convenience.</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.website.workflows.filters.thermodynamics.Thermodynamics.Meta.fields", "modulename": "simmate.website.workflows.filters.thermodynamics", "qualname": "Thermodynamics.Meta.fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'energy': ['range'], 'energy_per_atom': ['range'], 'energy_above_hull': ['exact', 'range'], 'is_stable': ['exact'], 'formation_energy': ['range'], 'formation_energy_per_atom': ['range']}"}, {"fullname": "simmate.website.workflows.filters.thermodynamics.Thermodynamics.declared_filters", "modulename": "simmate.website.workflows.filters.thermodynamics", "qualname": "Thermodynamics.declared_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict()"}, {"fullname": "simmate.website.workflows.filters.thermodynamics.Thermodynamics.base_filters", "modulename": "simmate.website.workflows.filters.thermodynamics", "qualname": "Thermodynamics.base_filters", "type": "variable", "doc": "<p></p>\n", "default_value": " = OrderedDict([('energy__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('energy_above_hull', <django_filters.filters.NumberFilter object>), ('energy_above_hull__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('is_stable', <django_filters.rest_framework.filters.BooleanFilter object>), ('formation_energy__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>), ('formation_energy_per_atom__range', <django_filters.filterset.BaseFilterSet.filter_for_lookup.<locals>.ConcreteRangeFilter object>)])"}, {"fullname": "simmate.website.workflows.forms", "modulename": "simmate.website.workflows.forms", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow", "type": "class", "doc": "<p>A collection of Fields, plus their associated data.</p>\n", "bases": "django.forms.forms.Form"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean", "type": "function", "doc": "<p>Hook for doing any extra form-wide cleaning after Field.clean() has been\ncalled on every field. Any ValidationError raised by this method will\nnot be associated with a particular field; it will have a special-case\nassociation with the field named '__all__'.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean_structure_json", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean_structure_json", "type": "function", "doc": "<p></p>\n", "signature": "(self, field_name: str = 'structure_json')", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean_structure_file", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean_structure_file", "type": "function", "doc": "<p></p>\n", "signature": "(self, field_name: str = 'structure_file')", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean_structure_start_json", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean_structure_start_json", "type": "function", "doc": "<p></p>\n", "signature": "(self, field_name: str = None)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean_structure_end_json", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean_structure_end_json", "type": "function", "doc": "<p></p>\n", "signature": "(self, field_name: str = None)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean_migration_images_json", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean_migration_images_json", "type": "function", "doc": "<p></p>\n", "signature": "(self, field_name: str = None)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean_structure_start_file", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean_structure_start_file", "type": "function", "doc": "<p></p>\n", "signature": "(self, field_name: str = None)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean_structure_end_file", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean_structure_end_file", "type": "function", "doc": "<p></p>\n", "signature": "(self, field_name: str = None)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean_migration_images_file", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean_migration_images_file", "type": "function", "doc": "<p></p>\n", "signature": "(self, field_name: str = None)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.clean_labels", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.clean_labels", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.from_workflow", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.from_workflow", "type": "function", "doc": "<p></p>\n", "signature": "(cls, workflow: simmate.workflow_engine.workflow.Workflow)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.media", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.media", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.declared_fields", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.declared_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'labels': <django.forms.fields.CharField object>}"}, {"fullname": "simmate.website.workflows.forms.SubmitWorkflow.base_fields", "modulename": "simmate.website.workflows.forms", "qualname": "SubmitWorkflow.base_fields", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'labels': <django.forms.fields.CharField object>}"}, {"fullname": "simmate.website.workflows.migrations", "modulename": "simmate.website.workflows.migrations", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.migrations.0001_initial", "modulename": "simmate.website.workflows.migrations.0001_initial", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.migrations.0001_initial.Migration", "modulename": "simmate.website.workflows.migrations.0001_initial", "qualname": "Migration", "type": "class", "doc": "<p>The base class for all migrations.</p>\n\n<p>Migration files will import this from django.db.migrations.Migration\nand subclass it as a class called Migration. It will have one or more\nof the following attributes:</p>\n\n<ul>\n<li>operations: A list of Operation instances, probably from django.db.migrations.operations</li>\n<li>dependencies: A list of tuples of (app_path, migration_name)</li>\n<li>run_before: A list of tuples of (app_path, migration_name)</li>\n<li>replaces: A list of migration_names</li>\n</ul>\n\n<p>Note that all migrations come out of migrations and into the Loader or\nGraph as instances, having been initialized with their app label and name.</p>\n", "bases": "django.db.migrations.migration.Migration"}, {"fullname": "simmate.website.workflows.migrations.0001_initial.Migration.initial", "modulename": "simmate.website.workflows.migrations.0001_initial", "qualname": "Migration.initial", "type": "variable", "doc": "<p></p>\n", "default_value": " = True"}, {"fullname": "simmate.website.workflows.migrations.0001_initial.Migration.dependencies", "modulename": "simmate.website.workflows.migrations.0001_initial", "qualname": "Migration.dependencies", "type": "variable", "doc": "<p></p>\n", "default_value": " = []"}, {"fullname": "simmate.website.workflows.migrations.0001_initial.Migration.operations", "modulename": "simmate.website.workflows.migrations.0001_initial", "qualname": "Migration.operations", "type": "variable", "doc": "<p></p>\n", "default_value": " = [<CreateModel  name='EvolutionarySearch', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('composition', <django.db.models.fields.CharField>), ('individuals_datatable_str', <django.db.models.fields.CharField>), ('workflows', <django.db.models.fields.json.JSONField>), ('max_structures', <django.db.models.fields.IntegerField>), ('limit_best_survival', <django.db.models.fields.IntegerField>)]>, <CreateModel  name='MatProjIonicStep', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('number', <django.db.models.fields.IntegerField>)], options={'abstract': False}>, <CreateModel  name='MITDiffusionAnalysis', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('migrating_specie', <django.db.models.fields.CharField>), ('vacancy_mode', <django.db.models.fields.BooleanField>), ('atomic_fraction', <django.db.models.fields.FloatField>), ('barrier_cell', <django.db.models.fields.FloatField>), ('paths_involved', <django.db.models.fields.CharField>), ('npaths_involved', <django.db.models.fields.IntegerField>)], options={'abstract': False}>, <CreateModel  name='MITIonicStep', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('number', <django.db.models.fields.IntegerField>)], options={'abstract': False}>, <CreateModel  name='MITMigrationHop', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('site_start', <django.db.models.fields.CharField>), ('site_end', <django.db.models.fields.CharField>), ('index_start', <django.db.models.fields.IntegerField>), ('index_end', <django.db.models.fields.IntegerField>), ('number', <django.db.models.fields.IntegerField>), ('length', <django.db.models.fields.FloatField>), ('dimension_path', <django.db.models.fields.IntegerField>), ('dimension_host_lattice', <django.db.models.fields.IntegerField>), ('energy_barrier', <django.db.models.fields.FloatField>), ('diffusion_analysis', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>, <CreateModel  name='NEBEndpointIonicStep', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('number', <django.db.models.fields.IntegerField>)], options={'abstract': False}>, <CreateModel  name='Quality00IonicStep', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('number', <django.db.models.fields.IntegerField>)], options={'abstract': False}>, <CreateModel  name='Quality00Relaxation', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('volume_change', <django.db.models.fields.FloatField>)], options={'abstract': False}>, <CreateModel  name='Quality01IonicStep', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('number', <django.db.models.fields.IntegerField>)], options={'abstract': False}>, <CreateModel  name='Quality01Relaxation', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('volume_change', <django.db.models.fields.FloatField>)], options={'abstract': False}>, <CreateModel  name='Quality02IonicStep', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('number', <django.db.models.fields.IntegerField>)], options={'abstract': False}>, <CreateModel  name='Quality02Relaxation', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('volume_change', <django.db.models.fields.FloatField>)], options={'abstract': False}>, <CreateModel  name='Quality03IonicStep', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('number', <django.db.models.fields.IntegerField>)], options={'abstract': False}>, <CreateModel  name='Quality03Relaxation', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('volume_change', <django.db.models.fields.FloatField>)], options={'abstract': False}>, <CreateModel  name='Quality04IonicStep', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('number', <django.db.models.fields.IntegerField>)], options={'abstract': False}>, <CreateModel  name='Quality04Relaxation', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('volume_change', <django.db.models.fields.FloatField>)], options={'abstract': False}>, <CreateModel  name='Spacegroup', fields=[('number', <django.db.models.fields.IntegerField>), ('symbol', <django.db.models.fields.CharField>), ('crystal_system', <django.db.models.fields.CharField>), ('point_group', <django.db.models.fields.CharField>)]>, <CreateModel  name='StructureSource', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('name', <django.db.models.fields.CharField>), ('is_steadystate', <django.db.models.fields.BooleanField>), ('is_singleshot', <django.db.models.fields.BooleanField>), ('settings', <django.db.models.fields.json.JSONField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('prefect_flow_run_ids', <django.db.models.fields.json.JSONField>), ('search', <django.db.models.fields.related.ForeignKey>)]>, <CreateModel  name='StagedRelaxation', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('quality00relaxation', <django.db.models.fields.related.OneToOneField>), ('quality01relaxation', <django.db.models.fields.related.OneToOneField>), ('quality02relaxation', <django.db.models.fields.related.OneToOneField>), ('quality03relaxation', <django.db.models.fields.related.OneToOneField>), ('quality04relaxation', <django.db.models.fields.related.OneToOneField>)], options={'abstract': False}>, <CreateModel  name='Quality04StaticEnergy', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>, <AddField  model_name='quality04relaxation', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality04relaxation', name='structure_final', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality04relaxation', name='structure_start', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality04ionicstep', name='relaxation', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality04ionicstep', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality03relaxation', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality03relaxation', name='structure_final', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality03relaxation', name='structure_start', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality03ionicstep', name='relaxation', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality03ionicstep', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality02relaxation', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality02relaxation', name='structure_final', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality02relaxation', name='structure_start', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality02ionicstep', name='relaxation', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality02ionicstep', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality01relaxation', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality01relaxation', name='structure_final', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality01relaxation', name='structure_start', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality01ionicstep', name='relaxation', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality01ionicstep', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality00relaxation', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality00relaxation', name='structure_final', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality00relaxation', name='structure_start', field=<django.db.models.fields.related.OneToOneField>>, <AddField  model_name='quality00ionicstep', name='relaxation', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='quality00ionicstep', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <CreateModel  name='NEBEndpointStaticEnergy', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>, <CreateModel  name='NEBEndpointRelaxation', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('volume_change', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>), ('structure_final', <django.db.models.fields.related.OneToOneField>), ('structure_start', <django.db.models.fields.related.OneToOneField>)], options={'abstract': False}>, <AddField  model_name='nebendpointionicstep', name='relaxation', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='nebendpointionicstep', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <CreateModel  name='MITStaticEnergy', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>, <CreateModel  name='MITRelaxation', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('volume_change', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>), ('structure_final', <django.db.models.fields.related.OneToOneField>), ('structure_start', <django.db.models.fields.related.OneToOneField>)], options={'abstract': False}>, <CreateModel  name='MITMigrationImage', fields=[('id', <django.db.models.fields.AutoField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('number', <django.db.models.fields.IntegerField>), ('force_tangent', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('structure_distance', <django.db.models.fields.FloatField>), ('migration_hop', <django.db.models.fields.related.ForeignKey>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>, <AddField  model_name='mitionicstep', name='relaxation', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='mitionicstep', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <CreateModel  name='MITDynamicsRun', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('temperature_start', <django.db.models.fields.IntegerField>), ('temperature_end', <django.db.models.fields.IntegerField>), ('time_step', <django.db.models.fields.FloatField>), ('nsteps', <django.db.models.fields.IntegerField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>, <CreateModel  name='MITDynamicsIonicStep', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('number', <django.db.models.fields.IntegerField>), ('temperature', <django.db.models.fields.FloatField>), ('dynamics_run', <django.db.models.fields.related.ForeignKey>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>, <AddField  model_name='mitdiffusionanalysis', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <CreateModel  name='MatProjStaticEnergy', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('site_forces', <django.db.models.fields.json.JSONField>), ('lattice_stress', <django.db.models.fields.json.JSONField>), ('site_force_norm_max', <django.db.models.fields.FloatField>), ('site_forces_norm', <django.db.models.fields.FloatField>), ('site_forces_norm_per_atom', <django.db.models.fields.FloatField>), ('lattice_stress_norm', <django.db.models.fields.FloatField>), ('lattice_stress_norm_per_atom', <django.db.models.fields.FloatField>), ('energy', <django.db.models.fields.FloatField>), ('energy_per_atom', <django.db.models.fields.FloatField>), ('energy_above_hull', <django.db.models.fields.FloatField>), ('is_stable', <django.db.models.fields.BooleanField>), ('decomposes_to', <django.db.models.fields.json.JSONField>), ('formation_energy', <django.db.models.fields.FloatField>), ('formation_energy_per_atom', <django.db.models.fields.FloatField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>, <CreateModel  name='MatProjRelaxation', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('volume_change', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>), ('structure_final', <django.db.models.fields.related.OneToOneField>), ('structure_start', <django.db.models.fields.related.OneToOneField>)], options={'abstract': False}>, <AddField  model_name='matprojionicstep', name='relaxation', field=<django.db.models.fields.related.ForeignKey>>, <AddField  model_name='matprojionicstep', name='spacegroup', field=<django.db.models.fields.related.ForeignKey>>, <CreateModel  name='MatProjDensityOfStates', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('density_of_states_data', <django.db.models.fields.json.JSONField>), ('band_gap', <django.db.models.fields.FloatField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>, <CreateModel  name='MatProjBandStructure', fields=[('id', <django.db.models.fields.AutoField>), ('source', <django.db.models.fields.json.JSONField>), ('structure_string', <django.db.models.fields.TextField>), ('nsites', <django.db.models.fields.IntegerField>), ('nelements', <django.db.models.fields.IntegerField>), ('elements', <django.db.models.fields.json.JSONField>), ('chemical_system', <django.db.models.fields.CharField>), ('density', <django.db.models.fields.FloatField>), ('density_atomic', <django.db.models.fields.FloatField>), ('volume', <django.db.models.fields.FloatField>), ('volume_molar', <django.db.models.fields.FloatField>), ('formula_full', <django.db.models.fields.CharField>), ('formula_reduced', <django.db.models.fields.CharField>), ('formula_anonymous', <django.db.models.fields.CharField>), ('directory', <django.db.models.fields.CharField>), ('prefect_flow_run_id', <django.db.models.fields.CharField>), ('created_at', <django.db.models.fields.DateTimeField>), ('updated_at', <django.db.models.fields.DateTimeField>), ('corrections', <django.db.models.fields.json.JSONField>), ('band_structure_data', <django.db.models.fields.json.JSONField>), ('nbands', <django.db.models.fields.IntegerField>), ('band_gap', <django.db.models.fields.FloatField>), ('is_gap_direct', <django.db.models.fields.BooleanField>), ('band_gap_direct', <django.db.models.fields.FloatField>), ('energy_fermi', <django.db.models.fields.FloatField>), ('conduction_band_minimum', <django.db.models.fields.FloatField>), ('valence_band_maximum', <django.db.models.fields.FloatField>), ('is_metal', <django.db.models.fields.BooleanField>), ('spacegroup', <django.db.models.fields.related.ForeignKey>)], options={'abstract': False}>]"}, {"fullname": "simmate.website.workflows.models", "modulename": "simmate.website.workflows.models", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.urls", "modulename": "simmate.website.workflows.urls", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.utilities", "modulename": "simmate.website.workflows.utilities", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.utilities.SimmateAPIView", "modulename": "simmate.website.workflows.utilities", "qualname": "SimmateAPIView", "type": "class", "doc": "<p>Base class for all other generic views.</p>\n", "bases": "rest_framework.generics.GenericAPIView"}, {"fullname": "simmate.website.workflows.utilities.SimmateAPIView.extra_context", "modulename": "simmate.website.workflows.utilities", "qualname": "SimmateAPIView.extra_context", "type": "variable", "doc": "<p>This defines extra context that should be passed to the template when\nusing format=html. Note, you can have this as a constant or alternatively\ndefine a property. The only requirement is that a dictionary is returned.</p>\n", "annotation": ": dict", "default_value": " = {}"}, {"fullname": "simmate.website.workflows.utilities.SimmateAPIView.get", "modulename": "simmate.website.workflows.utilities", "qualname": "SimmateAPIView.get", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    request: django.http.request.HttpRequest,\n    *args,\n    **kwargs\n) -> rest_framework.response.Response", "funcdef": "def"}, {"fullname": "simmate.website.workflows.utilities.SimmateAPIView.list_view", "modulename": "simmate.website.workflows.utilities", "qualname": "SimmateAPIView.list_view", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    request: django.http.request.HttpRequest,\n    *args,\n    **kwargs\n) -> rest_framework.response.Response", "funcdef": "def"}, {"fullname": "simmate.website.workflows.utilities.SimmateAPIView.retrieve_view", "modulename": "simmate.website.workflows.utilities", "qualname": "SimmateAPIView.retrieve_view", "type": "function", "doc": "<p></p>\n", "signature": "(self, request: django.http.request.HttpRequest, *args, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.utilities.render_from_table", "modulename": "simmate.website.workflows.utilities", "qualname": "render_from_table", "type": "function", "doc": "<p></p>\n", "signature": "(\n    request: django.http.request.HttpRequest,\n    template: str,\n    context,\n    table: simmate.database.base_data_types.base.DatabaseTable,\n    view_type: str,\n    request_kwargs: dict = {}\n) -> rest_framework.response.Response", "funcdef": "def"}, {"fullname": "simmate.website.workflows.utilities.get_filterset_from_table", "modulename": "simmate.website.workflows.utilities", "qualname": "get_filterset_from_table", "type": "function", "doc": "<p>Dynamically creates a Django Filter from a Simmate database table.</p>\n\n<p>For example, this function would take\n<code>simmate.database.third_parties.MatProjStructure</code>\nand automatically make the following filter:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.website.workflows.filters</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">DatabaseTableFilter</span><span class=\"p\">,</span>\n    <span class=\"n\">Structure</span><span class=\"p\">,</span>\n    <span class=\"n\">Thermodynamics</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MatProjStrucureFilter</span><span class=\"p\">(</span>\n    <span class=\"n\">DatabaseTableFilter</span><span class=\"p\">,</span>\n    <span class=\"n\">Structure</span><span class=\"p\">,</span>\n    <span class=\"n\">Thermodynamics</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MatProjStructure</span>  <span class=\"c1\"># this is database table</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span> <span class=\"c1\"># this combines the fields from Structure/Thermo mixins</span>\n\n    <span class=\"c1\"># These attributes are set using the declared filters from Structure/Thermo mixins</span>\n    <span class=\"n\">declared_filter1</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n    <span class=\"n\">declared_filter1</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n</code></pre></div>\n", "signature": "(\n    table: simmate.database.base_data_types.base.DatabaseTable\n) -> simmate.website.workflows.filters.base.DatabaseTableFilter", "funcdef": "def"}, {"fullname": "simmate.website.workflows.views", "modulename": "simmate.website.workflows.views", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.website.workflows.views.workflows_all", "modulename": "simmate.website.workflows.views", "qualname": "workflows_all", "type": "function", "doc": "<p></p>\n", "signature": "(request)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.views.workflows_by_type", "modulename": "simmate.website.workflows.views", "qualname": "workflows_by_type", "type": "function", "doc": "<p></p>\n", "signature": "(request, workflow_type)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.views.workflow_detail", "modulename": "simmate.website.workflows.views", "qualname": "workflow_detail", "type": "function", "doc": "<p></p>\n", "signature": "(request, workflow_type, workflow_name)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.views.workflow_run_detail", "modulename": "simmate.website.workflows.views", "qualname": "workflow_run_detail", "type": "function", "doc": "<p></p>\n", "signature": "(\n    request,\n    workflow_type: str,\n    workflow_name: str,\n    workflow_run_id: str\n)", "funcdef": "def"}, {"fullname": "simmate.website.workflows.views.workflow_submit", "modulename": "simmate.website.workflows.views", "qualname": "workflow_submit", "type": "function", "doc": "<p></p>\n", "signature": "(request, workflow_type: str, workflow_name: str)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine", "modulename": "simmate.workflow_engine", "type": "module", "doc": "<h1 id=\"the-simmate-workflow-engine\">The Simmate Workflow Engine</h1>\n\n<p>This module defines common workflow tasks, error handling, and job restarts. It is ment for users that want to create custom workflows from scratch. Use of this module is closely tied with <a href=\"https://github.com/jacksund/simmate/tree/main/tutorials\">Tutorials 08 and 09</a>.</p>\n\n<p>This module is only meant for advanced users. Beginners should instead start by checking if there is already a workflow built for them (in <code>simmate.workflows</code>) or by checking if there are common tasks already built for the program they are using in <code>simmate.calculators</code>. For example, VASP users can check <code>simmate.calculators.vasp</code>.</p>\n"}, {"fullname": "simmate.workflow_engine.common_tasks", "modulename": "simmate.workflow_engine.common_tasks", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.common_tasks.load_input_and_register", "modulename": "simmate.workflow_engine.common_tasks.load_input_and_register", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.common_tasks.load_input_and_register.LoadInputAndRegister", "modulename": "simmate.workflow_engine.common_tasks.load_input_and_register", "qualname": "LoadInputAndRegister", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n", "bases": "prefect.core.task.Task"}, {"fullname": "simmate.workflow_engine.common_tasks.load_input_and_register.LoadInputAndRegister.__init__", "modulename": "simmate.workflow_engine.common_tasks.load_input_and_register", "qualname": "LoadInputAndRegister.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    workflow_name: str = None,\n    input_obj_name: str = None,\n    calculation_table: simmate.database.base_data_types.base.DatabaseTable = None,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.common_tasks.load_input_and_register.LoadInputAndRegister.run", "modulename": "simmate.workflow_engine.common_tasks.load_input_and_register", "qualname": "LoadInputAndRegister.run", "type": "function", "doc": "<p>How the input was submitted as a parameter depends on if we are submitting\nto Prefect Cloud, running the flow locally, or even continuing from a\nprevious calculation.  Here, we use a task to convert the input to a toolkit\nobject and (if requested) provide the directory as well.</p>\n\n<p>input_class is any class that has a from_dynamic method accepts the\ninput_obj format. In the large majority of cases, this is just\na Structure object so we use that as the default.</p>\n\n<p>directory is optional</p>\n\n<p>use_previous_directory is only used when we are pulling a structure from a\nprevious calculation. If use_previous_directory=True, then the directory\nparameter is ignored.</p>\n\n<p>**kwargs is anything extra that you want saved to simmate_input.yaml</p>\n", "signature": "(\n    self,\n    input_obj: Any,\n    input_class: Any = <class 'simmate.toolkit.base_data_types.structure.Structure'>,\n    source: dict = None,\n    directory: str = None,\n    use_previous_directory: bool = False,\n    **kwargs: Any\n) -> Tuple[simmate.toolkit.base_data_types.structure.Structure, str]", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.common_tasks.load_nested_calculation", "modulename": "simmate.workflow_engine.common_tasks.load_nested_calculation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.common_tasks.load_nested_calculation.LoadNestedCalculationTask", "modulename": "simmate.workflow_engine.common_tasks.load_nested_calculation", "qualname": "LoadNestedCalculationTask", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n", "bases": "prefect.core.task.Task"}, {"fullname": "simmate.workflow_engine.common_tasks.load_nested_calculation.LoadNestedCalculationTask.__init__", "modulename": "simmate.workflow_engine.common_tasks.load_nested_calculation", "qualname": "LoadNestedCalculationTask.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, calculation_table, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.common_tasks.load_nested_calculation.LoadNestedCalculationTask.run", "modulename": "simmate.workflow_engine.common_tasks.load_nested_calculation", "qualname": "LoadNestedCalculationTask.run", "type": "function", "doc": "<p>The <code>run()</code> method is called (with arguments, if appropriate) to run a task.</p>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>If a task has arguments in its <code>run()</code> method, these can be bound either by using the\nfunctional API and _calling_ the task instance, or by using <code>self.bind</code> directly.</p>\n\n<p>In addition to running arbitrary functions, tasks can interact with Prefect in a few ways:</p>\n\n<ul><li> Return an optional result. When this function runs successfully,\n    the task is considered successful and the result (if any) can be\n    made available to downstream tasks. </li>\n<li> Raise an error. Errors are interpreted as failure. </li>\n<li> Raise a [signal](../engine/signals.html). Signals can include `FAIL`, `SUCCESS`,\n    `RETRY`, `SKIP`, etc. and indicate that the task should be put in the indicated state.\n        <ul>\n        <li> `FAIL` will lead to retries if appropriate </li>\n        <li> `SUCCESS` will cause the task to be marked successful </li>\n        <li> `RETRY` will cause the task to be marked for retry, even if `max_retries`\n            has been exceeded </li>\n        <li> `SKIP` will skip the task and possibly propogate the skip state through the\n            flow, depending on whether downstream tasks have `skip_on_upstream_skip=True`.\n        </li></ul>\n\n<p></li></ul></p>\n", "signature": "(self, directory)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.common_tasks.parse_multi_command", "modulename": "simmate.workflow_engine.common_tasks.parse_multi_command", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.common_tasks.parse_multi_command.parse_multi_command", "modulename": "simmate.workflow_engine.common_tasks.parse_multi_command", "qualname": "parse_multi_command", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Task: parse_multi_command>"}, {"fullname": "simmate.workflow_engine.common_tasks.save_nested_calculation", "modulename": "simmate.workflow_engine.common_tasks.save_nested_calculation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.common_tasks.save_nested_calculation.SaveNestedCalculationTask", "modulename": "simmate.workflow_engine.common_tasks.save_nested_calculation", "qualname": "SaveNestedCalculationTask", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n", "bases": "prefect.core.task.Task"}, {"fullname": "simmate.workflow_engine.common_tasks.save_nested_calculation.SaveNestedCalculationTask.__init__", "modulename": "simmate.workflow_engine.common_tasks.save_nested_calculation", "qualname": "SaveNestedCalculationTask.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, calculation_table, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.common_tasks.save_nested_calculation.SaveNestedCalculationTask.run", "modulename": "simmate.workflow_engine.common_tasks.save_nested_calculation", "qualname": "SaveNestedCalculationTask.run", "type": "function", "doc": "<p>The <code>run()</code> method is called (with arguments, if appropriate) to run a task.</p>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>If a task has arguments in its <code>run()</code> method, these can be bound either by using the\nfunctional API and _calling_ the task instance, or by using <code>self.bind</code> directly.</p>\n\n<p>In addition to running arbitrary functions, tasks can interact with Prefect in a few ways:</p>\n\n<ul><li> Return an optional result. When this function runs successfully,\n    the task is considered successful and the result (if any) can be\n    made available to downstream tasks. </li>\n<li> Raise an error. Errors are interpreted as failure. </li>\n<li> Raise a [signal](../engine/signals.html). Signals can include `FAIL`, `SUCCESS`,\n    `RETRY`, `SKIP`, etc. and indicate that the task should be put in the indicated state.\n        <ul>\n        <li> `FAIL` will lead to retries if appropriate </li>\n        <li> `SUCCESS` will cause the task to be marked successful </li>\n        <li> `RETRY` will cause the task to be marked for retry, even if `max_retries`\n            has been exceeded </li>\n        <li> `SKIP` will skip the task and possibly propogate the skip state through the\n            flow, depending on whether downstream tasks have `skip_on_upstream_skip=True`.\n        </li></ul>\n\n<p></li></ul></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.common_tasks.save_result", "modulename": "simmate.workflow_engine.common_tasks.save_result", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.common_tasks.save_result.SaveOutputTask", "modulename": "simmate.workflow_engine.common_tasks.save_result", "qualname": "SaveOutputTask", "type": "class", "doc": "<p>The Task class which is used as the full representation of a unit of work.</p>\n\n<p>This Task class can be used directly as a first class object where it must\nbe inherited from by a class that implements the <code>run</code> method.  For a more\nfunctional way of generating Tasks, see <a href=\"../utilities/tasks.html\">the task decorator</a>.</p>\n\n<p>Inheritance example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>An instance of a <code>Task</code> can be used functionally to generate other task instances\nwith the same attributes but with different values bound to their <code>run</code> methods.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">AddTask</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">AddTask</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"s2\">&quot;My Flow&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># t1 != a</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># t2 != a</span>\n</code></pre></div>\n\n<p>To bind values to a Task's run method imperatively (and without making a copy), see <code>Task.bind</code>.</p>\n\n<p>Args:\n    - name (str, optional): The name of this task\n    - slug (str, optional): The slug for this task. Slugs provide a stable ID for tasks so\n        that the Prefect API can identify task run states. If a slug is not provided, one\n        will be generated automatically once the task is added to a Flow.\n    - tags ([str], optional): A list of tags for this task\n    - max_retries (int, optional): The maximum amount of times this task can be retried\n    - retry_delay (timedelta, optional): The amount of time to wait until task is retried\n    - timeout (Union[int, timedelta], optional): The amount of time (in seconds) to wait while\n        running this task before a timeout occurs; note that sub-second\n        resolution is not supported, even when passing in a timedelta.\n    - trigger (callable, optional): a function that determines whether the\n        task should run, based on the states of any upstream tasks.\n    - skip_on_upstream_skip (bool, optional): if <code>True</code>, if any immediately\n        upstream tasks are skipped, this task will automatically be skipped as\n        well, regardless of trigger. By default, this prevents tasks from\n        attempting to use either state or data from tasks that didn't run. If\n        <code>False</code>, the task's trigger will be called as normal, with skips\n        considered successes. Defaults to <code>True</code>.\n    - cache_for (timedelta, optional): The amount of time to maintain a cache\n        of the outputs of this task.  Useful for situations where the containing Flow\n        will be rerun multiple times, but this task doesn't need to be.\n    - cache_validator (Callable, optional): Validator that will determine\n        whether the cache for this task is still valid (only required if <code>cache_for</code>\n        is provided; defaults to <code>prefect.engine.cache_validators.duration_only</code>)\n    - cache_key (str, optional): if provided, a <code>cache_key</code>\n        serves as a unique identifier for this Task's cache, and can be shared\n        across both Tasks _and_ Flows; if not provided, the Task's _name_ will\n        be used if running locally, or the Task's database ID if running in\n        Cloud\n    - checkpoint (bool, optional): if this Task is successful, whether to\n        store its result using the configured result available during the run;\n        Also note that checkpointing will only occur locally if\n        <code>prefect.config.flows.checkpointing</code> is set to <code>True</code>\n    - result (Result, optional): the result instance used to retrieve and\n        store task results during execution\n    - target (Union[str, Callable], optional): location to check for task Result. If a result\n        exists at that location then the task run will enter a cached state.\n        <code>target</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from <code>prefect.context</code>. If a callable function\n        is provided, it should have signature <code>callable(**kwargs) -&gt; str</code> and at write\n        time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support.\n    - state_handlers (Iterable[Callable], optional): A list of state change handlers\n        that will be called whenever the task changes state, providing an\n        opportunity to inspect or modify the new state. The handler\n        will be passed the task instance, the old (prior) state, and the new\n        (current) state, with the following signature:\n            <code>state_handler(task: Task, old_state: State, new_state: State) -&gt; Optional[State]</code>\n        If multiple functions are passed, then the <code>new_state</code> argument will be the\n        result of the previous handler.\n    - on_failure (Callable, optional): A function with signature\n        <code>fn(task: Task, state: State) -&gt; None</code> that will be called anytime this\n        Task enters a failure state\n    - log_stdout (bool, optional): Toggle whether or not to send stdout messages to\n        the Prefect logger. Defaults to <code>False</code>.\n    - task_run_name (Union[str, Callable], optional): a name to set for this task at runtime.\n        <code>task_run_name</code> strings can be templated formatting strings which will be\n        formatted at runtime with values from task arguments, <code>prefect.context</code>, and flow\n        parameters (in the case of a name conflict between these, earlier values take precedence).\n        If a callable function is provided, it should have signature <code>callable(**kwargs) -&gt; str</code>\n        and at write time all formatting kwargs will be passed and a fully formatted location is\n        expected as the return value. The callable can be used for string formatting logic that\n        <code>.format(**kwargs)</code> doesn't support. <strong>Note</strong>: this only works for tasks running against a\n        backend API.\n    - nout (int, optional): for tasks that return multiple results, the number of outputs\n        to expect. If not provided, will be inferred from the task return annotation, if\n        possible.  Note that <code>nout=1</code> implies the task returns a tuple of\n        one value (leave as <code>None</code> for non-tuple return types).</p>\n\n<p>Raises:\n    - TypeError: if <code>tags</code> is of type <code>str</code>\n    - TypeError: if <code>timeout</code> is not of type <code>int</code></p>\n", "bases": "prefect.core.task.Task"}, {"fullname": "simmate.workflow_engine.common_tasks.save_result.SaveOutputTask.__init__", "modulename": "simmate.workflow_engine.common_tasks.save_result", "qualname": "SaveOutputTask.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, calculation_table, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.common_tasks.save_result.SaveOutputTask.run", "modulename": "simmate.workflow_engine.common_tasks.save_result", "qualname": "SaveOutputTask.run", "type": "function", "doc": "<p>The <code>run()</code> method is called (with arguments, if appropriate) to run a task.</p>\n\n<p><em>Note:</em> The implemented <code>run</code> method cannot have <code>*args</code> in its signature. In addition,\nthe following keywords are reserved: <code>upstream_tasks</code>, <code>task_args</code> and <code>mapped</code>.</p>\n\n<p>If a task has arguments in its <code>run()</code> method, these can be bound either by using the\nfunctional API and _calling_ the task instance, or by using <code>self.bind</code> directly.</p>\n\n<p>In addition to running arbitrary functions, tasks can interact with Prefect in a few ways:</p>\n\n<ul><li> Return an optional result. When this function runs successfully,\n    the task is considered successful and the result (if any) can be\n    made available to downstream tasks. </li>\n<li> Raise an error. Errors are interpreted as failure. </li>\n<li> Raise a [signal](../engine/signals.html). Signals can include `FAIL`, `SUCCESS`,\n    `RETRY`, `SKIP`, etc. and indicate that the task should be put in the indicated state.\n        <ul>\n        <li> `FAIL` will lead to retries if appropriate </li>\n        <li> `SUCCESS` will cause the task to be marked successful </li>\n        <li> `RETRY` will cause the task to be marked for retry, even if `max_retries`\n            has been exceeded </li>\n        <li> `SKIP` will skip the task and possibly propogate the skip state through the\n            flow, depending on whether downstream tasks have `skip_on_upstream_skip=True`.\n        </li></ul>\n\n<p></li></ul></p>\n", "signature": "(self, output)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.error_handler", "modulename": "simmate.workflow_engine.error_handler", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler", "type": "class", "doc": "<p>Abstract base class for an ErrorHandler. These handlers should be used in\ncombination with S3Tasks.</p>\n", "bases": "abc.ABC"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.is_monitor", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.is_monitor", "type": "variable", "doc": "<p>This class property indicates whether the error handler is a monitor,\ni.e., a handler that monitors a job as it is running. If a\nmonitor-type handler notices an error, the job will be sent a\ntermination signal, the error is then corrected,\nand then the job is restarted. This is useful for catching errors\nthat occur early in the run but do not cause immediate failure.\nAlso, is_monitor=True and is_terminating=False is a special case. See the\nis_terminating description below for why!</p>\n", "default_value": " = False"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.is_terminating", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.is_terminating", "type": "variable", "doc": "<p>Whether this handler terminates a job upon error detection. By\ndefault, this is True, which means that the current Job will be\nstopped when an error is found, then the corrections are applied,\nand job restarted. In some instances, some errors may not need the job to be\nterminated or may need to wait for some other event to terminate a job.\nFor example, a particular error may require a flag to be set to request\na job to terminate gracefully once it finishes its current task. The\nhandler to set the flag should be classified as is_terminating = False to\nnot terminate the job.</p>\n", "default_value": " = True"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.filename_to_check", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.filename_to_check", "type": "variable", "doc": "<p>If you are using the default check() method, this is the file to check for\nerrors (using <code>possible_error_messages</code>). This should be a string of the \nfilename relative path to main directory.</p>\n", "default_value": " = None"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.possible_error_messages", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.possible_error_messages", "type": "variable", "doc": "<p>If you are using the default check() method, then this is the list of messages\nto find in the file (filename_to_check). As soon as one of these messages is\nfound, the <code>check</code> will return True.</p>\n", "default_value": " = None"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.check", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.check", "type": "function", "doc": "<p>This method is called during the job (for monitors) or at the end of\nthe job to check for errors. It searches for errors and returns the\nerror (or list of errors) for correct() method to use. If there are no\nerrors, then None (or an empty list) will be returned. In many cases,\nyou should read through the files directly rather than use\ncalculators.example.outputs which in many cases assumes a completed file.</p>\n\n<p>As some example, ErrorHandler's can have <code>check</code> functions that do one\nof the following:</p>\n\n<ol>\n<li>returns True when the error is there and False otherwise</li>\n<li>the ErrorHandler includes variations of a particular error, where\nit returns a label such as \"Scenario 2\" that .correct() can use.\nAnd in cases where there's no error, either False or None is returned.</li>\n</ol>\n\n<p>This method can be overwritten, but we have a \"default\" function that\naddresses the most common use-case. Here, we have a series of error messages\nand a specific file that they need to be checked in. This default method uses\nself.filename_to_check and self.possible_error_messages to check for an\nerror. It then returns True if the errors is found and False otherwise.</p>\n", "signature": "(self, directory: str) -> bool", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.correct", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.correct", "type": "function", "doc": "<p>This method is called at the end of a job when an error is detected.\nIt should perform any corrective measures relating to the detected\nerror. It then returns the fix or list of fixes made.</p>\n", "signature": "(self, directory: str) -> str", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.error_handler.ErrorHandler.name", "modulename": "simmate.workflow_engine.error_handler", "qualname": "ErrorHandler.name", "type": "variable", "doc": "<p>A nice string name for the handler. By default it just returns the name\nof this class.</p>\n"}, {"fullname": "simmate.workflow_engine.execution", "modulename": "simmate.workflow_engine.execution", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database", "modulename": "simmate.workflow_engine.execution.database", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem", "type": "class", "doc": "<p>Base info</p>\n", "bases": "simmate.database.base_data_types.base.DatabaseTable"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.fxn", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.fxn", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.args", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.args", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.kwargs", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.kwargs", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.result", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.result", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "django.db.models.enums.TextChoices"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.PENDING", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.PENDING", "type": "variable", "doc": "<p></p>\n", "default_value": " = WorkItem.StatusOptions.PENDING"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.RUNNING", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.RUNNING", "type": "variable", "doc": "<p></p>\n", "default_value": " = WorkItem.StatusOptions.RUNNING"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.CANCELLED", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.CANCELLED", "type": "variable", "doc": "<p></p>\n", "default_value": " = WorkItem.StatusOptions.CANCELLED"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.StatusOptions.FINISHED", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.StatusOptions.FINISHED", "type": "variable", "doc": "<p></p>\n", "default_value": " = WorkItem.StatusOptions.FINISHED"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.status", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.status", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.source", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.source", "type": "function", "doc": "<blockquote>\n  <p>Note, this field is highly experimental at the moment and subject to\n  change.</p>\n</blockquote>\n\n<p>This column indicated the data came from, and it could be a number of things,\nincluding...</p>\n\n<ul>\n<li>a third party id</li>\n<li>a structure from a different Simmate datbase table</li>\n<li>a transformation of another structure</li>\n<li>a creation method</li>\n<li>a custom submission by the user</li>\n</ul>\n\n<p>By default, this is a JSON field to account for all scenarios, but some\ntables (such as those in <code>simmate.database.third_parties</code>) this is value\nshould be the same for ALL entries in the table and therefore the column is\noverwritten as an attribute.</p>\n\n<p>For other tables where this is not a constant, here are some examples of\nvalues used in this column:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># from a thirdparty database or separate table</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a random structure creator</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PyXtalStructure&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># from a templated structure creator (e.g. substituition or prototypes)</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PrototypeStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AFLOWPrototypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MirrorMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># from a multi-structure transformation</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;HereditaryMutation&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;table&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MatProjStructure&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;ids&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mp-123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mp-321&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.DoesNotExist", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.DoesNotExist", "type": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.MultipleObjectsReturned", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.MultipleObjectsReturned", "type": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.get_status_display", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.get_status_display", "type": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.database.WorkItem.id", "modulename": "simmate.workflow_engine.execution.database", "qualname": "WorkItem.id", "type": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "(unknown)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor", "modulename": "simmate.workflow_engine.execution.executor", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor", "type": "class", "doc": "<p>Sets up a connection to the queue database. Unlike normal executors,\nthis does not set up any workers -- you must launch Worker instances\nelsewhere. It's primary role is to connect to the queue database\nand generate futures for workers. Therefore, think of the Executor\nas how you SUBMIT tasks and then the Worker is how you RUN jobs. You\nneed both classes to have the setup working properly.</p>\n\n<p>Only use this Executor when Dask can't solve your problem! It's main\nuse it to bypass university HPC cluster's firewalls because here worker\nsignals are one-directional -- that is they query a database and there\nis never a signal sent to the worker like other executors do. Thus\nwe can have workers anywhere we'd like as long as they have access\nto internet - so even multiple HPC clusters will work. At the moment,\nthe executor has no idea how many workers exist and their state. I may\nadd a \"worker heartbeat\" table to the queue database for the executor\nto read and run managerial tasks based off though.</p>\n", "bases": "prefect.executors.base.Executor"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.submit", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.submit", "type": "function", "doc": "<p>Submit a function to the executor for execution. Returns a future-like object.</p>\n\n<p>Args:\n    - fn (Callable): function that is being submitted for execution\n    - <em>args (Any): arguments to be passed to <code>fn</code>\n    - extra_context (dict, optional): an optional dictionary with extra information\n        about the submitted task\n    - *</em>kwargs (Any): keyword arguments to be passed to <code>fn</code></p>\n\n<p>Returns:\n    - Any: a future-like object</p>\n", "signature": "(self, fxn, *args, extra_context=None, **kwargs)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.map", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.map", "type": "function", "doc": "<p></p>\n", "signature": "(self, fxn, iterables, timeout=None, chunksize=100)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.shutdown", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.shutdown", "type": "function", "doc": "<p></p>\n", "signature": "(self, wait=True, cancel_futures=False)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.wait", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.wait", "type": "function", "doc": "<p>Waits for all futures to complete before returning a list of their results</p>\n", "signature": "(self, futures)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.queue_size", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.queue_size", "type": "function", "doc": "<p>Return the approximate size of the queue.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.clear_queue", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.clear_queue", "type": "function", "doc": "<p>Empties the WorkItem database table and delete everything. This will\nnot stop the workers if they are in the middle of a job though.</p>\n", "signature": "(self, are_you_sure=False)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.executor.SimmateExecutor.clear_finished", "modulename": "simmate.workflow_engine.execution.executor", "qualname": "SimmateExecutor.clear_finished", "type": "function", "doc": "<p>Empties the WorkItem database table and delete everything. This will\nnot stop the workers if they are in the middle of a job though.</p>\n", "signature": "(self, are_you_sure=False)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future", "modulename": "simmate.workflow_engine.execution.future", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.__init__", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, pk)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.cancel", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.cancel", "type": "function", "doc": "<p>Attempt to cancel the call. If the call is currently being executed or\nfinished running and cannot be cancelled then the method will return\nFalse, otherwise the call will be cancelled and the method will return\nTrue.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.cancelled", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.cancelled", "type": "function", "doc": "<p>Return True if the call was successfully cancelled.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.running", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.running", "type": "function", "doc": "<p>Return True if the call is currently being executed and cannot be cancelled.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.done", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.done", "type": "function", "doc": "<p>Return True if the call was successfully cancelled or finished running.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.DjangoFuture.result", "modulename": "simmate.workflow_engine.execution.future", "qualname": "DjangoFuture.result", "type": "function", "doc": "<p>Return the value returned by the call. If the call hasn\u2019t yet completed\nthen this method will wait up to timeout seconds. If the call hasn\u2019t\ncompleted in timeout seconds, then a concurrent.futures.TimeoutError\nwill be raised. timeout can be an int or float. If timeout is not\nspecified or None, there is no limit to the wait time.</p>\n\n<p>If the future is cancelled before completing then CancelledError\nwill be raised.</p>\n\n<p>If the call raised, this method will raise the same exception.</p>\n", "signature": "(self, timeout=None, sleep_step=0.1)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.future.CancelledError", "modulename": "simmate.workflow_engine.execution.future", "qualname": "CancelledError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "simmate.workflow_engine.execution.worker", "modulename": "simmate.workflow_engine.execution.worker", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.worker.SimmateWorker", "modulename": "simmate.workflow_engine.execution.worker", "qualname": "SimmateWorker", "type": "class", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.execution.worker.SimmateWorker.__init__", "modulename": "simmate.workflow_engine.execution.worker", "qualname": "SimmateWorker.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    nitems_max=None,\n    timeout=None,\n    close_on_empty_queue=False,\n    waittime_on_empty_queue=60\n)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.worker.SimmateWorker.start", "modulename": "simmate.workflow_engine.execution.worker", "qualname": "SimmateWorker.start", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.execution.worker.SimmateWorker.queue_size", "modulename": "simmate.workflow_engine.execution.worker", "qualname": "SimmateWorker.queue_size", "type": "function", "doc": "<p>Return the approximate size of the queue.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task", "type": "class", "doc": "<h2 id=\"the-supervised-staged-shell-task-aka-s3task\">The Supervised-Staged-Shell Task (aka \"S3Task\")</h2>\n\n<p>This class contains the core functionality to <strong>supervise</strong> a <strong>staged</strong> task\ninvolving some <strong>shell</strong> command.</p>\n\n<p>Let's breakdown what this means...</p>\n\n<p>A <em>shell</em> command is a single call to some external program. For example,\nVASP requires that we call the \"vasp_std &gt; vasp.out\" command in order to run a\ncalculation. We consider calling external programs a <em>staged</em> task made\nup of three steps:</p>\n\n<ul>\n<li>setup = writing any input files required for the program</li>\n<li>execution = actually calling the command and running our program</li>\n<li>workup = loading data from output files back into python</li>\n</ul>\n\n<p>And for <em>supervising</em> the task, this means we monitor the program while the\nexecution stage is running. So once a program is started, Simmate can check\noutput files for common errors/issues. If an error is found, we stop the\nprogram, fix the issue, and then restart it. Any fixes that were made are\nwritten to \"simmate_corrections.csv\".</p>\n\n<!--\nTODO: Make a simple diagram to visualize the overall process and add it here.\nIt will be similar to Custodian's, but we don't have a list of jobs here.\nhttps://materialsproject.github.io/custodian/index.html#usage\nThe steps are...\n\n- Write Input Files based on custom+defualt settings\n- Run the calculation by calling the program\n- Load ouput files\n- check for errors\n- [correct them, rerun]\n- postprocess/analysis\n-->\n\n<p>This entire process (the different stages and monitoring) is carried out\nusing the <code>run()</code> method. You rarely use this class directly. Instead,\nyou typically use a subclass of it. As a user, you really just need to do\nsomething like this:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>   <span class=\"kn\">from</span> <span class=\"nn\">simmate.calculator.example.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleTask</span>\n\n   <span class=\"n\">my_task</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTask</span><span class=\"p\">()</span>\n   <span class=\"n\">my_result</span> <span class=\"o\">=</span> <span class=\"n\">my_task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>And that's it!</p>\n\n<p>For experts, this class can be viewed as a combination of prefect's ShellTask,\na custodian Job, and Custodian monitoring. When subclassing this, we can absorb\nfunctionality of pymatgen.io.vasp.sets too. By merging all of these together\ninto one class, we make things much easier for users and creating new Tasks.</p>\n\n<h2 id=\"inheriting-from-this-class\">Inheriting from this class</h2>\n\n<p>This class is commonly used to make tasks for our calculator modules, so you\nwill likely want to subclass this. Here is a basic example of inheriting\nand then running a task:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflow_engine</span> <span class=\"kn\">import</span> <span class=\"n\">S3Task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">example.error_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">PossibleError1</span><span class=\"p\">,</span> <span class=\"n\">PossibleError2</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleTask</span><span class=\"p\">(</span><span class=\"n\">SSSTask</span><span class=\"p\">):</span>\n\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;echo example&quot;</span>  <span class=\"c1\"># just prints out &quot;example&quot;</span>\n    <span class=\"n\">max_corrections</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n    <span class=\"n\">error_handlers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">PossibleError1</span><span class=\"p\">,</span> <span class=\"n\">PossibleError2</span><span class=\"p\">]</span>\n    <span class=\"n\">polling_timestep</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n    <span class=\"n\">monitor_freq</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">some_new_setting</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"p\">,</span> <span class=\"n\">directory</span><span class=\"p\">):</span>  <span class=\"c1\"># &lt;-- MUST have these two args</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I&#39;m setting things up!&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;My new setting is </span><span class=\"si\">{</span><span class=\"n\">some_new_setting</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">workup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">directory</span><span class=\"p\">):</span>  <span class=\"c1\"># &lt;-- MUST have this arg</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I&#39;m working things up!&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTask</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>There are a couple things to note here:</p>\n\n<ul>\n<li>It's optional to set/overwrite attributes. You can also add new ones too.</li>\n<li>It's optional to write a new __init__, setup, or workup methods</li>\n<li>make sure you include the structure/directory inputs, even if you don't use them.</li>\n<li>Don't add new kwargs to methods. Instead handle these options through attributes.</li>\n</ul>\n\n<p>For a full (and advanced) example, of a subclass take a look at\n<code>simmate.calculators.vasp.tasks.base.VaspTask</code>.</p>\n", "bases": "prefect.core.task.Task"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.__init__", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.__init__", "type": "function", "doc": "<p>Creates a task instance of this class. The parameters passed will be the\nsame every time you call the task.run() method.</p>\n\n<p>Note, many of the parameters here are for the Monitoring settings. These\nare only ever relevent if there are ErrorHandlers added that have\nis_monitor=True. These handlers run while the shelltask itself is also\nrunning. Read more about ErrorHandlers for more info.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>max_corrections</code>:\nThe maximum number of times we can apply a correction and retry the shell\ncommand. The maximum number of times that corrections will be made (and\nshell command reran) before giving up on the calculation. Note, once this\nlimit is exceeded, the error is stored without correcting or restarting\nthe run.</li>\n<li><code>monitor</code>:\nWhether to run monitor handlers while the command runs. False means\nwait until the job has completed.</li>\n<li><code>polling_timestep</code>:\nIf we are monitoring the job for errors while it runs, this is how often\n(in seconds) we should check the status of our job. Note this check is\njust whether the job is done or not. This is NOT how often we check for\nerrors. See monitor_freq for that.</li>\n<li><code>monitor_freq</code>:\nThe frequency we should run check for errors with our monitors. This is\nbased on the polling_timestep loops. For example, if we have a\npolling_timestep of 10 seconds and a monitor_freq of 2, then we would run\nthe monitor checks every other loop -- or every 2x10 = 20 seconds. The\ndefault values of polling_timestep=10 and monitor_freq=30 indicate that\nwe run monitoring functions every 5 minutes (10x30=300s=5min).</li>\n<li><code>save_corrections_to_file</code>:\nWhether to write a log file of the corrections made. The default is True.</li>\n<li><code>corrections_filename</code>:\nIf save_corrections_to_file is True, this is the filename of where\nto write the corrections. The default is \"simmate_corrections.csv\".</li>\n<li><code>compress_output</code>:\nWhether to compress the directory to a zip file at the end of the\ntask run. After compression, it will also delete the directory.\nThe default is False.</li>\n<li><code>**kwargs</code>:\nAll extra arguments supported by\n<a href=\"https://docs.prefect.io/api/latest/core/task.html\">prefect.core.task.Task</a>.</li>\n</ul>\n", "signature": "(\n    self,\n    max_corrections: int = 5,\n    monitor: bool = True,\n    polling_timestep: float = 1,\n    monitor_freq: int = 300,\n    save_corrections_to_file: bool = True,\n    corrections_filename: str = 'simmate_corrections.csv',\n    compress_output: bool = False,\n    **kwargs: Any\n)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.command", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.command", "type": "variable", "doc": "<p>The defualt shell command to use.</p>\n", "annotation": ": str", "default_value": " = None"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.requires_structure", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.requires_structure", "type": "variable", "doc": "<p>Indicates whether a structure is needed if for the run() method.</p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.error_handlers", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.error_handlers", "type": "variable", "doc": "<p>A list of ErrorHandler objects to use in order of priority (that is, highest\npriority is first). If one handler is triggered, the correction will be \napplied and none of the following handlers will be checked.</p>\n", "annotation": ": List[simmate.workflow_engine.error_handler.ErrorHandler]", "default_value": " = []"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.setup", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.setup", "type": "function", "doc": "<p>This abstract method is ran before the command is actually executed. This\nallows for some pre-processing, such as writing input files or any other\nanalysis.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase setup() is normally called within the run() method.</p>\n\n<p>Some tasks don't require a setup() method, so by default, this method\ndoesn't nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>structure</code>:\nThe structure to use for the task, if one is required.</li>\n<li><code>directory</code>:\nThe directory to run everything in. Must exist already.</li>\n<li><code>**kwargs</code>:\nExtra kwargs that may be passed to some function within. Because\nSimmate prefers fixed settings for their workflows, this is typically\nnot used, but instead, keywords should be explicitly defined when\nwriting a setup method.</li>\n</ul>\n", "signature": "(\n    self,\n    structure: simmate.toolkit.base_data_types.structure.Structure,\n    directory: str,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.execute", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.execute", "type": "function", "doc": "<p>This calls the command within the target directory and handles all error\nhandling as well as monitoring of the job.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase <code>execute</code> is normally called within the <code>run</code> method.</p>\n\n<p>Some tasks don't require a setup() method, so by default, this method\ndoes nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>directory</code>:\nThe directory to run everything in.</li>\n<li><code>command</code>:\nThe command that will be called during execution.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>corrections</code>\nA list of tuples where each entry is a error identified and the\ncorrection applied. Ex: [(\"ExampleError\", \"ExampleCorrection\")]</li>\n</ul>\n", "signature": "(self, directory: str, command: str)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.workup", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.workup", "type": "function", "doc": "<p>This method is called at the end of a job, <em>after</em> error detection.\nThis allows post-processing, such as cleanup, analysis of results,\netc. This should return the result of the entire job, such as a\nthe final structure or final energy calculated.</p>\n\n<p>You should never call this method directly unless you are debugging. This\nis becuase workup() is normally called within the run() method.</p>\n\n<p>Some tasks don't require a workup() method, so by default, this method\ndoes nothing but \"pass\".</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>directory</code>:\nThe directory to run everything in.</li>\n</ul>\n", "signature": "(self, directory: str)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.run", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.run", "type": "function", "doc": "<p>Runs the entire staged task (setup, execution, workup), which includes\nsupervising during execution.</p>\n\n<p>Call this method once you have your task initialized. For each run you\ncan provide a new structure, directory, or command. For example,</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.calculator.example.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleTask</span>\n\n<span class=\"n\">my_task</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTask</span><span class=\"p\">()</span>\n<span class=\"n\">my_result</span> <span class=\"o\">=</span> <span class=\"n\">my_task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">my_structure</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"o\">=</span><span class=\"n\">my_command</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>structure</code>:\nThe structure to use for the task, if one is required.</li>\n<li><code>command</code>:\nThe command that will be called during execution.</li>\n<li><code>directory</code>:\nThe directory to run everything in. This is passed to the ulitities\nfunction simmate.ulitities.get_directory</li>\n<li><code>**kwargs</code>:\nAny extra keywords that should be passed to the setup() method.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li>a dictionary of the result, corrections, and working directory used\nfor this task run</li>\n</ul>\n", "signature": "(\n    self,\n    structure: simmate.toolkit.base_data_types.structure.Structure = None,\n    directory: str = None,\n    command: str = None,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.get_config", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.get_config", "type": "function", "doc": "<p>Grabs the overall settings from the class.</p>\n\n<p>By default, this will just grab the class's __dict__ attribute but this\ncan be overwritten to show only relevent information.</p>\n", "signature": "(cls)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.S3Task.print_config", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "S3Task.print_config", "type": "function", "doc": "<p>Takes the result of get_config and prints it in a yaml format that is\neasier to read.</p>\n", "signature": "(cls)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.MaxCorrectionsError", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "MaxCorrectionsError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.NonZeroExitError", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "NonZeroExitError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "simmate.workflow_engine.supervised_staged_shell_task.StructureRequiredError", "modulename": "simmate.workflow_engine.supervised_staged_shell_task", "qualname": "StructureRequiredError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "simmate.workflow_engine.utilities", "modulename": "simmate.workflow_engine.utilities", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.utilities.s3task_to_workflow", "modulename": "simmate.workflow_engine.utilities", "qualname": "s3task_to_workflow", "type": "function", "doc": "<p>Builds a workflow from a S3Task and it's corresponding database table.</p>\n\n<p>Very often with Simmate's S3Tasks, the workflow for a single S3Task is\nthe same. The workflow is typically made of three tasks:</p>\n\n<ol>\n<li>loading the input parameters and registering the calculation</li>\n<li>running the calculation (what this S3Task does on its own)</li>\n<li>saving the calculation results</li>\n</ol>\n\n<p>Task 1 and 3 always use the same functions, where we just need to tell\nit which database table we are registering/saving to.</p>\n\n<p>Because of this common recipe for workflows, we use this method to make\nthe workflow for us.</p>\n", "signature": "(\n    name: str,\n    module: str,\n    project_name: str,\n    s3task: simmate.workflow_engine.supervised_staged_shell_task.S3Task,\n    calculation_table: simmate.database.base_data_types.calculation.Calculation,\n    register_kwargs: List[str]\n)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.workflow", "modulename": "simmate.workflow_engine.workflow", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.workflow.Workflow", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow", "type": "class", "doc": "<p>This class behaves exactly like a normal Prefect workflow, where we add some\ncommon utilities and pre-submit tasks. For example, there is the <code>run_cloud</code>\nmethod, which allows us to register a calculation to a database table before\nwe submit the workflow to Prefect Cloud.</p>\n\n<p>To learn how to use this class, see <a href=\"https://docs.prefect.io/api/latest/core/flow.html#flow-2\">prefect.core.flow.Flow</a></p>\n", "bases": "prefect.core.flow.Flow"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.result_task", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.result_task", "type": "variable", "doc": "<p>In many ETL workflows, we may also want the result of the some terminating\ntask directly. This would save us from having to go find the result in\nthe database. So by setting <code>result_task</code>, we are able get access a specific task's\nresult -- directly as a python object(s). This is optional.</p>\n", "annotation": ": prefect.core.task.Task", "default_value": " = None"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.project_name", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.project_name", "type": "variable", "doc": "<p>The name of the project in the  that this workflow is associated with. This \nattribute is mainly just for organizing workflows in the Prefect Cloud interface.</p>\n", "annotation": ": str", "default_value": " = None"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.s3task", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.s3task", "type": "variable", "doc": "<p>The supervised-staged-shell task (or S3Task) that this workflow uses to run.\nFor understanding what the calculation does and the settings it uses, users\nshould start here. You can also use a workflows <code>s3task.run</code> to run the workflow\nwithout storing results in the database.</p>\n", "annotation": ": simmate.workflow_engine.supervised_staged_shell_task.S3Task", "default_value": " = None"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.calculation_table", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.calculation_table", "type": "variable", "doc": "<p>The database table where calculation information (such as the prefect_flow_run_id)\nis stored. Note, for NestedWorkflows, this table will not be the same as the\nresult table! The table should use \n<code>simmate.database.base_data_types.Calculation</code></p>\n", "annotation": ": simmate.database.base_data_types.calculation.Calculation", "default_value": " = None"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.result_table", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.result_table", "type": "variable", "doc": "<p>The database table where all calculation results are stored. In many cases,\nthis is the same table as <code>calculation_table</code> -- the exception is\nfor NestedWorkflows, where the result table may point to a specific\nsub-workflow's table for results. An example of this is the relaxation/staged\nworkflow, which is made up of a series of relaxations -- and the result \ntable points to the final relaxation in this series. The table should use \n<code>simmate.database.base_data_types.DatabaseTable</code></p>\n", "annotation": ": simmate.database.base_data_types.base.DatabaseTable", "default_value": " = None"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.type", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.type", "type": "variable", "doc": "<p>Gives the workflow type of this workflow. For example the workflow named\n'static-energy/matproj' would have the type <code>static-energy</code>.</p>\n", "annotation": ": str"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.name_short", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.name_short", "type": "variable", "doc": "<p>Gives the present name of the workflow. For example the workflow named\n'static-energy/matproj' would have the shortname <code>matproj</code></p>\n", "annotation": ": str"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.description_doc", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.description_doc", "type": "variable", "doc": "<p>This simply returns the documentation string of this workflow -- so this\nis the same as <code>__doc__</code>. This attribute is only defined for beginners\nto python and for use in django templates for the website interface.</p>\n", "annotation": ": str"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.run_cloud", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.run_cloud", "type": "function", "doc": "<p>This schedules the workflow to run remotely on Prefect Cloud.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>labels</code>:\na list of labels to schedule the workflow with</p></li>\n<li><p><code>wait_for_run</code>:\nwhether to wait for the workflow to finish. If False, the workflow\nwill simply be submitted and then exit. The default is True.</p></li>\n<li><p><code>**kwargs</code>:\nall options that are normally passed to the workflow.run() method</p></li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li>The flow run id that was used in prefect cloud.</li>\n</ul>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>Make sure you have Prefect properly configured and have registered your\nworkflow with the backend.</p>\n\n<p>Note that this method can be viewed as a fork of:\n    - from prefect.tasks.prefect.flow_run import create_flow_run\nIt can also be viewed as a more convenient way to call to client.create_flow_run.\nI don't accept any other client.create_flow_run() inputs besides 'labels'.\nThis may change in the future if I need to set flow run names or schedules.</p>\n", "signature": "(\n    self,\n    labels: List[str] = [],\n    wait_for_run: bool = True,\n    **kwargs\n) -> str", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.wait_for_flow_run", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.wait_for_flow_run", "type": "function", "doc": "<p>Waits for a given flow run to complete</p>\n\n<p>This method is a direct fork of...\n    from prefect.tasks.prefect.flow_run import wait_for_flow_run</p>\n\n<p>It does exactly the same thing where I just assume I want to stream logs.</p>\n", "signature": "(self, flow_run_id: str)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.nflows_submitted", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.nflows_submitted", "type": "variable", "doc": "<p>Queries Prefect to see how many workflows are in a running or submitted\nstate. It will return a count (integer).</p>\n\n<p>Note, your workflow must be registered with Prefect for this to work.</p>\n", "annotation": ": int"}, {"fullname": "simmate.workflow_engine.workflow.Workflow.to_workflow_task", "modulename": "simmate.workflow_engine.workflow", "qualname": "Workflow.to_workflow_task", "type": "function", "doc": "<p>Converts a prefect workflow to a prefect task (aka a \"workflow task\")</p>\n\n<p>See the documentation in workflow_engine.tasks.workflow_task for more.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.workflow_task", "modulename": "simmate.workflow_engine.workflow_task", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflow_engine.workflow_task.WorkflowTask", "modulename": "simmate.workflow_engine.workflow_task", "qualname": "WorkflowTask", "type": "class", "doc": "<p>Many times in Material Science, a workflow is made up of other smaller workflows.\nFor example, calculations for bandstructure first involve a structure relaxation\nfollowed by a static energy calculation -- before the bandstructure is even\ncalculated.</p>\n\n<p>For this reason, we need a way to call these workflows as if they were a task.</p>\n\n<p>The easiest way to make your Workflow into a WorkflowTask is actually NOT\ncalling this class. But instead using the to_workflow_task method:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflows</span> <span class=\"kn\">import</span> <span class=\"n\">example_workflow</span>\n\n<span class=\"n\">my_task</span> <span class=\"o\">=</span> <span class=\"n\">example_workflow</span><span class=\"o\">.</span><span class=\"n\">to_workflow_task</span><span class=\"p\">()</span>\n</code></pre></div>\n", "bases": "prefect.core.task.Task"}, {"fullname": "simmate.workflow_engine.workflow_task.WorkflowTask.__init__", "modulename": "simmate.workflow_engine.workflow_task", "qualname": "WorkflowTask.__init__", "type": "function", "doc": "<p>Creates a Prefect task instance from a workflow and determines how it\nshould be ran when task.run() is called.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>workflow</code>:\nThe full workflow to run.</li>\n<li><code>return_result</code>:\nIf True, the task run will return the result of the task set as the\nworfklow.result_task attribute. If False, the workflow State is returned.\nThe default is True.</li>\n<li><code>executor_type</code>:\nHow the workflow should be scheduled and ran. The options are either\nlocal or prefect (i.e. prefect cloud). The default is \"local\".</li>\n<li><code>wait_for_run</code>:\nIf Prefect is used to schedule the workflow, then this indicates\nwhether we should wait for the flow to finish or not.</li>\n<li><code>labels</code>:\nIf Prefect is used to schedule the workflow, then this indicates\nwhat labels should be attached to the flow</li>\n<li><code>log_stdout</code>:\nWhether to log anything printed by the workflow. The default is True.</li>\n<li><code>**kwargs</code>:\nAll extra arguments supported by\n<a href=\"https://docs.prefect.io/api/latest/core/task.html\">prefect.core.task.Task</a>.</li>\n</ul>\n", "signature": "(\n    self,\n    workflow: simmate.workflow_engine.workflow.Workflow,\n    return_result=True,\n    executor_type: str = 'local',\n    wait_for_run: bool = True,\n    labels: List[str] = [],\n    log_stdout: bool = True,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "simmate.workflow_engine.workflow_task.WorkflowTask.run", "modulename": "simmate.workflow_engine.workflow_task", "qualname": "WorkflowTask.run", "type": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>executor_type</code>:\nHow the workflow should be scheduled and ran. The options are either\nlocal or prefect (i.e. prefect cloud).</li>\n<li><code>return_result</code>:\nIf True, the task run will return the result of the task set as the\nworfklow.result_task attribute. If False, the workflow State is returned.\nThe default is True.</li>\n<li><code>wait_for_run</code>:\nIf Prefect is used to schedule the workflow, then this indicates\nwhether we should wait for the flow to finish or not.</li>\n<li><code>labels</code>:\nIf Prefect is used to schedule the workflow, then this indicates\nwhat labels should be attached to the flow</li>\n<li><code>**parameters</code>:\nAll options to pass the workflow.run() method.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>str\n    The flow-run-id if submitted with prefect OR the prefect state if\n    the workflow was ran locally</p>\n", "signature": "(\n    self,\n    executor_type: str = None,\n    return_result: bool = None,\n    wait_for_run: bool = None,\n    labels: List[str] = None,\n    **parameters\n)", "funcdef": "def"}, {"fullname": "simmate.workflows", "modulename": "simmate.workflows", "type": "module", "doc": "<h1 id=\"simmate-workflows\">Simmate Workflows</h1>\n\n<p>This module brings together all predefined workflows and organizes them by application for convenience.</p>\n\n<h1 id=\"usage\">Usage</h1>\n\n<p><a href=\"https://github.com/jacksund/simmate/tree/main/tutorials\">Tutorials 01-05</a> will teach you how to run workflows and access their results. But as a review:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflows.static_energy</span> <span class=\"kn\">import</span> <span class=\"n\">mit_workflow</span>\n\n<span class=\"c1\"># runs the workflow and returns a status</span>\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">mit_workflow</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">structure</span><span class=\"o\">=...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># gives the DatabaseTable where ALL results are stored</span>\n<span class=\"n\">energy_mit</span><span class=\"o\">.</span><span class=\"n\">result_table</span>\n</code></pre></div>\n\n<h1 id=\"location-of-each-workflows-source-code\">Location of Each Workflow's Source-code</h1>\n\n<p>The code that defines these workflows and configures their settings are located in the corresponding <code>simmate.calculators</code> module. We make workflows accessible here because users often want to search for workflows by application -- not by their calculator name. For example, a structure relaxation that uses VASP under MIT project settings can be imported with...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflows.relaxation</span> <span class=\"kn\">import</span> <span class=\"n\">mit_workflow</span>\n</code></pre></div>\n\n<p>Alternatively, this same workflow could have been imported with...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.calculators.vasp.workflows.relaxation</span> <span class=\"kn\">import</span> <span class=\"n\">mit_workflow</span>\n</code></pre></div>\n"}, {"fullname": "simmate.workflows.band_structure", "modulename": "simmate.workflows.band_structure", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.density_of_states", "modulename": "simmate.workflows.density_of_states", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.diffusion", "modulename": "simmate.workflows.diffusion", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.dynamics", "modulename": "simmate.workflows.dynamics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.population_analysis", "modulename": "simmate.workflows.population_analysis", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.relaxation", "modulename": "simmate.workflows.relaxation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.static_energy", "modulename": "simmate.workflows.static_energy", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.utilities", "modulename": "simmate.workflows.utilities", "type": "module", "doc": "<p></p>\n"}, {"fullname": "simmate.workflows.utilities.get_list_of_workflows_by_type", "modulename": "simmate.workflows.utilities", "qualname": "get_list_of_workflows_by_type", "type": "function", "doc": "<p>Returns a list of all the workflows located in the given module.</p>\n", "signature": "(flow_type: str, full_name: bool = True) -> List[str]", "funcdef": "def"}, {"fullname": "simmate.workflows.utilities.get_list_of_all_workflows", "modulename": "simmate.workflows.utilities", "qualname": "get_list_of_all_workflows", "type": "function", "doc": "<p>Returns a list of all the workflows of all types.</p>\n\n<p>This utility was make specifically for the CLI where we print out all\nworkflow names for the user.</p>\n", "signature": "() -> List[str]", "funcdef": "def"}, {"fullname": "simmate.workflows.utilities.get_workflow", "modulename": "simmate.workflows.utilities", "qualname": "get_workflow", "type": "function", "doc": "<p>This is a utility for that grabs a workflow from the simmate workflows.</p>\n\n<p>This is typically used when we need to dynamically import a workflow, such\nas when calling a workflow through the command-line. We recommend avoiding\nthis function when possible, and instead directly import your workflow.</p>\n\n<p>For example...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflows.utilities</span> <span class=\"kn\">import</span> <span class=\"n\">get_workflow</span>\n\n<span class=\"n\">matproj_workflow</span> <span class=\"o\">=</span> <span class=\"n\">get_workflow</span><span class=\"p\">(</span><span class=\"s2\">&quot;relaxation/matproj&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>...does the same exact thing as...</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">simmate.workflows.relaxation</span> <span class=\"kn\">import</span> <span class=\"n\">matproj_workflow</span>\n</code></pre></div>\n\n<p>Note the naming of workflows therefore follows the format:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># an example import of some workflow</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simmate.workflows.example_module</span> <span class=\"kn\">import</span> <span class=\"n\">example_flowtype_workflow</span>\n\n<span class=\"c1\"># an example of how what this workflows name would be</span>\n<span class=\"n\">workflow_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;example-module/example-flowtype&quot;</span>\n</code></pre></div>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>workflow_name</code>:\nName of the workflow to load. Examples include \"relaxation/matproj\",\n\"static-energy/quality01\", and \"diffusion/all-paths\"</li>\n<li><code>precheck_flow_exists</code>:\nWhether to check if the workflow actually exists before attempting the\nimport. Note, this requires loading all other workflows in order to make\nthis check, so it slows down the function substansially. Defaults to false.</li>\n<li><code>print_equivalent_import</code>:\nWhether to print a message indicating the equivalent import for this\nworkflow. Typically this is only useful for beginners using the CLI.\nDefaults to false.</li>\n</ul>\n", "signature": "(\n    workflow_name: str,\n    precheck_flow_exists: bool = False,\n    print_equivalent_import: bool = False\n) -> simmate.workflow_engine.workflow.Workflow", "funcdef": "def"}, {"fullname": "simmate.workflows.utilities.load_results_from_directories", "modulename": "simmate.workflows.utilities", "qualname": "load_results_from_directories", "type": "function", "doc": "<p>Goes through a given directory and finds all \"simmate-task-\" folders and zip\narchives present. The simmate_metadata.yaml file is used in each of these\nto load results into the database. All folders will be converted to archives\nonce they've been loaded.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>base_directory</code>:\nThe main directory that will contain folders to archive. Defaults to the\nworking directory.</li>\n</ul>\n", "signature": "(base_directory: str = '.')", "funcdef": "def"}, {"fullname": "simmate.workflows.utilities.get_unique_parameters", "modulename": "simmate.workflows.utilities", "qualname": "get_unique_parameters", "type": "function", "doc": "<p>Returns a list of all unique parameter names accross all workflows.</p>\n\n<p>This utility is really just to help developers ensure they are covering\nall cases when implementing new features, so this function isn't actually\ncalled elsewhere.</p>\n", "signature": "() -> List[str]", "funcdef": "def"}, {"fullname": "simmate.workflows.utilities.parse_parameters", "modulename": "simmate.workflows.utilities", "qualname": "parse_parameters", "type": "function", "doc": "<p>This utility is meant to take a dictionary of parameters for a workflow and\nthen convert them to proper python objects.</p>\n\n<p>For example, a common input parameter for workflows is \"structure\", which\ncan be provided a number of ways:\n    - a filename\n    - a json string\n    - a dictionary pointing to a database entry\n    - a toolkit Structure object\n    - etc...</p>\n\n<p>Even though all of these inputs are accepts, <code>workflow.run</code> always expects\na</p>\n", "signature": "(**kwargs) -> dict", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();